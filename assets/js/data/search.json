[ { "title": "Comandos no Terminal", "url": "/aulas/posts/Comandos-no-terminal/", "categories": "AULAS 2022, SISTEMA OPERACIONAL PROPRIETÁRIO", "tags": "prompt, comandos, Windows, linux, manutenção", "date": "2024-04-05 10:10:00 -0300", "snippet": "Comandos básicos para trabalhar com arquivos e pastas no terminal do Linux e no prompt de comando do Windows: Listar arquivos e pastas: Linux: ls Windows: dir Mudar de diretór...", "content": "Comandos básicos para trabalhar com arquivos e pastas no terminal do Linux e no prompt de comando do Windows: Listar arquivos e pastas: Linux: ls Windows: dir Mudar de diretório: Linux: cd nome_da_pasta Windows: cd nome_da_pasta Criar um diretório: Linux: mkdir nome_da_pasta Windows: mkdir nome_da_pasta Remover um arquivo: Linux: rm nome_do_arquivo Windows: del nome_do_arquivo Remover um diretório: Linux: rmdir nome_da_pasta (para diretórios vazios) ou rm -r nome_da_pasta (para diretórios com arquivos) Windows: rmdir nome_da_pasta (para diretórios vazios) ou rmdir /S nome_da_pasta (para diretórios com arquivos) Copiar um arquivo: Linux: cp origem destino Windows: copy origem destino Mover ou renomear um arquivo: Linux: mv origem destino Windows: move origem destino Lembre-se de substituir “nome_da_pasta”, “nome_do_arquivo”, “origem” e “destino” pelos seus próprios valores. Estes são apenas alguns exemplos de comandos básicos, existem muitos mais comandos e opções disponíveis tanto no terminal do Linux quanto no prompt de comando do Windows.ExemploExemplo passo a passo de como você pode usar esses comandos para criar um diretório, criar um arquivo de texto dentro dele, escrever algo nesse arquivo e, finalmente, exibir o conteúdo do arquivo.No terminal do Linux:# Criar um diretóriomkdir MeuDiretorio# Mudar para o diretório criadocd MeuDiretorio# Criar um arquivo de texto e escrever algo neleecho \"Olá, Mundo!\" &gt; MeuArquivo.txt# Exibir o conteúdo do arquivocat MeuArquivo.txtNo prompt de comando do Windows:REM Criar um diretóriomkdir MeuDiretorioREM Mudar para o diretório criadocd MeuDiretorioREM Criar um arquivo de texto e escrever algo neleecho Olá, Mundo! &gt; MeuArquivo.txtREM Exibir o conteúdo do arquivotype MeuArquivo.txtNesses exemplos, “MeuDiretorio” é o nome do diretório que estamos criando, “MeuArquivo.txt” é o nome do arquivo de texto que estamos criando e “Olá, Mundo!” é o texto que estamos escrevendo no arquivo. Você pode substituir esses valores pelos que desejar.Lembre-se de que esses comandos devem ser executados em um terminal ou prompt de comando. No Linux, você pode abrir um terminal procurando por “Terminal” no menu de aplicações. No Windows, você pode abrir o prompt de comando procurando por “cmd” no menu Iniciar.ScriptsUm script é um arquivo que contém uma sequência de comandos que são executados por um determinado interpretador. Em outras palavras, um script é basicamente um programa que é executado passo a passo pelo sistema operacional.Os scripts são frequentemente usados para automatizar tarefas comuns, permitindo que o usuário economize tempo e evite erros. Eles podem ser escritos em várias linguagens de script, como Bash, Python, Perl, Ruby, JavaScript, entre outras.Aqui estão algumas características dos scripts: Automatização de tarefas: Scripts são frequentemente usados para automatizar tarefas repetitivas. Por exemplo, você pode escrever um script para fazer backup de arquivos, monitorar o uso do sistema, iniciar ou parar serviços, entre outras tarefas. Portabilidade: Scripts podem ser executados em qualquer sistema que tenha o interpretador apropriado instalado. Isso os torna uma ferramenta útil para tarefas que precisam ser realizadas em vários sistemas. Facilidade de uso: Scripts são arquivos de texto que podem ser criados e modificados com qualquer editor de texto. Isso os torna fáceis de criar, modificar e distribuir. Execução passo a passo: Ao contrário dos programas compilados, os scripts são executados linha por linha. Isso pode torná-los mais fáceis de depurar, pois você pode ver exatamente o que o script está fazendo em cada etapa. Automatizando com ScriptsEtapas para criar scripts tanto no Linux quanto no Windows:No Linux: Crie um novo arquivo de script. Você pode usar qualquer editor de texto que preferir. Por exemplo, para criar um novo arquivo chamado script.sh, você pode abrir um terminal e digitar nano script.sh. Escreva seu script. No topo do arquivo, você deve incluir #!/bin/bash. Isso indica que o script deve ser executado usando o interpretador bash. Em seguida, você pode escrever seus comandos. Por exemplo: #!/bin/bash echo \"Olá, Mundo!\" Salve e feche o arquivo. No nano, você pode fazer isso pressionando Ctrl+X, depois Y para confirmar que deseja salvar as alterações e, em seguida, Enter para confirmar o nome do arquivo. Torne o script executável. No terminal, digite chmod +x script.sh. Execute o script. No terminal, digite ./script.sh. No Windows: Crie um novo arquivo de script. Você pode usar qualquer editor de texto que preferir. Por exemplo, para criar um novo arquivo chamado script.bat, você pode abrir o Bloco de Notas e salvar o arquivo como script.bat. Escreva seu script. No topo do arquivo, você deve incluir @echo off. Isso impede que o prompt de comando exiba o próprio comando. Em seguida, você pode escrever seus comandos. Por exemplo: @echo off echo Olá, Mundo! Salve e feche o arquivo. No Bloco de Notas, você pode fazer isso clicando em Arquivo &gt; Salvar. Execute o script. Abra o Prompt de Comando, navegue até o diretório onde o arquivo script.bat está localizado e digite script.bat. Exemplo de scriptSiga os seguintes passos para criar um script tanto no linux como no windows, que crie uma pasta, entre nela, e envie um texto para um arquivo, e crie outra pasta e copie esse arquivo.No terminal do Linux:Primeiro, crie um novo arquivo de script com seu editor de texto favorito e escreva o seguinte:#!/bin/bash# Criar uma pastamkdir pasta1# Entrar na pastacd pasta1# Enviar um texto para um arquivoecho \"Olá, Mundo!\" &gt; arquivo.txt# Voltar para a pasta anteriorcd ..# Criar outra pastamkdir pasta2# Copiar o arquivo para a nova pastacp pasta1/arquivo.txt pasta2/Salve este arquivo como script.sh, torne-o executável com chmod +x script.sh e execute-o com ./script.sh.No prompt de comando do Windows:Primeiro, crie um novo arquivo de script com seu editor de texto favorito e escreva o seguinte:@echo offREM Criar uma pastamkdir pasta1REM Entrar na pastacd pasta1REM Enviar um texto para um arquivoecho Olá, Mundo! &gt; arquivo.txtREM Voltar para a pasta anteriorcd ..REM Criar outra pastamkdir pasta2REM Copiar o arquivo para a nova pastacopy pasta1\\arquivo.txt pasta2\\Salve este arquivo como script.bat e execute-o com script.bat.Nesses exemplos, “pasta1” e “pasta2” são os nomes das pastas que estamos criando, “arquivo.txt” é o nome do arquivo que estamos criando e “Olá, Mundo!” é o texto que estamos escrevendo no arquivo. Você pode substituir esses valores pelos que desejar.Referências Comandos no Terminal do linux Comandos no Prompt do Windows" }, { "title": "CRUD Java com Maven", "url": "/aulas/posts/crud-com-java-com-maven/", "categories": "DESENVOLVIMENTO, PROGRAMADOR", "tags": "Senac, programador, projetos, banco de dados", "date": "2023-06-01 17:00:00 -0300", "snippet": "O Maven é uma ferramenta de gerenciamento de projetos amplamente utilizada no desenvolvimento de software em Java. Ele oferece uma abordagem padronizada para a construção, compilação, empacotamento...", "content": "O Maven é uma ferramenta de gerenciamento de projetos amplamente utilizada no desenvolvimento de software em Java. Ele oferece uma abordagem padronizada para a construção, compilação, empacotamento e distribuição de projetos Java. O Maven também lida com a resolução de dependências e fornece um sistema de construção baseado em plugins.Conceitos Básicos do MavenAqui estão alguns conceitos básicos do Maven que você precisa entender antes de usá-lo: Projeto: O Maven organiza o desenvolvimento de software em projetos. Cada projeto é identificado por um arquivo pom.xml (Project Object Model), que descreve as configurações e dependências do projeto. POM: O arquivo pom.xml é o coração do Maven. Ele contém as informações do projeto, como nome, versão, descrição, dependências, plugins e perfis. Dependências: O Maven facilita a resolução e gerenciamento de dependências do projeto. Você pode declarar as dependências necessárias no arquivo pom.xml e o Maven se encarregará de baixar as bibliotecas correspondentes automaticamente. Repositório: O Maven utiliza repositórios para armazenar e buscar dependências. Existem dois tipos principais de repositórios: repositórios locais (armazenam as dependências no ambiente local do desenvolvedor) e repositórios remotos (como o Maven Central, onde as bibliotecas estão disponíveis para download). Ciclo de Vida do Build: O Maven possui um ciclo de vida de build pré-definido com uma série de fases, como clean, compile, test, package e install. Cada fase executa uma série de metas (goals) associadas a plugins do Maven. Plugins: Os plugins são componentes do Maven que executam tarefas específicas durante o ciclo de vida do build. Eles podem ser usados para compilar o código-fonte, executar testes, gerar documentação, empacotar o projeto, entre outras funcionalidades.Configurando o MavenPara começar a usar o Maven, você precisa ter o Maven instalado em seu ambiente de desenvolvimento. Você pode baixar a versão mais recente do Maven no site oficial e seguir as instruções de instalação específicas para o seu sistema operacional.Após a instalação, verifique se o Maven está configurado corretamente, executando o seguinte comando no terminal ou prompt de comando:mvn --versionIsso exibirá a versão do Maven e outras informações relevantes.Estrutura de Diretórios do Projeto MavenUm projeto Maven segue uma estrutura de diretórios padrão, que ajuda a organizar o código-fonte e outros recursos. A estrutura de diretórios típica de um projeto Maven é a seguinte:meu-projeto/ ├── src/ │ ├── main/ │ │ ├── java/ (código-fonte principal) │ │ └── resources/ (recursos principais) │ └── test/ │ ├── java/ (código-fonte de teste) │ └── resources/ (recursos de teste) └── pom.xmlO diretório src/main/java contém o código-fonte principal do projeto, enquanto src/main/resources é usado para armazenar recursos como arquivos de configuração. O diretório src/test/java contém os arquivos de teste unitário, e src/test/resources é usado para recursos de teste.Ciclo de Vida do Build do MavenO Maven possui um ciclo de vida de build pré-definido com três fases principais: default, clean e site. Cada fase é composta por uma série de metas (goals). Aqui estão algumas das fases e metas mais comuns: clean: Remove os artefatos e arquivos gerados em builds anteriores. Meta: clean compile: Compila o código-fonte do projeto. Meta: compile test: Executa os testes unitários do projeto. Metas: test, surefire:test (executa os testes usando o plugin Surefire) package: Empacota o código compilado em um formato específico, como JAR, WAR ou ZIP. Meta: package install: Instala o pacote no repositório local para uso em outros projetos locais. Meta: install deploy: Copia o pacote final para um repositório remoto para compartilhamento com outros desenvolvedores ou servidores de produção. Meta: deploy site: Gera documentação do projeto, como relatórios, gráficos e páginas da web. Meta: site Para executar uma meta específica do Maven, você pode usar o seguinte comando:mvn &lt;fase&gt;:&lt;meta&gt;Por exemplo, para compilar o código-fonte, você pode executar:mvn compileO Maven executará a fase compile e todas as fases anteriores necessárias. O Maven é uma ferramenta poderosa que simplifica o gerenciamento de projetos Java. Ele oferece uma abordagem padronizada para compilação, teste, empacotamento e distribuição de projetos, além de lidar com dependências e plugins. Compreender os conceitos básicos do Maven e sua estrutura de diretórios permitirá que você configure e utilize o Maven com eficiência em seus projetos Java.Configurando o Maven com MySql ServerNeste artigo, vamos explorar o desenvolvimento de um aplicativo CRUD (Create, Read, Update, Delete) em Java, que se conecta a um SGBD (Sistema de Gerenciamento de Banco de Dados) MySQL utilizando o conector JDBC. Além disso, vamos configurar o Maven para gerenciar as dependências do projeto.Pré-requisitosAntes de começarmos, certifique-se de que você tenha as seguintes ferramentas instaladas e configuradas em seu ambiente de desenvolvimento: JDK (Java Development Kit) - para compilar e executar o código Java. IDE (Integrated Development Environment) - como Eclipse, IntelliJ IDEA ou NetBeans para escrever o código Java. SGBD MySQL - instalado e em execução em sua máquina local ou em um servidor remoto. Maven - uma ferramenta de gerenciamento de dependências que ajudará a configurar e compilar o projeto.Configurando o Projeto com Maven Crie um novo diretório para o projeto e abra-o em sua IDE. Inicie um novo projeto Maven usando um dos seguintes métodos: Eclipse: Vá em File &gt; New &gt; Project..., selecione Maven &gt; Maven Project e siga as instruções para criar o projeto. VsCode: instale as extenções para projetos java e Maven, acesse o painel esquerdo, o explorador em Maven &gt; + Create Maven Project, selecione a opção Create from archetype. Selecione maven-archetype-quickstart e siga as instruções para criar o projeto. NetBeans: Vá em File &gt; New Project..., selecione Maven na categoria, escolha Maven Project e siga as instruções para criar o projeto. Após a criação do projeto, você verá um arquivo pom.xml que contém as configurações do Maven. Visite o repositório do conector e selecione a versão mais atual, copie o código, e abra o arquivo pom.xml e adicione a dependência do conector JDBC do MySQL. Por exemplo: cole o seguinte trecho dentro da tag &lt;dependencies&gt;:&lt;!-- https://mvnrepository.com/artifact/mysql/mysql-connector-java --&gt;&lt;dependency&gt; &lt;groupId&gt;mysql&lt;/groupId&gt; &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt; &lt;version&gt;8.0.33&lt;/version&gt;&lt;/dependency&gt;Certifique-se de substituir a versão do conector JDBC pela versão mais recente disponível. Salve o arquivo pom.xml para que as alterações entrem em vigor. O Maven agora baixará automaticamente o conector JDBC do MySQL e as dependências necessárias para o projeto.Criando a Conexão com o Banco de Dados Crie uma nova classe chamada DatabaseConnector em seu projeto para lidar com a conexão ao banco de dados. Dentro da classe, declare os seguintes atributos:import java.sql.Connection;import java.sql.DriverManager;import java.sql.SQLException;public class DatabaseConnector { private static final String URL = \"jdbc:mysql://localhost:3306/nome_do_banco_de_dados\"; private static final String USER = \"usuario\"; private static final String PASSWORD = \"senha\"; private Connection connection; // Restante do código...}Certifique-se de substituir nome_do_banco_de_dados, usuarioesenha pelas suas informações correspondentes. Crie um método chamado connect() para estabelecer a conexão com o banco de dados:public void connect() { try { connection = DriverManager.getConnection(URL, USER, PASSWORD); System.out.println(\"Conexão estabelecida com o banco de dados!\"); } catch (SQLException e) { System.out.println(\"Falha ao conectar ao banco de dados: \" + e.getMessage()); }} Crie um método chamado disconnect() para encerrar a conexão com o banco de dados:public void disconnect() { try { if (connection != null &amp;&amp; !connection.isClosed()) { connection.close(); System.out.println(\"Conexão fechada com o banco de dados.\"); } } catch (SQLException e) { System.out.println(\"Falha ao fechar a conexão com o banco de dados: \" + e.getMessage()); }}A classe DatabaseConnector agora possui os métodos connect() e disconnect() para estabelecer e encerrar a conexão com o banco de dados.Operações CRUDAgora, vamos implementar as operações CRUD (Create, Read, Update, Delete) utilizando a conexão ao banco de dados. Crie uma classe chamada ProductDAO que será responsável por manipular os dados da tabela Product no banco de dados. Dentro da classe, declare os seguintes atributos:import java.sql.Connection;import java.sql.PreparedStatement;import java.sql.ResultSet;import java.sql.SQLException;import java.util.ArrayList;import java.util.List;public class ProductDAO { private Connection connection; // Restante do código...} Adicione um construtor à classe ProductDAO que recebe um objeto Connection como parâmetro:public ProductDAO(Connection connection) { this.connection = connection;} Implemente os métodos CRUD na classe ProductDAO:public void create(Product product) { String query = \"INSERT INTO Product (name, price) VALUES (?, ?)\"; try (PreparedStatement statement = connection.prepareStatement(query)) { statement.setString(1, product.getName()); statement.setDouble(2, product.getPrice()); statement.executeUpdate(); System.out.println(\"Produto criado com sucesso.\"); } catch (SQLException e) { System.out.println(\"Falha ao criar o produto: \" + e.getMessage()); }}public List&lt;Product&gt; readAll() { List&lt;Product&gt; products = new ArrayList&lt;&gt;(); String query = \"SELECT * FROM Product\"; try (PreparedStatement statement = connection.prepareStatement(query)) { ResultSet resultSet = statement.executeQuery(); while (resultSet.next()) { int id = resultSet.getInt(\"id\"); String name = resultSet.getString(\"name\"); double price = resultSet.getDouble(\"price\"); Product product = new Product(id, name, price); products.add(product); } } catch (SQLException e) { System.out.println(\"Falha ao ler os produtos: \" + e.getMessage()); } return products;}public void update(Product product) { String query = \"UPDATE Product SET name = ?, price = ? WHERE id = ?\"; try (PreparedStatement statement = connection.prepareStatement(query)) { statement.setString(1, product.getName()); statement.setDouble(2, product.getPrice()); statement.setInt(3, product.getId()); statement.executeUpdate(); System.out.println(\"Produto atualizado com sucesso.\"); } catch (SQLException e) { System.out.println(\"Falha ao atualizar o produto: \" + e.getMessage()); }}public void delete(int id) { String query = \"DELETE FROM Product WHERE id = ?\"; try (PreparedStatement statement = connection.prepareStatement(query)) { statement.setInt(1, id); statement.executeUpdate(); System.out.println(\"Produto excluído com sucesso.\"); } catch (SQLException e) { System.out.println(\"Falha ao excluir o produto: \" + e.getMessage()); }}Os métodos create(), readAll(), update() e delete() são responsáveis por criar, ler, atualizar e excluir produtos no banco de dados, respectivamente.Testando o Aplicativo CRUDAgora que implementamos as classes DatabaseConnector e ProductDAO, podemos testar o aplicativo CRUD. Crie uma classe Main e adicione o método main() para iniciar o aplicativo:public class Main { public static void main(String[] args) { // Criar uma instância do DatabaseConnector DatabaseConnector connector = new DatabaseConnector(); // Estabelecer a conexão com o banco de dados connector.connect(); // Criar uma instância do ProductDAO com a conexão estabelecida ProductDAO productDAO = new ProductDAO(connector.getConnection()); // Criar um novo produto Product product = new Product(\"Nome do Produto\", 9.99); productDAO.create(product); // Ler todos os produtos do banco de dados List&lt;Product&gt; products = productDAO.readAll(); for (Product p : products) { System.out.println(p); } // Atualizar um produto existente product.setPrice(19.99); productDAO.update(product); // Excluir um produto productDAO.delete(product.getId()); // Encerrar a conexão com o banco de dados connector.disconnect(); }}Certifique-se de substituir \"Nome do Produto\" e 9.99 pelos valores correspondentes. Execute a classe Main e verifique a saída no console. Você deve ver a criação, leitura, atualização e exclusão do produto sendo exibidos.Parabéns! Você desenvolveu um aplicativo CRUD em Java que se conecta ao SGBD MySQL usando o conector JDBC e configurou o Maven para gerenciar as dependências do projeto.Este artigo abordou uma implementação básica de um CRUD, mas você pode expandir e aprimorar o aplicativo de acordo com suas necessidades, adicionando mais funcionalidades e validações.ReferênciasSuper revisão de OO e SQL com Java e JDBC - DevSuperior Nelio AlvesConhecendo melhor o Maven - AluraDesenvolvendo aplicações Java com o VS Code - AluraGitHub - repositórios de aplicativos Java" }, { "title": "Desenvolvendo um CRUD com Java", "url": "/aulas/posts/crud-com-java/", "categories": "DESENVOLVIMENTO, PROGRAMADOR", "tags": "Senac, programador, projetos, banco de dados", "date": "2023-06-01 17:00:00 -0300", "snippet": "Conectar-se a um banco de dados com Java é bastante simples. O Java possui um único conjunto de interfaces muito bem definidas que devem ser implementadas. Esse conjunto de interfaces fica dentro d...", "content": "Conectar-se a um banco de dados com Java é bastante simples. O Java possui um único conjunto de interfaces muito bem definidas que devem ser implementadas. Esse conjunto de interfaces fica dentro do pacote java.sql e nos referiremos a ela como JDBC (Java Database Connectivity). Sem um JDBC não é possível fazer uma conexão a um banco de dados.A classe DriverManager é a responsável por se comunicar com todos os drivers que você deixou disponível. Para isso, invocamos o método estático getConnection com uma String que indica a qual banco desejamos nos conectar. Essa String é chamada de String de conexão JDBC, a que utilizaremos para acessar o nosso banco de dados tem a seguinte forma:jdbc:mysql://localhost/sua_base_de_dadosAgora precisamos adicionar a biblioteca do nosso sistema o conector MySQL que possibilitar a conexão com o Java, sem ele nada feito, o download do conector está disponível no site oficial do MySQL: http://dev.mysql.com/downloads/.No site, clique em Connectors e depois em Connector/J. Faça o download e descompacte o arquivo. Serão descompactados vários arquivos, porém o arquivo que nos interessa é o que tem extensão JAR.Agora no projeto do Netbeans click com o botão direito na pasta Bibliotecas e escolha Adicionar JAR/Pasta… procure entre os arquivos descompactados um que tenha extensão.JAR e o adicione. Por exemplo utilizamos a versão do conector mysql-connector-java-5.1.20-bin.jar.Conexão ao banco de dados com JavaPara conectar ao banco de dados MySQL usando Java, você precisa seguir alguns passos: Certifique-se de que você possui o driver JDBC para o MySQL em seu classpath. Você pode baixar o driver MySQL Connector/J no site oficial do MySQL. Importe as classes necessárias no seu código Java:import java.sql.Connection;import java.sql.DriverManager;import java.sql.SQLException; Defina as informações necessárias para a conexão, como URL do banco de dados, nome de usuário e senha:String url = \"jdbc:mysql://localhost:3306/nome_do_banco_de_dados\";String usuario = \"seu_usuario\";String senha = \"sua_senha\";Certifique-se de substituir “nome_do_banco_de_dados”, “seu_usuario” e “sua_senha” pelas informações reais do seu ambiente. Estabeleça a conexão com o banco de dados usando o DriverManager:try { Connection connection = DriverManager.getConnection(url, usuario, senha); // Código para realizar operações no banco de dados // ... connection.close(); // Fechar a conexão quando não for mais necessária} catch (SQLException e) { System.err.println(\"Erro ao conectar ao banco de dados: \" + e.getMessage());}No exemplo acima, o método getConnection do DriverManager é usado para estabelecer a conexão com o banco de dados MySQL, passando a URL, o nome de usuário e a senha como parâmetros. Se a conexão for estabelecida com sucesso, você pode realizar as operações desejadas no banco de dados dentro do bloco try. Após concluir as operações, é importante fechar a conexão usando o método close().Certifique-se de substituir os valores da URL, nome de usuário e senha pelos valores correspondentes do seu ambiente de banco de dados. Além disso, verifique se o servidor MySQL está em execução e acessível na porta especificada na URL.Exemplo de conexão ao Banco de dados usando javaComo conectar ao banco de dados MySQL usando Java e executar uma consulta:import java.sql.Connection;import java.sql.DriverManager;import java.sql.ResultSet;import java.sql.SQLException;import java.sql.Statement;public class ConexaoMySQL { private static final String URL = \"jdbc:mysql://localhost:3306/nome_do_banco_de_dados\"; private static final String USUARIO = \"seu_usuario\"; private static final String SENHA = \"sua_senha\"; public static void main(String[] args) { try (Connection connection = DriverManager.getConnection(URL, USUARIO, SENHA)) { System.out.println(\"Conexão com o banco de dados estabelecida.\"); // Executar uma consulta String consulta = \"SELECT * FROM Clientes\"; try (Statement statement = connection.createStatement(); ResultSet resultSet = statement.executeQuery(consulta)) { // Processar o resultado da consulta while (resultSet.next()) { int id = resultSet.getInt(\"id\"); String nome = resultSet.getString(\"nome\"); int idade = resultSet.getInt(\"idade\"); String email = resultSet.getString(\"email\"); System.out.println(\"ID: \" + id); System.out.println(\"Nome: \" + nome); System.out.println(\"Idade: \" + idade); System.out.println(\"Email: \" + email); System.out.println(); } } } catch (SQLException e) { System.err.println(\"Erro ao conectar ao banco de dados: \" + e.getMessage()); } }}Nesse exemplo, após estabelecer a conexão com o banco de dados MySQL, executamos uma consulta para selecionar todos os registros da tabela “Clientes”. Em seguida, percorremos o resultado usando o objeto ResultSet e exibimos as informações de cada registro no console.Lembre-se de substituir “nome_do_banco_de_dados”, “seu_usuario” e “sua_senha” pelas informações reais do seu ambiente. Certifique-se também de ter o driver JDBC do MySQL configurado corretamente no seu classpath.Esse exemplo demonstra como realizar uma consulta simples no banco de dados MySQL usando Java. Você pode modificar a consulta de acordo com as suas necessidades e adicionar mais operações de manipulação de dados, como inserção, atualização e exclusão de registros, utilizando objetos como PreparedStatement para consultas parametrizadas.Exemplo de manipulação de registros com JavaAqui está um exemplo de programa em Java que permite inserir, atualizar e excluir registros em uma tabela de banco de dados usando os comandos INSERT, UPDATE e DELETE. Certifique-se de ajustar as informações do banco de dados (URL, nome de usuário, senha) e o nome da tabela de acordo com o seu ambiente.import java.sql.*;import java.util.Scanner;public class ManipulacaoDados { private static final String URL = \"jdbc:mysql://localhost:3306/nome_do_banco_de_dados\"; private static final String USUARIO = \"seu_usuario\"; private static final String SENHA = \"sua_senha\"; public static void main(String[] args) { try (Connection connection = DriverManager.getConnection(URL, USUARIO, SENHA)) { System.out.println(\"Conexão com o banco de dados estabelecida.\"); Scanner scanner = new Scanner(System.in); System.out.print(\"Digite o ID do cliente: \"); int id = scanner.nextInt(); scanner.nextLine(); // Consumir a quebra de linha System.out.print(\"Digite o nome do cliente: \"); String nome = scanner.nextLine(); System.out.print(\"Digite a idade do cliente: \"); int idade = scanner.nextInt(); scanner.nextLine(); // Consumir a quebra de linha System.out.print(\"Digite o email do cliente: \"); String email = scanner.nextLine(); // Inserir um novo registro inserirRegistro(connection, id, nome, idade, email); System.out.print(\"Digite o novo email: \"); String novoEmail = scanner.nextLine(); // Atualizar o email de um registro existente atualizarRegistro(connection, id, novoEmail); // Excluir um registro excluirRegistro(connection, id); scanner.close(); } catch (SQLException e) { System.err.println(\"Erro ao manipular dados: \" + e.getMessage()); } } private static void inserirRegistro(Connection connection, int id, String nome, int idade, String email) throws SQLException { String query = \"INSERT INTO Clientes (id, nome, idade, email) VALUES (?, ?, ?, ?)\"; try (PreparedStatement statement = connection.prepareStatement(query)) { statement.setInt(1, id); statement.setString(2, nome); statement.setInt(3, idade); statement.setString(4, email); int rowsInserted = statement.executeUpdate(); System.out.println(rowsInserted + \" registro(s) inserido(s) com sucesso.\"); } } private static void atualizarRegistro(Connection connection, int id, String novoEmail) throws SQLException { String query = \"UPDATE Clientes SET email = ? WHERE id = ?\"; try (PreparedStatement statement = connection.prepareStatement(query)) { statement.setString(1, novoEmail); statement.setInt(2, id); int rowsUpdated = statement.executeUpdate(); System.out.println(rowsUpdated + \" registro(s) atualizado(s) com sucesso.\"); } } private static void excluirRegistro(Connection connection, int id) throws SQLException { String query = \"DELETE FROM Clientes WHERE id = ?\"; try (PreparedStatement statement = connection.prepareStatement(query)) { statement.setInt(1, id); int rowsDeleted = statement.executeUpdate(); System.out.println(rowsDeleted + \" registro(s) excluído(s) com sucesso.\"); } } private static void select(Connection connection, int id) throws SQLException { String query = \"SELECT * FROM Clientes WHERE id = ?\"; try (PreparedStatement statement = connection.prepareStatement(query)) { statement.setInt(1, id); try (ResultSet resultSet = statement.executeQuery()) { if (resultSet.next()) { int clientId = resultSet.getInt(\"id\"); String nome = resultSet.getString(\"nome\"); int idade = resultSet.getInt(\"idade\"); String email = resultSet.getString(\"email\"); System.out.println(\"ID: \" + clientId); System.out.println(\"Nome: \" + nome); System.out.println(\"Idade: \" + idade); System.out.println(\"Email: \" + email); } else { System.out.println(\"Nenhum registro encontrado com o ID: \" + id); } } } }}Certifique-se de substituir “nome_do_banco_de_dados”, “seu_usuario” e “sua_senha” pelas informações reais do seu banco de dados. Além disso, verifique se a tabela “Clientes” existe e possui os campos correspondentes (id, nome, idade, email).Nesse exemplo, utilizamos a classe Scanner para receber os novos dados do registro pela entrada do teclado. Os valores do ID, nome, idade e email são lidos usando os métodos apropriados do Scanner. Em seguida, esses valores são passados para os métodos inserirRegistro, atualizarRegistro e excluirRegistro para realizar as operações no banco de dados.Esse programa estabelece uma conexão com o banco de dados, insere um novo registro, atualiza um registro existente e exclui um registro com base no ID. Os resultados das operações são impressos no console.Lembre-se de que é necessário ter o driver JDBC correto para o banco de dados que você está usando (por exemplo, o driver MySQL) no classpath do projeto.ExemploAqui está um exemplo de programa em Java que permite inserir, atualizar e excluir registros em uma tabela de banco de dados usando os comandos INSERT, UPDATE, SELECT e DELETE. Certifique-se de ajustar todas as funções e as informações do banco de dados (URL, nome de usuário, senha) e o nome da tabela de acordo com o seu ambiente.import java.sql.*;import java.util.Scanner;public class ManipulacaoDados { private static final String URL = \"jdbc:mysql://localhost:3306/nome_do_banco_de_dados\"; private static final String USUARIO = \"seu_usuario\"; private static final String SENHA = \"sua_senha\"; public static void main(String[] args) { try (Connection connection = DriverManager.getConnection(URL, USUARIO, SENHA)) { System.out.println(\"Conexão com o banco de dados estabelecida.\"); Scanner scanner = new Scanner(System.in); System.out.print(\"Digite o ID do cliente: \"); int id = scanner.nextInt(); scanner.nextLine(); // Consumir a quebra de linha System.out.print(\"Digite o nome do cliente: \"); String nome = scanner.nextLine(); System.out.print(\"Digite a idade do cliente: \"); int idade = scanner.nextInt(); scanner.nextLine(); // Consumir a quebra de linha System.out.print(\"Digite o email do cliente: \"); String email = scanner.nextLine(); // Inserir um novo registro inserirRegistro(connection, id, nome, idade, email); System.out.print(\"Digite o novo email: \"); String novoEmail = scanner.nextLine(); // Atualizar o email de um registro existente atualizarRegistro(connection, id, novoEmail); // Excluir um registro excluirRegistro(connection, id); scanner.close(); } catch (SQLException e) { System.err.println(\"Erro ao manipular dados: \" + e.getMessage()); } } private static void inserirRegistro(Connection connection, int id, String nome, int idade, String email) throws SQLException { String query = \"INSERT INTO Clientes (id, nome, idade, email) VALUES (?, ?, ?, ?)\"; try (PreparedStatement statement = connection.prepareStatement(query)) { statement.setInt(1, id); statement.setString(2, nome); statement.setInt(3, idade); statement.setString(4, email); int rowsInserted = statement.executeUpdate(); System.out.println(rowsInserted + \" registro(s) inserido(s) com sucesso.\"); } } private static void atualizarRegistro(Connection connection, int id, String novoEmail) throws SQLException { String query = \"UPDATE Clientes SET email = ? WHERE id = ?\"; try (PreparedStatement statement = connection.prepareStatement(query)) { statement.setString(1, novoEmail); statement.setInt(2, id); int rowsUpdated = statement.executeUpdate(); System.out.println(rowsUpdated + \" registro(s) atualizado(s) com sucesso.\"); } } private static void excluirRegistro(Connection connection, int id) throws SQLException { String query = \"DELETE FROM Clientes WHERE id = ?\"; try (PreparedStatement statement = connection.prepareStatement(query)) { statement.setInt(1, id); int rowsDeleted = statement.executeUpdate(); System.out.println(rowsDeleted + \" registro(s) excluído(s) com sucesso.\"); } } private static void select(Connection connection, int id) throws SQLException { String query = \"SELECT * FROM Clientes WHERE id = ?\"; try (PreparedStatement statement = connection.prepareStatement(query)) { statement.setInt(1, id); try (ResultSet resultSet = statement.executeQuery()) { if (resultSet.next()) { int clientId = resultSet.getInt(\"id\"); String nome = resultSet.getString(\"nome\"); int idade = resultSet.getInt(\"idade\"); String email = resultSet.getString(\"email\"); System.out.println(\"ID: \" + clientId); System.out.println(\"Nome: \" + nome); System.out.println(\"Idade: \" + idade); System.out.println(\"Email: \" + email); } else { System.out.println(\"Nenhum registro encontrado com o ID: \" + id); } } } }}Certifique-se de substituir “nome_do_banco_de_dados”, “seu_usuario” e “sua_senha” pelas informações reais do seu banco de dados. Além disso, verifique se a tabela “Clientes” existe e possui os campos correspondentes (id, nome, idade, email).Nesse exemplo, utilizamos a classe Scanner para receber os novos dados do registro pela entrada do teclado. Os valores do ID, nome, idade e email são lidos usando os métodos apropriados do Scanner. Em seguida, esses valores são passados para os métodos inserirRegistro, atualizarRegistro e excluirRegistro para realizar as operações no banco de dados.Esse programa estabelece uma conexão com o banco de dados, insere um novo registro, atualiza um registro existente e exclui um registro com base no ID. Os resultados das operações são impressos no console.Lembre-se de que é necessário ter o driver JDBC correto para o banco de dados que você está usando (por exemplo, o driver MySQL) no classpath do projeto.Exemplo de manipulação com menuAqui está o código atualizado com uma função de menu que permite ao usuário escolher entre as opções de inserir, atualizar, selecionar ou deletar:import java.sql.*;import java.util.Scanner;public class ManipulacaoDados { private static final String URL = \"jdbc:mysql://localhost:3306/nome_do_banco_de_dados\"; private static final String USUARIO = \"seu_usuario\"; private static final String SENHA = \"sua_senha\"; public static void main(String[] args) { try (Connection connection = DriverManager.getConnection(URL, USUARIO, SENHA)) { System.out.println(\"Conexão com o banco de dados estabelecida.\"); exibirMenu(connection); } catch (SQLException e) { System.err.println(\"Erro ao manipular dados: \" + e.getMessage()); } } private static void exibirMenu(Connection connection) { Scanner scanner = new Scanner(System.in); int opcao = 0; while (opcao != 5) { System.out.println(\"---- MENU ----\"); System.out.println(\"1. Inserir registro\"); System.out.println(\"2. Atualizar registro\"); System.out.println(\"3. Selecionar registro\"); System.out.println(\"4. Deletar registro\"); System.out.println(\"5. Sair\"); System.out.print(\"Digite a opção desejada: \"); opcao = scanner.nextInt(); switch (opcao) { case 1: inserirRegistro(connection, scanner); break; case 2: atualizarRegistro(connection, scanner); break; case 3: selecionarRegistro(connection, scanner); break; case 4: deletarRegistro(connection, scanner); break; case 5: System.out.println(\"Encerrando o programa...\"); break; default: System.out.println(\"Opção inválida. Tente novamente.\"); break; } } scanner.close(); } private static void inserirRegistro(Connection connection, Scanner scanner) { // Código para inserir um novo registro } private static void atualizarRegistro(Connection connection, Scanner scanner) { // Código para atualizar um registro existente } private static void selecionarRegistro(Connection connection, Scanner scanner) { // Código para selecionar um registro } private static void deletarRegistro(Connection connection, Scanner scanner) { // Código para deletar um registro }}Neste código, foi adicionada a função exibirMenu que apresenta um menu de opções ao usuário. O menu é exibido em um loop até que o usuário escolha a opção “Sair” (opção 5). Dependendo da opção selecionada pelo usuário, as respectivas funções inserirRegistro, atualizarRegistro, selecionarRegistro ou deletarRegistro serão chamadas.Você precisará implementar o código dentro de cada uma dessas funções para realizar as operações desejadas no banco de dados. Certifique-se de fornecer as informações corretas do banco de dados na constante URL, e substitua “nome_do_banco_de_dados”, “seu_usuario” e “sua_senha” pelas informações apropriadas.Lembre-se de importar as classes necessárias e implementar o código específico para cada operação dentro das funções correspondentes.Exemplo de função para listar itensprivate static void listarClientes(Connection connection) { String query = \"SELECT * FROM Clientes\"; try (Statement statement = connection.createStatement(); ResultSet resultSet = statement.executeQuery(query)) { List&lt;String&gt; clientes = new ArrayList&lt;&gt;(); while (resultSet.next()) { int clientId = resultSet.getInt(\"id\"); String nome = resultSet.getString(\"nome\"); int idade = resultSet.getInt(\"idade\"); String email = resultSet.getString(\"email\"); clientes.add(\"ID: \" + clientId + \", Nome: \" + nome + \", Idade: \" + idade + \", Email: \" + email); } if (!clientes.isEmpty()) { System.out.println(\"Lista de Clientes:\"); for (String cliente : clientes) { System.out.println(cliente); } } else { System.out.println(\"Nenhum cliente encontrado.\"); } } catch (SQLException e) { System.err.println(\"Erro ao listar clientes: \" + e.getMessage()); } }Exemplo de consulta simples ao MySQL com javapublic class App { private static final String URL = \"jdbc:mysql://localhost:3306/aulajpa\"; private static final String USUARIO = \"mysql\"; private static final String SENHA = \"mysql\"; public static void main(String[] args) { try (Connection connection = DriverManager.getConnection(URL, USUARIO, SENHA)) { System.out.println(\"Conexão com o banco de dados estabelecida.\"); // Executar uma consulta String consulta = \"SELECT * FROM Pessoa\"; try (Statement statement = connection.createStatement(); ResultSet resultSet = statement.executeQuery(consulta)) { // Processar o resultado da consulta while (resultSet.next()) { int id = resultSet.getInt(\"id\"); String nome = resultSet.getString(\"nome\"); //int idade = resultSet.getInt(\"idade\"); String email = resultSet.getString(\"email\"); System.out.println(\"ID: \" + id); System.out.println(\"Nome: \" + nome); //System.out.println(\"Idade: \" + idade); System.out.println(\"Email: \" + email); System.out.println(); } } } catch (SQLException e) { System.err.println(\"Erro ao conectar ao banco de dados: \" + e.getMessage()); } }}Referências Vídeos descrição Super revisão de OO e SQL com Java e JDBC - DevSuperior Nelio Alves Crud Completo com NetBeans e MySQL Parte 1 Crud Completo com NetBeans e MySQL Parte 2 Crud Completo com NetBeans e MySQL - Parte 3 Java #8 - Como criar um Cadastro de funcionários (CRUD) - Parte 1 ] #Java+MySQL CRUD - JAVA WEB (jsp) com MYSQL (AULA 1) " }, { "title": "Manipulação de banco de dados", "url": "/aulas/posts/manipulacao-de-banco-de-dados/", "categories": "DESENVOLVIMENTO, PROGRAMADOR", "tags": "Senac, programador, projetos, banco de dados", "date": "2023-05-31 17:00:00 -0300", "snippet": "Um banco de dados é uma peça fundamental no armazenamento e gerenciamento eficiente de grandes volumes de dados. Ele oferece uma estrutura organizada que permite o armazenamento, recuperação, atual...", "content": "Um banco de dados é uma peça fundamental no armazenamento e gerenciamento eficiente de grandes volumes de dados. Ele oferece uma estrutura organizada que permite o armazenamento, recuperação, atualização e exclusão de informações de maneira segura e eficiente. No contexto dos bancos de dados relacionais, há três componentes principais que desempenham papéis específicos na manipulação dos dados: a Linguagem de Definição de Dados (DDL), a Linguagem de Manipulação de Dados (DML) e a Linguagem de Consulta de Dados (DQL). Neste artigo, vamos explorar cada um desses componentes, destacando suas funções e fornecendo exemplos de como utilizá-los em SQL.Linguagem de Definição de Dados (DDL)A Linguagem de Definição de Dados (DDL) é responsável por definir a estrutura e a organização dos dados em um banco de dados. Ela permite a criação, modificação e exclusão de objetos, como tabelas, índices, visões e restrições. A DDL é usada para criar e manter o esquema do banco de dados. Aqui estão alguns exemplos de comandos DDL em SQL: CREATE TABLE: O comando CREATE TABLE é usado para criar uma nova tabela no banco de dados. Por exemplo:CREATE TABLE Clientes ( id INT PRIMARY KEY, nome VARCHAR(100), idade INT, email VARCHAR(100)); ALTER TABLE: O comando ALTER TABLE é usado para modificar a estrutura de uma tabela existente. Por exemplo, para adicionar uma nova coluna à tabela Clientes:ALTER TABLE ClientesADD COLUMN endereco VARCHAR(200); DROP TABLE: O comando DROP TABLE é usado para excluir uma tabela existente do banco de dados. Por exemplo:DROP TABLE Clientes;Linguagem de Manipulação de Dados (DML)A Linguagem de Manipulação de Dados (DML) é usada para inserir, atualizar e excluir registros dentro das tabelas do banco de dados. A DML permite a manipulação dos dados contidos nas tabelas. Aqui estão alguns exemplos de comandos DML em SQL: INSERT: O comando INSERT é usado para inserir um novo registro em uma tabela. Por exemplo:INSERT INTO Clientes (id, nome, idade, email)VALUES (1, 'João', 30, 'joao@example.com'); UPDATE: O comando UPDATE é usado para atualizar os valores de um ou mais registros em uma tabela. Por exemplo, para atualizar o email do cliente com id igual a 1:UPDATE ClientesSET email = 'novoemail@example.com'WHERE id = 1; DELETE: O comando DELETE é usado para excluir um ou mais registros de uma tabela. Por exemplo, para excluir o cliente com id igual a 1:DELETE FROM ClientesWHERE id = 1;Linguagem de Consulta de Dados (DQL)A Linguagem de Consulta de Dados (DQL) é usada para recuperar informações específicas dos dados armazenados nas tabelas do banco de dados. A DQL permite fazer consultas complexas e filtrar os resultados de acordo com critérios específicos. Aqui estão alguns exemplos de comandos DQL em SQL: SELECT: O comando SELECT é usado para recuperar dados de uma ou mais tabelas. Por exemplo, para recuperar todos os clientes da tabela Clientes:SELECT * FROM Clientes; SELECT com filtro: O comando SELECT também pode ser usado para filtrar os resultados com base em condições específicas. Por exemplo, para recuperar apenas os clientes com idade acima de 25 anos:SELECT * FROM ClientesWHERE idade &gt; 25; JOIN: A cláusula JOIN permite combinar dados de duas ou mais tabelas com base em uma coluna comum. Por exemplo, para recuperar os pedidos feitos por um cliente específico, juntamente com os detalhes do cliente:SELECT Pedidos.*, Clientes.nomeFROM PedidosJOIN Clientes ON Pedidos.cliente_id = Clientes.idWHERE Clientes.id = 1;Em resumo, o uso de DDL, DML e DQL permite que os bancos de dados relacionais sejam criados, atualizados, consultados e gerenciados de maneira eficiente. A DDL é usada para definir a estrutura do banco de dados, a DML é usada para manipular os dados e a DQL é usada para consultar e recuperar informações específicas. Essas linguagens de banco de dados, como exemplificado nos comandos SQL mencionados acima, desempenham papéis cruciais no trabalho com bancos de dados relacionais e são essenciais para o desenvolvimento de sistemas robustos e eficientes.Seleção específica de registrosVamos continuar com mais exemplos de consultas utilizando a cláusula WHERE em comandos DQL. Aqui estão alguns casos adicionais: Selecionar registros com base em uma condição de igualdade:SELECT * FROM ClientesWHERE idade = 30;Este comando irá recuperar todos os clientes que possuem 30 anos de idade. Selecionar registros com base em uma condição de desigualdade:SELECT * FROM ProdutosWHERE preco &lt;&gt; 100.00;Este comando irá recuperar todos os produtos cujo preço não seja igual a 100.00. Selecionar registros com base em uma condição de intervalo:SELECT * FROM PedidosWHERE data BETWEEN '2023-01-01' AND '2023-03-31';Este comando irá recuperar todos os pedidos realizados entre 1 de janeiro de 2023 e 31 de março de 2023. Selecionar registros com base em uma condição de correspondência parcial:SELECT * FROM ClientesWHERE nome LIKE 'Jo%';Este comando irá recuperar todos os clientes cujo nome comece com “Jo”, seguido de qualquer combinação de caracteres. Selecionar registros com base em múltiplas condições usando operadores lógicos:SELECT * FROM ProdutosWHERE categoria = 'Eletrônicos' AND preco &gt; 500.00;Este comando irá recuperar todos os produtos da categoria “Eletrônicos” com preço superior a 500.00. Selecionar registros com base em uma lista de valores possíveis:SELECT * FROM ClientesWHERE cidade IN ('São Paulo', 'Rio de Janeiro', 'Belo Horizonte');Este comando irá recuperar todos os clientes que residem em São Paulo, Rio de Janeiro ou Belo Horizonte.Esses exemplos demonstram apenas algumas possibilidades de uso da cláusula WHERE para filtrar os resultados das consultas. É importante ressaltar que a cláusula WHERE pode ser combinada com outros operadores, como OR, NOT, EXISTS, entre outros, para criar consultas mais complexas e abrangentes. Através do uso adequado da cláusula WHERE em consultas DQL, é possível recuperar apenas os dados relevantes para uma determinada análise ou necessidade de informação, tornando a busca e manipulação dos dados mais eficientes e precisas.ReferênciasLivro restrito da biblioteca Senac - Introdução a bancos de dados - Paloma Cristina PereiraLivro restrito da biblioteca Senac - Banco de dadosApostila Seduc - Banco de Dados pdfIntrodução SQL - Aula 01 - Minicurso de SQLWorkbench - Criando diagrama ER, exportando para SQL, implemantando e manipulandoLinguagem de Consulta Estruturada - SQL" }, { "title": "Normalização de banco de dados", "url": "/aulas/posts/normalizacao-de-banco-de-dados/", "categories": "DESENVOLVIMENTO, PROGRAMADOR", "tags": "Senac, programador, projetos, banco de dados", "date": "2023-05-30 17:00:00 -0300", "snippet": "O projeto de um banco de dados é uma tarefa complexa e requer atenção aos detalhes para evitar problemas como redundância de dados e inconsistência. A inclusão, alteração ou exclusão de registros p...", "content": "O projeto de um banco de dados é uma tarefa complexa e requer atenção aos detalhes para evitar problemas como redundância de dados e inconsistência. A inclusão, alteração ou exclusão de registros pode resultar em anomalias que prejudicam o funcionamento do banco de dados. A normalização de dados é uma técnica utilizada para corrigir essas anomalias e garantir um armazenamento consistente e eficiente dos dados em bancos de dados relacionais.Anomalias de banco de dadosAnomalia de InclusãoA anomalia de inclusão ocorre quando é necessário digitar novamente informações repetidas, como nome, endereço e cidade, em cada novo registro. Isso pode resultar em inconsistência caso algum campo seja digitado incorretamente. Além disso, o aumento da redundância de dados ocupa mais espaço em disco, impactando negativamente o desempenho e a eficiência do banco de dados.Anomalia de AtualizaçãoJá a anomalia de atualização ocorre quando a modificação de uma informação resulta em inconsistência nos dados. Por exemplo, se o nome “João Silva” aparece diversas vezes em registros diferentes e é necessário alterá-lo para “João da Silva”, é preciso fazer essa alteração em todos os registros para evitar inconsistência. A falta de uma atualização global pode levar a informações desatualizadas e divergentes em diferentes partes do banco de dados.Anomalia de ExclusãoA anomalia de exclusão ocorre quando a exclusão de um registro resulta na perda de informações importantes para o banco de dados. Por exemplo, se for necessário excluir os registros de pedido 8 e 10, todas as informações do cliente “João Silva” serão perdidas automaticamente. Isso pode levar a uma perda irreparável de dados e comprometer a integridade e consistência do banco de dados.Normalização de DadosPara evitar essas anomalias, é importante utilizar a normalização de dados. A normalização é um processo composto por uma série de passos que permitem um armazenamento consistente e eficiente dos dados em bancos de dados relacionais. Esses passos reduzem a redundância de dados e as chances dos dados se tornarem inconsistentes.A normalização geralmente é aplicada quando uma base de dados foi criada antes da existência de um banco de dados relacional ou foi desenvolvida sem considerar a existência de um banco de dados relacional. Ela também pode ser aplicada ao final do processo de modelagem de um banco para conferir se o modelo de dados está normalizado e, caso não esteja, pode-se normalizá-lo antes da implementação da base de dados do SGBD.O processo de normalização é constituído por um conjunto de formas normais que especificam critérios para definir quando uma tabela está bem estruturada ou não. As formas normais mais comumente utilizadas são: Primeira Forma Normal (1NF): Nessa forma normal, os valores em uma tabela devem ser atômicos, ou seja, cada valor deve ser indivisível. Também não deve haver duplicação de registros. Segunda Forma Normal (2NF): Nessa forma normal, a tabela deve atender aos critérios da 1NF e, além disso, todos os atributos não chave devem depender completamente da chave primária. Terceira Forma Normal (3NF): Nessa forma normal, a tabela deve atender aos critérios da 2NF e, além disso, não deve haver dependência transitiva entre os atributos não chave. Existem outras formas normais, como a Quarta Forma Normal (4NF) e a Quinta Forma Normal (5NF), que visam eliminar ainda mais a redundância de dados e garantir a integridade e eficiência do banco de dados.Exemplo Prático 1fnConsidere uma tabela de cadastro de clientes em um banco de dados relacional. Inicialmente, pode-se ter uma tabela não normalizada, como mostrado a seguir:Vamos aplicar a primeira forma normal na tabela fornecida: ID Nome Endereço Telefone 1 João Silva Rua A, 123, Sobral, CE São Paulo 2 Maria Santos Rua B, 456, Rio de Janeiro, RJ 999 8822265, 999 8895165 3 Pedro Almeida Rua C, 789, São Paulo, SP 999 8813661, 999 88258665 Critérios da primeira forma normal: Criar na nova tabela um atributo para conter o atributo composto databela original, neste caso criar um atributo telefone, na nova tabelatbTelefone; Criar na nova tabela um atributo para conter a chave primária da tabelaoriginal, podemos criar um atributo numero_agencia na tabelatbTelefone; Definir uma chave estrangeira para garantir a relação entre a novatabela e a tabela original; Definir a chave primária da nova tabela; Remover o atributo não atômico da tabela original.Seguindo os critérios mencionados, vamos criar uma nova tabela chamada “tbTelefone” para conter os dados do atributo composto “Telefone”. A tabela “tbTelefone” terá os seguintes atributos: “Numero”, “ID_Pessoa” (chave estrangeira para relacionamento com a tabela “Pessoa”).A tabela “Pessoa” será modificada para remover o atributo não atômico “Telefone”.Tabela “Pessoa”: ID Nome Endereço 1 João Silva Rua A, 123, Sobral, CE 2 Maria Santos Rua B, 456, Rio de Janeiro, RJ 3 Pedro Almeida Rua C, 789, São Paulo, SP Tabela “tbTelefone”: Numero ID_Pessoa 999 8877665 1 999 88123665 1 999 8822265 2 999 8895165 2 999 8813661 3 999 88258665 3 Agora, a tabela “Pessoa” contém apenas as informações básicas, enquanto os números de telefone estão armazenados na tabela “tbTelefone”. A chave estrangeira “ID_Pessoa” na tabela “tbTelefone” estabelece a relação entre as duas tabelas. Ao aplicar a primeira forma normal, garantimos que os valores sejam atômicos e eliminamos o atributo não atômico da tabela original. Isso resulta em uma melhor estruturação dos dados, evitando a repetição de informações e permitindo uma manipulação mais eficiente das tabelas.Exemplo 2fnPara adequar uma tabela que não está na 2FN é necessário fazer os seguintes passos: Criar duas novas tabelas para armazenar os dados dos campos redundantes, onde seus valores apresentam repetição de valores, neste caso uma tabela pessoa e outra tabela endereço, contendo os campos rua, número, cidade e estado Remover os campos com valores redundantes da tabela original Criar chaves primárias nas novas tabelas criadas com base na chave primária da tabela original, Criar relações um-para-muitos entre as novas tabelas criadas e a tabela original. Neste caso criar outra id com a chave estrangeira na tabela endereço, que é a chave primária da tabela pessoaVamos continuar aplicando a segunda forma normal à tabela fornecida, seguindo os critérios mencionados:Tabela “Pessoa”: ID Nome 1 João Silva 2 Maria Santos 3 Pedro Almeida Tabela “Endereço”: ID_Endereco Rua Número Cidade Estado 1 Rua A 123 Sobral CE 2 Rua B 456 Rio de Janeiro RJ 3 Rua C 789 São Paulo SP Tabela “tbTelefone”: Numero ID_Pessoa 999 8877665 1 999 88123665 1 999 8822265 2 999 8895165 2 999 8813661 3 999 88258665 3 Neste ponto, criamos duas novas tabelas: “Pessoa” e “Endereço”. Os campos redundantes, como “Rua”, “Número”, “Cidade” e “Estado”, foram removidos da tabela original. As tabelas “Pessoa” e “Endereço” possuem chaves primárias baseadas na chave primária da tabela original.Além disso, adicionamos uma nova coluna “ID_Endereco” na tabela “Pessoa” como chave estrangeira para estabelecer a relação um-para-muitos entre a tabela “Pessoa” e a tabela “Endereço”.Dessa forma, separamos as informações de pessoa, endereço e telefone em tabelas distintas, evitando a redundância de dados.A tabela “Pessoa” agora contém apenas informações específicas sobre as pessoas, enquanto a tabela “Endereço” armazena os detalhes do endereço de cada pessoa. A tabela “tbTelefone” mantém os números de telefone relacionados a cada pessoa. Ao aplicar a segunda forma normal, garantimos que todos os atributos não chave dependam completamente da chave primária. Isso resulta em uma estrutura mais eficiente e evita a repetição de dados.Exemplo 3fnUma tabela está na Terceira Forma Normal (3FN) se e somente se ela estiver na 1FN e na 2FN e todos os atributos não chave primária puderem ser obtidos somente através da chave primária.A tabela abaixo está na 1FN porque todos os seus atributos são atômicos, e está na segunda forma normal porque não possui chave composta. No entanto temos o atributo nome_gerente que depende do atributo código_gerente que não é chave e nem faz parte da chave primária. Cod_departamento Nome_departamento Cod_gerente Nome_gerente 1 Vendas 101 Marcos 2 Recursos Humanos 102 Maria 3 Estoque 103 João 4 Financeiro 104 Matheus Para aplicar a terceira forma normal à tabela fornecida, devemos remover a dependência transitiva do atributo “Nome_gerente” em relação ao atributo “Cod_gerente”. Para isso, precisamos criar uma nova tabela para armazenar as informações dos gerentes separadamente.Vamos criar uma nova tabela chamada “Gerente” para armazenar as informações dos gerentes. A tabela “Gerente” terá os seguintes atributos: “Cod_gerente” (chave primária) e “Nome_gerente”.Tabela “Departamento”: Cod_departamento Nome_departamento Cod_gerente 1 Vendas 101 2 Recursos Humanos 102 3 Estoque 103 4 Financeiro 104 Tabela “Gerente”: Cod_gerente Nome_gerente 101 Marcos 102 Maria 103 João 104 Matheus A tabela “Departamento” agora não possui mais o atributo “Nome_gerente” e mantém apenas a informação do código do gerente. O atributo “Nome_gerente” foi movido para a nova tabela “Gerente”, onde ele depende completamente da chave primária “Cod_gerente”.Ao aplicar a terceira forma normal, garantimos que todos os atributos não chave dependam unicamente da chave primária da tabela em que estão. Isso reduz a redundância de dados e facilita a manutenção e consulta das informações.Agora, temos uma tabela “Departamento” que contém informações sobre os departamentos e um relacionamento com a tabela “Gerente” por meio do código do gerente. A tabela “Gerente” armazena os detalhes dos gerentes de cada departamento. Com a terceira forma normal aplicada, evitamos dependências transitivas e alcançamos uma estrutura de banco de dados mais consistente e eficiente.ConclusãoA normalização de dados é fundamental para garantir a consistência e eficiência do armazenamento de dados em bancos de dados relacionais. Ao seguir as formas normais, é possível evitar anomalias que podem prejudicar o funcionamento do banco de dados e garantir um acesso eficiente aos dados. A aplicação correta da normalização em um projeto de banco de dados é essencial para criar uma estrutura bem estruturada, livre de redundâncias e inconsistências, resultando em um sistema de banco de dados robusto e confiável.ReferênciasLivro restrito da biblioteca Senac - Introdução a bancos de dados - Paloma Cristina PereiraLivro restrito da biblioteca Senac - Banco de dadosApostila Seduc - Banco de Dados pdf" }, { "title": "Exercícios de Ferramenta de produtividade PDCA", "url": "/aulas/posts/exercicios-ferramentas-de-produtividade-pdca/", "categories": "AULAS, PLANEJAMENTO DE CARREIRA", "tags": "planejamento, carreira, profissão, projetos, gestão, tarefas", "date": "2023-05-30 10:00:00 -0300", "snippet": "Atividade com 10 questões de múltipla escolha sobre a técnica PDCA:Ferramenta de Gestão PDCA - Ciclo de Melhoria Contínua para Excelência OperacionalInstruções: Leia atentamente o texto fornecido s...", "content": "Atividade com 10 questões de múltipla escolha sobre a técnica PDCA:Ferramenta de Gestão PDCA - Ciclo de Melhoria Contínua para Excelência OperacionalInstruções: Leia atentamente o texto fornecido sobre a ferramenta de gestão PDCA e responda às seguintes questões de múltipla escolha.1. Qual o significado da sigla PDCA?a) Planejar, Desenvolver, Controlar, Avaliarb) Plan, Do, Check, Actc) Processo, Documentação, Controle, Análised) Produtividade, Desempenho, Controle, Ação2. Qual a primeira etapa do ciclo PDCA?a) Executarb) Verificarc) Planejard) Agir3. O que é feito durante a etapa \"Check\" (Verificar) do PDCA?a) Implementação do plano de açãob) Coleta e análise de dados para avaliar o desempenhoc) Definição de objetivos e metasd) Realocação de recursos4. O que é feito durante a etapa \"Do\" (Executar) do PDCA?a) Verificar se as ações realizadas estão alcançando os resultados desejadosb) Identificar problemas ou oportunidades de melhoriac) Implementar o plano de ação conforme projetadod) Realizar treinamentos com a equipe5. Qual é a importância do envolvimento de todas as partes interessadas relevantes durante a etapa de planejamento do PDCA?a) Garantir um processo abrangente e colaborativob) Reduzir o tempo médio de esperac) Implementar um sistema de fila virtuald) Coletar feedback dos clientes6. O que é feito durante a etapa \"Act\" (Agir) do PDCA?a) Corrigir problemas identificados e implementar melhorias necessáriasb) Implementar o plano de ação conforme projetadoc) Verificar se as ações realizadas estão alcançando os resultados desejadosd) Realocar recursos adequados7. Qual o objetivo do ciclo PDCA?a) Aumentar a eficiência operacionalb) Implementar um sistema de fila virtualc) Coletar feedback dos clientesd) Contratar mais agentes de atendimento8. O que é necessário para verificar se as ações realizadas estão alcançando os resultados desejados?a) Coleta e análise de dadosb) Implementação do plano de açãoc) Contratação de mais agentes de atendimentod) Realização de treinamentos com a equipe9. O que é feito durante a etapa \"Plan\" (Planejar) do PDCA?a) Identificar problemas ou oportunidades de melhoriab) Contratar mais agentes de atendimentoc) Monitorar o tempo médio de espera diariamented) Realizar treinamentos com a equipe10. Uma empresa detectou um problema de demora no atendimento dos clientes para um sistema de crediário, Como essa empresa aplicaria o ciclo PDCA completo no processo de atendimento ao cliente?a) Identificou problemas, definiu metas, implementou ações corretivas e monitorou os resultadosb) Contratou mais agentes de atendimento, implementou um sistema de fila virtual e ofereceu treinamento adicional aos funcionáriosc) Coletou feedback dos clientes através de pesquisas de satisfaçãod) Implementar um padrão no atendimentoRespostas1. Qual o significado da sigla PDCA?Resposta: b) Plan, Do, Check, Act2. Qual a primeira etapa do ciclo PDCA?Resposta: c) Planejar3. O que é feito durante a etapa \"Check\" (Verificar) do PDCA?Resposta: b) Coleta e análise de dados para avaliar o desempenho4. O que é feito durante a etapa \"Do\" (Executar) do PDCA?Resposta: c) Implementar o plano de ação conforme projetado5. Qual é a importância do envolvimento de todas as partes interessadas relevantes durante a etapa de planejamento do PDCA?Resposta: a) Garantir um processo abrangente e colaborativo6. O que é feito durante a etapa \"Act\" (Agir) do PDCA?Resposta: a) Corrigir problemas identificados e implementar melhorias necessárias7. Qual o objetivo do ciclo PDCA?Resposta: a) Aumentar a eficiência operacional8. O que é necessário para verificar se as ações realizadas estão alcançando os resultados desejados?Resposta: a) Coleta e análise de dados9. O que é feito durante a etapa \"Plan\" (Planejar) do PDCA?Resposta: a) Identificar problemas ou oportunidades de melhoria10. Como a empresa de varejo do exemplo prático aplicou o ciclo PDCA no processo de atendimento ao cliente?Resposta: a) Identificou problemas, definiu metas, implementou ações corretivas e monitorou os resultados" }, { "title": "Scrum com Jira e Asana", "url": "/aulas/posts/scrum-com-jira-e-asana/", "categories": "DESENVOLVIMENTO, PROGRAMADOR", "tags": "Senac, programador, projetos, scrum", "date": "2023-05-29 17:00:00 -0300", "snippet": "Metodologias de gerenciamento de tarefas e equipes.Metodologia RUPO RUP (Rational Unified Process) é um processo de desenvolvimento de software amplamente utilizado que fornece uma abordagem discip...", "content": "Metodologias de gerenciamento de tarefas e equipes.Metodologia RUPO RUP (Rational Unified Process) é um processo de desenvolvimento de software amplamente utilizado que fornece uma abordagem disciplinada e iterativa para o desenvolvimento de sistemas. Ele foi desenvolvido pela Rational Software Corporation, agora parte da IBM.O RUP baseia-se em princípios semelhantes aos da metodologia ágil, mas também incorpora práticas de desenvolvimento tradicionais. Ele fornece um conjunto de diretrizes e melhores práticas para planejar, executar, monitorar e controlar o desenvolvimento de um projeto de software. Aqui está uma visão geral de como o RUP funciona: Fases: O RUP é dividido em fases, que representam etapas lógicas do ciclo de vida do desenvolvimento de software. As fases típicas do RUP incluem a concepção, elaboração, construção e transição. Cada fase tem seus objetivos específicos e atividades associadas. Iterações: Dentro de cada fase, são realizadas iterações, também conhecidas como ciclos. As iterações são períodos de tempo fixos, geralmente de 2 a 6 semanas, durante os quais uma parte do sistema é desenvolvida, testada e entregue. Cada iteração resulta em um incremento funcional do sistema. Disciplinas: O RUP define nove disciplinas que representam as principais áreas de conhecimento necessárias para desenvolver um sistema. Essas disciplinas incluem gerenciamento de projetos, modelagem de negócios, análise e design, implementação, testes, entre outras. Cada disciplina tem suas atividades e artefatos associados. Artefatos: O RUP enfatiza a criação de artefatos, que são documentos, modelos e outros produtos do processo de desenvolvimento. Esses artefatos ajudam a capturar, comunicar e documentar as informações do projeto. Exemplos de artefatos do RUP incluem casos de uso, diagramas de classe, especificações de requisitos e planos de teste. Papéis: O RUP define vários papéis para as pessoas envolvidas no projeto. Alguns exemplos de papéis comuns são o Gerente de Projeto, Analista de Negócios, Arquiteto de Software, Desenvolvedor e Testador. Cada papel tem responsabilidades e tarefas específicas dentro do processo. Gates de decisão: O RUP utiliza marcos ou gates para avaliar o progresso do projeto e tomar decisões importantes. Esses gates são pontos de verificação que ocorrem entre as fases ou iterações. Eles envolvem revisões e avaliações para garantir que o projeto esteja seguindo na direção certa e cumprindo seus objetivos.O RUP é altamente personalizável e adaptável às necessidades específicas de um projeto ou organização. Ele fornece uma estrutura robusta e disciplinada para o desenvolvimento de software, ajudando a garantir a qualidade, a previsibilidade e o controle do processo. No entanto, é importante ressaltar que o RUP é considerado uma abordagem mais pesada e mais orientada a processos em comparação com as metodologias ágeis mais recentes.Metodologia ScrumMetodologia Ágil Scrum: Acelerando o Desenvolvimento de ProjetosA metodologia ágil Scrum tem se tornado cada vez mais popular no mundo do desenvolvimento de software. Sua abordagem flexível e adaptativa permite que as equipes entreguem produtos de alta qualidade de forma mais rápida e eficiente. Neste artigo, vamos explorar os princípios e práticas fundamentais do Scrum e como ele pode acelerar o desenvolvimento de projetos.O que é Scrum?Scrum é uma metodologia ágil que se baseia em ciclos iterativos e incrementais, conhecidos como Sprints, para gerenciar o desenvolvimento de um projeto. A palavra “Scrum” é inspirada no rugby, onde os jogadores se juntam em uma formação compacta para avançar em direção a um objetivo comum. Da mesma forma, as equipes Scrum trabalham de forma colaborativa para alcançar os objetivos do projeto.Princípios do ScrumO Scrum é fundamentado em alguns princípios essenciais que guiam sua abordagem ágil: Transparência: Todas as informações relevantes sobre o projeto são compartilhadas com a equipe e as partes interessadas. Isso inclui o progresso, os obstáculos e as metas do projeto. Inspeção: A equipe Scrum realiza inspeções frequentes dos produtos em desenvolvimento para identificar problemas, ajustar o curso e garantir a qualidade do trabalho. Adaptação: Com base nas inspeções, a equipe Scrum se adapta rapidamente às mudanças, ajustando suas prioridades e planos para otimizar os resultados.Papéis do ScrumO Scrum define três papéis principais que são responsáveis por diferentes aspectos do projeto: Product Owner: É o representante dos interesses dos clientes e usuários. Ele define as necessidades do produto, prioriza as funcionalidades e é responsável por manter a lista de tarefas (Product Backlog) atualizada. Scrum Master: É o facilitador do processo Scrum. O Scrum Master ajuda a equipe a compreender e implementar os princípios do Scrum, remove obstáculos e garante que o processo seja seguido corretamente. Equipe de Desenvolvimento: São os membros responsáveis pela implementação das funcionalidades do produto. Eles são multifuncionais, auto-organizados e colaborativos, trabalhando juntos para entregar o trabalho planejado em cada Sprint.Práticas do ScrumO Scrum utiliza algumas práticas-chave para garantir a eficiência e a qualidade do desenvolvimento: Sprints: São os ciclos de trabalho fixos do Scrum, geralmente com duração de duas a quatro semanas. Durante um Sprint, a equipe se concentra em um conjunto de tarefas prioritárias e trabalha para entregá-las até o final do Sprint. Reuniões diárias (Daily Scrum): São encontros breves, realizados diariamente, em que a equipe compartilha o progresso, discute os obstáculos e planeja o trabalho para o dia. Sprint Planning: É uma reunião realizada no início de cada Sprint, onde a equipe define as tarefas a serem realizadas e estimam o esforço necessário para concluí-las. Review do Sprint: É uma reunião realizada ao final de cada Sprint, onde a equipe demonstra o trabalho concluído e recebe feedback dos stakeholders. Essa sessão permite ajustes e melhorias contínuas no projeto.Benefícios do ScrumA metodologia ágil Scrum traz diversos benefícios para o desenvolvimento de projetos: Entrega antecipada de valor: Com os ciclos de trabalho curtos e focados, o Scrum permite que os produtos sejam entregues em incrementos menores e mais frequentes, garantindo que o valor seja entregue aos clientes de forma antecipada. Flexibilidade e adaptabilidade: O Scrum é projetado para se adaptar rapidamente a mudanças de requisitos ou prioridades. As equipes podem ajustar o plano a cada Sprint, garantindo que o produto final atenda às necessidades dos clientes. Transparência e colaboração: O Scrum promove a transparência e a colaboração entre os membros da equipe e os stakeholders. Todos têm visibilidade do progresso e podem colaborar ativamente para atingir os objetivos do projeto. Foco na qualidade: Com as inspeções frequentes e a adaptação contínua, o Scrum incentiva a equipe a manter um alto nível de qualidade em todos os aspectos do desenvolvimento.A metodologia ágil Scrum é uma abordagem poderosa para acelerar o desenvolvimento de projetos. Com sua estrutura flexível, foco na colaboração e adaptabilidade, o Scrum permite que as equipes entreguem produtos de alta qualidade de forma mais rápida e eficiente. Ao adotar os princípios e práticas do Scrum, as organizações podem melhorar a produtividade, a satisfação dos clientes e a capacidade de inovação em seus projetos.Tabela comparativa entre o RUP e o SCRUM Aspectos RUP Scrum Abordagem Método de desenvolvimento de software tradicional, orientado a processos e com ênfase na documentação. Metodologia ágil, iterativa e adaptativa, com foco na entrega de valor de forma rápida e flexível. Ciclos Fases definidas, com iterações dentro de cada fase. Sprints curtos e fixos, geralmente de 1 a 4 semanas. Papéis Vários papéis definidos, como Gerente de Projeto, Analista, Arquiteto, Desenvolvedor, entre outros. Três papéis principais: Product Owner, Scrum Master e Equipe de Desenvolvimento. Ênfase Ênfase na documentação detalhada, modelos e artefatos. Ênfase na comunicação, colaboração e entrega de software funcional. Flexibilidade Menos flexível para mudanças de requisitos, pois as fases são planejadas antecipadamente. Altamente flexível para mudanças, com iterações curtas e revisões constantes dos requisitos. Planejamento Planejamento detalhado no início do projeto, com fases e marcos definidos. Planejamento adaptativo, com revisões e ajustes a cada Sprint. Controle Ênfase no controle e na previsibilidade do processo de desenvolvimento. Ênfase no autocontrole da equipe e na inspeção e adaptação contínuas. Comunicação Comunicação formalizada por meio de documentação e reuniões formais. Comunicação frequente e informal, com reuniões diárias (Daily Scrum) e interações constantes entre os membros da equipe. Resultados Ênfase na documentação detalhada e produtos intermediários. Ênfase na entrega de software funcional e valor de negócio a cada Sprint. Adoção Mais comum em projetos de grande escala e complexos, onde a previsibilidade e o controle são fundamentais. Mais comum em projetos menores, onde a adaptabilidade, a colaboração e a entrega rápida de valor são prioridades. É importante destacar que essa tabela comparativa é uma visão geral e simplificada do RUP e do Scrum. Ambas as metodologias têm suas vantagens e desvantagens e podem ser adequadas para diferentes tipos de projetos, equipes e contextos. A escolha entre RUP e Scrum depende das necessidades específicas do projeto e da cultura da organização.Como usar o Jira com o ScrumO Jira é uma ferramenta de gerenciamento de projetos amplamente utilizada que oferece recursos poderosos para implementar a metodologia ágil Scrum. Aqui estão os passos básicos para usar o Jira com o Scrum: Configuração inicial: Crie um projeto no Jira e defina a estrutura adequada para o Scrum. Você pode criar um quadro Scrum para visualizar as tarefas, histórias de usuários e sprints, bem como configurar campos personalizados para atender às necessidades específicas do seu projeto. Backlog do produto: Crie um backlog do produto no Jira, que é uma lista de histórias de usuários e itens a serem desenvolvidos. Priorize as histórias de acordo com o valor de negócio e a importância. Sprints: Planeje seus sprints no Jira. Crie sprints com base no tempo que sua equipe precisa para concluir as tarefas. Você pode usar quadros Kanban ou Scrum para visualizar as tarefas em andamento. Histórias de usuários: Divida as histórias de usuários em tarefas menores e mais gerenciáveis. No Jira, você pode criar tarefas para representar as atividades específicas que precisam ser concluídas. Atribuição de tarefas: Atribua as tarefas aos membros da equipe. No Jira, você pode atribuir tarefas a usuários específicos para indicar quem está responsável por cada atividade. Acompanhamento do progresso: Acompanhe o progresso das tarefas durante o sprint. No Jira, você pode mover as tarefas entre as colunas do quadro para indicar o estado atual de cada atividade (por exemplo, a fazer, em andamento, concluída). Reuniões diárias (Daily Scrum): Realize as reuniões diárias para sincronizar a equipe. No Jira, você pode usar os campos de comentários e atualizações de status para compartilhar atualizações e discutir obstáculos. Review do Sprint: Ao final de cada sprint, realize uma revisão para demonstrar o trabalho concluído. No Jira, você pode revisar as histórias de usuários concluídas e obter feedback dos stakeholders. Retrospectiva do Sprint: Realize uma retrospectiva do sprint para identificar melhorias. No Jira, você pode usar os recursos de feedback e comentários para registrar as lições aprendidas e as ações de melhoria. Iteração: Repita os passos 3 a 9 para cada sprint subsequente. O Jira permite que você acompanhe e gerencie vários sprints simultaneamente.Além disso, o Jira oferece uma variedade de recursos adicionais, como gráficos de burndown, relatórios de velocidade e personalizações avançadas, que podem ser úteis para monitorar o progresso, gerenciar o backlog do produto e melhorar a eficiência da equipe.Lembrando que o uso específico do Jira com o Scrum pode variar de acordo com as necessidades da equipe e do projeto. Recomenda-se explorar os recursos e adaptá-los conforme apropriado para a sua situação.Utilizando o Asana na Metodologia ÁgilO Asana é uma ferramenta de gerenciamento de projetos que pode ser adaptada para atender às necessidades da metodologia ágil. Ele fornece recursos que facilitam a colaboração, o rastreamento de tarefas e a comunicação eficiente dentro da equipe.A seguir, veremos como o Asana pode ser utilizado em cada uma das etapas principais da metodologia ágil.Planejamento e Definição de BacklogNo início do projeto, a equipe e o cliente colaboram na definição do backlog, ou seja, a lista de funcionalidades e tarefas a serem implementadas. O Asana permite criar projetos e tarefas, atribuir responsáveis e definir prazos.Na criação do backlog, o Asana permite que a equipe priorize as tarefas e defina as dependências entre elas. É possível utilizar listas, quadros kanban ou calendários para visualizar e organizar o trabalho.Sprint Planning e AcompanhamentoDurante o sprint planning, a equipe seleciona um conjunto de tarefas do backlog para serem implementadas no próximo sprint. O Asana pode ser utilizado para criar um projeto específico para cada sprint, onde as tarefas selecionadas são movidas para uma lista de “to-do” e são atribuídas aos membros da equipe.Durante o desenvolvimento, o Asana permite que a equipe acompanhe o progresso das tarefas. É possível atualizar o status das tarefas, adicionar comentários e anexar arquivos relevantes. A visualização do quadro kanban facilita a identificação de tarefas em andamento, concluídas e atrasadas.Reuniões e ColaboraçãoO Asana também suporta a realização de reuniões e a colaboração entre os membros da equipe. É possível agendar e documentar reuniões, compartilhar atas e atribuir ações de acompanhamento diretamente nas tarefas.Além disso, o Asana oferece recursos de comunicação integrados, como comentários e notificações, permitindo que a equipe se comunique de forma eficiente e mantenha todos os membros atualizados sobre o andamento do projeto.Entrega e Feedback ContínuosA entrega contínua de software funcional é um princípio fundamental da metodologia ágil. O Asana pode ser utilizado para registrar e acompanhar o feedback do cliente, permitindo que a equipe registre bugs, solicitações de novas funcionalidades ou melhorias diretamente como tarefas. Essas tarefas podem ser priorizadas e incluídas no backlog para futuras iterações do projeto.ConclusãoA metodologia ágil de desenvolvimento de software é uma abordagem flexível e iterativa que valoriza a entrega contínua de valor ao cliente. O Asana, com seus recursos de gerenciamento de projetos e colaboração, pode ser uma ferramenta poderosa para facilitar a implementação dessa metodologia.Ao utilizar o Asana para o planejamento, acompanhamento e colaboração durante as diferentes etapas do desenvolvimento ágil, as equipes podem se beneficiar de uma maior transparência, produtividade e adaptação a mudanças, resultando em um processo de desenvolvimento de software mais eficiente e eficaz.ReferênciasRational Unified Process (RUP)Scrum - o que é, como funciona e por que é incrívelCurso JIRA SOFTWARE BÁSICO 🐶 [Jira Issue &amp; Project Tracking Software Atlassian](https://www.atlassian.com/software/jira) Your work - JiraAsana.com - Gerencie projetos e tarefas" }, { "title": "Atividade de configuração de roteadores", "url": "/aulas/posts/exercicios-de-configuracao-de-roteadores/", "categories": "AULAS, INFRAESTRUTURA DE REDES", "tags": "infraestrutura, segurança, exercícios", "date": "2023-05-29 10:40:00 -0300", "snippet": "Neste artigo, vamos explorar o processo de configuração de um roteador Wi-Fi para uma rede local. Abordaremos os passos necessários para configurar o servidor DHCP, o canal, a senha do Wi-Fi e a se...", "content": "Neste artigo, vamos explorar o processo de configuração de um roteador Wi-Fi para uma rede local. Abordaremos os passos necessários para configurar o servidor DHCP, o canal, a senha do Wi-Fi e a senha do administrador. Como exemplo, utilizaremos um roteador da TP-Link.Configuração InicialAntes de iniciar a configuração do roteador, certifique-se de que todos os cabos estejam corretamente conectados e que o roteador esteja ligado. Para acessar as configurações, siga as etapas abaixo: Conecte o seu dispositivo (computador ou smartphone) à rede Wi-Fi do roteador. O nome da rede e a senha padrão geralmente estão impressos na parte inferior do roteador. Abra um navegador da web e digite o endereço IP padrão do roteador. Para roteadores TP-Link, o endereço IP padrão comum é 192.168.0.1 ou 192.168.1.1. Pressione Enter. Você será redirecionado para a página de login do roteador. Insira o nome de usuário e a senha padrão do administrador. Essas informações também costumam estar impressas na parte inferior do roteador. Se nunca foram alteradas, o nome de usuário e a senha padrão podem ser “admin” para ambos.Configurando o Servidor DHCPO servidor DHCP atribui automaticamente endereços IP aos dispositivos conectados à rede. Para configurá-lo, siga estas etapas: Após fazer login no painel de administração do roteador, encontre a seção “DHCP” ou “Configuração do DHCP”. Certifique-se de que o DHCP esteja ativado. Você pode definir o intervalo de endereços IP disponíveis para o DHCP. Defina o “Endereço IP inicial” e o “Endereço IP final” de acordo com suas necessidades. Você também pode definir o tempo de concessão do endereço IP. Esse é o período em que o endereço IP atribuído permanecerá válido. Salve as configurações do DHCP.Configurando o Canal Wi-FiO canal Wi-Fi determina a frequência utilizada pelo roteador para transmitir o sinal. Ao configurar o canal, é possível evitar interferências e melhorar o desempenho da rede. Siga estas etapas: No painel de administração do roteador, procure a seção “Configurações Wi-Fi” ou “Configurações de rede sem fio”. Selecione a opção “Configurações Avançadas” ou “Configurações Avançadas de Wi-Fi”. Procure a opção “Canal” e escolha um canal menos congestionado. Recomenda-se utilizar os canais 1, 6 ou 11, dependendo das condições do ambiente. Salve as configurações do canal Wi-Fi.Configurando a Senha do Wi-FiDefinir uma senha forte para sua rede Wi-Fi é essencial para garantir a segurança dos dados e evitar acessos não autorizados. Siga estas etapas para configurar a senha do Wi-Fi: No painel de administração do roteador, vá para a seção “Configurações Wi-Fi” ou “Configurações de rede sem fio”. Procure a opção “Segurança” ou “Criptografia”. Selecione o tipo de segurança desejado. Recomenda-se utilizar a opção “WPA2-PSK”, pois é mais segura. Insira a senha desejada no campo correspondente. Certifique-se de utilizar uma senha forte, contendo letras maiúsculas e minúsculas, números e símbolos. Salve as configurações da senha do Wi-Fi.Configurando a Senha do AdministradorAlém da senha do Wi-Fi, é importante alterar a senha do administrador do roteador para proteger o acesso às configurações do dispositivo. Siga estas etapas: No painel de administração do roteador, procure a seção “Configurações do Sistema” ou “Configurações de Administração”. Localize a opção para alterar a senha do administrador. Insira a senha atual do administrador (geralmente “admin” por padrão) e em seguida, insira a nova senha desejada. Salve as configurações da senha do administrador.ConclusãoA configuração de um roteador Wi-Fi para uma rede local envolve passos essenciais, como configurar o servidor DHCP, o canal, a senha do Wi-Fi e a senha do administrador. Com a correta configuração, você pode garantir uma rede estável, segura e com um bom desempenho para todos os dispositivos conectados.Lembrando que as etapas descritas neste artigo são baseadas em um exemplo de roteador TP-Link. Os roteadores de outros fabricantes podem ter configurações e interfaces diferentes, mas os conceitos gerais são semelhantes.Atividade10 questões de múltipla escolha relacionadas ao texto anterior sobre a configuração de um roteador Wi-Fi para uma rede local:1. Qual é o objetivo principal ao configurar o servidor DHCP em um roteador Wi-Fi?a) Gerenciar o fluxo de trabalho e aumentar a produtividade.b) Limitar a quantidade de trabalho em andamento.c) Atribuir automaticamente endereços IP aos dispositivos conectados.d) Configurar a segurança da rede sem fio.2. Qual é a finalidade de configurar o canal Wi-Fi em um roteador?a) Determinar a quantidade de dispositivos que podem ser conectados à rede.b) Melhorar a velocidade de conexão da rede sem fio.c) Evitar interferências e melhorar o desempenho da rede.d) Configurar a senha de acesso ao roteador.3. Qual é a importância de definir uma senha forte para a rede Wi-Fi?a) Evitar acessos não autorizados e proteger a segurança dos dados.b) Aumentar a velocidade de conexão da rede sem fio.c) Limitar a quantidade de dispositivos que podem ser conectados à rede.d) Configurar a segurança do servidor DHCP.4. Qual é a finalidade de configurar a senha do administrador em um roteador?a) Proteger o acesso às configurações do roteador.b) Limitar a quantidade de dispositivos que podem ser conectados à rede.c) Atribuir automaticamente endereços IP aos dispositivos conectados.d) Melhorar a velocidade de conexão da rede sem fio.5. Qual é o endereço IP padrão comum para acessar as configurações de um roteador TP-Link?a) 192.168.0.1 ou 192.168.1.1b) 10.0.0.1 ou 10.0.0.138c) 192.168.10.1 ou 192.168.254.254d) 172.16.0.1 ou 172.31.255.2546. O que é recomendado escolher ao configurar o canal Wi-Fi em um roteador para evitar interferências?a) O canal com o número mais alto.b) O canal com o número mais baixo.c) O canal 6, independentemente das condições do ambiente.d) O canal 1, 6 ou 11, dependendo das condições do ambiente.7. Qual é o tipo de segurança recomendado para a rede Wi-Fi em um roteador?a) WEPb) WPAc) WPA2-PSKd) WPA38. O que é importante verificar antes de iniciar a configuração de um roteador?a) Conectar todos os dispositivos à rede Wi-Fi.b) Verificar os requisitos de hardware do roteador.c) Certificar-se de que os cabos estão corretamente conectados e o roteador está ligado.d) Fazer backup de todos os dispositivos conectados à rede.9. O que o servidor DHCP faz em um roteador Wi-Fi?a) Define o canal de transmissão do sinal Wi-Fi.b) Gerencia o fluxo de trabalho e aumenta a produtividade.c) Atribui automaticamente endereços IP aos dispositivos conectados.d) Define a segurança da rede sem fio.10. Por que é importante alterar a senha do administrador em um roteador?a) Para aumentar a velocidade de conexão da rede sem fio.b) Para limitar a quantidade de dispositivos que podem ser conectados à rede.c) Para evitar acessos não autorizados e proteger o acesso às configurações do roteador.d) Para configurar a segurança do servidor DHCP.Respostas: c) Atribuir automaticamente endereços IP aos dispositivos conectados. c) Evitar interferências e melhorar o desempenho da rede. a) Evitar acessos não autorizados e proteger a segurança dos dados. a) Proteger o acesso às configurações do roteador. a) 192.168.0.1 ou 192.168.1.1 d) O canal 1, 6 ou 11, dependendo das condições do ambiente. c) WPA2-PSK c) Certificar-se de que os cabos estão corretamente conectados e o roteador está ligado. c) Atribui automaticamente endereços IP aos dispositivos conectados. c) Para evitar acessos não autorizados e proteger o acesso às configurações do roteador.Atividade 21. Qual é a finalidade do servidor DHCP em um roteador Wi-Fi?a) Fornecer acesso à Internet aos dispositivos conectados.b) Gerenciar o fluxo de trabalho do roteador.c) Atribuir endereços IP automaticamente aos dispositivos conectados.d) Controlar o canal de transmissão do Wi-Fi.2. Qual é a faixa de endereços IP geralmente configurada pelo servidor DHCP?a) 192.168.0.1 a 192.168.0.255b) 10.0.0.1 a 10.0.0.255c) 172.16.0.1 a 172.31.255.254d) 192.168.1.1 a 192.168.1.2543. Qual é o objetivo de escolher um canal menos congestionado para o roteador Wi-Fi?a) Reduzir a velocidade da conexão de Internet.b) Evitar interferências e melhorar o desempenho da rede.c) Aumentar a segurança da rede sem fio.d) Bloquear o acesso de dispositivos desconhecidos à rede.4. Qual é o tipo de segurança recomendado para a senha do Wi-Fi?a) WEPb) WPAc) WPA2d) WPS5. Qual é a importância de alterar a senha do administrador do roteador Wi-Fi?a) Melhorar a velocidade de conexão da rede.b) Evitar a interferência de dispositivos vizinhos.c) Proteger o acesso às configurações do roteador.d) Impedir o acesso de dispositivos desconhecidos à rede.6. Qual é o endereço IP padrão comum para acessar as configurações de um roteador TP-Link?a) 192.168.0.1b) 10.0.0.1c) 172.16.0.1d) 192.168.1.17. Quais são as etapas iniciais para configurar um roteador Wi-Fi?a) Conectar dispositivos sem fio e abrir um navegador da web.b) Configurar o servidor DHCP e o canal do Wi-Fi.c) Definir a senha do administrador e a senha do Wi-Fi.d) Verificar a velocidade da conexão de Internet e escolher o tipo de segurança.8. O que acontece se uma senha fraca for escolhida para a rede Wi-Fi?a) A rede Wi-Fi não funcionará corretamente.b) A velocidade da conexão de Internet será reduzida.c) A rede Wi-Fi estará vulnerável a ataques e acessos não autorizados.d) Os dispositivos conectados não poderão se comunicar entre si.9. O que é necessário para acessar as configurações de um roteador Wi-Fi?a) Conectar-se à rede Wi-Fi do roteador e abrir um navegador da web.b) Conectar-se fisicamente ao roteador usando um cabo Ethernet.c) Enviar um e-mail para o fabricante do roteador solicitando as configurações.d) Reiniciar o roteador e pressionar um botão específico para entrar nas configurações.10. Qual é a vantagem de revisar e atualizar regularmente as configurações do roteador Wi-Fi?a) Melhorar a velocidade da conexão de Internet.b) Garantir a compatibilidade com dispositivos mais recentes.c) Corrigir falhas de segurança e melhorar o desempenho da rede.d) Permitir que dispositivos desconhecidos se conectem à rede.Respostas 2 c) Atribuir endereços IP automaticamente aos dispositivos conectados. c) 172.16.0.1 a 172.31.255.254 b) Evitar interferências e melhorar o desempenho da rede. c) WPA2 c) Proteger o acesso às configurações do roteador. d) 192.168.1.1 a) Conectar dispositivos sem fio e abrir um navegador da web. c) A rede Wi-Fi estará vulnerável a ataques e acessos não autorizados. a) Conectar-se à rede Wi-Fi do roteador e abrir um navegador da web. c) Corrigir falhas de segurança e melhorar o desempenho da rede." }, { "title": "Exercícios de Ferramenta de produtividade Kanban", "url": "/aulas/posts/exercicios-ferramentas-de-produtividade-kanban/", "categories": "AULAS, PLANEJAMENTO DE CARREIRA", "tags": "planejamento, carreira, profissão, projetos, gestão, tarefas", "date": "2023-05-29 10:00:00 -0300", "snippet": "Atividade com 10 questões de múltipla escolha sobre a técnica Kanban:1. Qual é o objetivo principal da técnica Kanban? a. Aumentar a eficiência na produção b. Criar um sistema visual de quadro ...", "content": "Atividade com 10 questões de múltipla escolha sobre a técnica Kanban:1. Qual é o objetivo principal da técnica Kanban? a. Aumentar a eficiência na produção b. Criar um sistema visual de quadro c. Organizar tarefas pessoais d. Gerenciar projetos de software2. O que representa cada coluna no quadro Kanban? a. Estágios do fluxo de trabalho b. Responsáveis pela tarefa c. Prioridade das tarefas d. Descrição das tarefas3. O que são os cartões no quadro Kanban? a. Tarefas a serem realizadas b. Responsáveis pelo projeto c. Etapas do fluxo de trabalho d. Prioridades das tarefas4. Qual é o primeiro passo para implementar a técnica Kanban? a. Definir o quadro Kanban b. Identificar as tarefas c. Preencher a coluna \"A fazer\" d. Mover os cartões conforme o progresso5. O que representa a coluna \"Em andamento\" no quadro Kanban? a. Tarefas concluídas b. Tarefas em progresso c. Tarefas a serem realizadas d. Tarefas aguardando aprovação6. Como os cartões são organizados na coluna \"A fazer\"? a. Por ordem alfabética b. Por responsabilidade c. Por prioridade d. Por conclusão7. Qual é o objetivo de limitar a quantidade de trabalho em andamento no Kanban? a. Evitar sobrecarga e garantir um fluxo contínuo de trabalho b. Aumentar a produtividade c. Priorizar as tarefas d. Facilitar a comunicação entre os membros da equipe8. Qual é o último passo para implementar a técnica Kanban? a. Definir o quadro Kanban b. Identificar as tarefas c. Preencher a coluna \"A fazer\" d. Acompanhar o quadro Kanban regularmente9. Qual é a finalidade de revisar e atualizar o quadro Kanban regularmente? a. Garantir que todas as tarefas estejam atualizadas b. Manter a ordem alfabética das tarefas c. Aumentar a produtividade da equipe d. Verificar a conclusão das tarefas10. Além da produção, em quais áreas a técnica Kanban pode ser aplicada? a. Desenvolvimento de software, gerenciamento de projetos e organização pessoal b. Marketing e vendas c. Recursos humanos e finanças d. Logística e distribuiçãoRespostas Qual é o objetivo principal da técnica Kanban?Resposta: a. Aumentar a eficiência na produção O que representa cada coluna no quadro Kanban?Resposta: a. Estágios do fluxo de trabalho O que são os cartões no quadro Kanban?Resposta: a. Tarefas a serem realizadas Qual é o primeiro passo para implementar a técnica Kanban?Resposta: a. Definir o quadro Kanban O que representa a coluna “Em andamento” no quadro Kanban?Resposta: b. Tarefas em progresso Como os cartões são organizados na coluna “A fazer”?Resposta: c. Por prioridade Qual é o objetivo de limitar a quantidade de trabalho em andamento no Kanban?Resposta: a. Evitar sobrecarga e garantir um fluxo contínuo de trabalho Qual é o último passo para implementar a técnica Kanban?Resposta: d. Acompanhar o quadro Kanban regularmente Qual é a finalidade de revisar e atualizar o quadro Kanban regularmente?Resposta: a. Garantir que todas as tarefas estejam atualizadas Além da produção, em quais áreas a técnica Kanban pode ser aplicada?Resposta: a. Desenvolvimento de software, gerenciamento de projetos e organização pessoal" }, { "title": "Exercícios de Robótica", "url": "/aulas/posts/exercicios-de-robotica/", "categories": "AULAS, NOÇÕES DE ROBÓTICA", "tags": "arduino, robótica, simulador, eletrônica", "date": "2023-05-29 04:00:00 -0300", "snippet": "10 questões de múltipla escolha sobre Arduino e o simulador Tinkercad:1. O que é o Arduino?a) Um software de simulação para projetos eletrônicos.b) Uma plataforma de hardware para prototipagem elet...", "content": "10 questões de múltipla escolha sobre Arduino e o simulador Tinkercad:1. O que é o Arduino?a) Um software de simulação para projetos eletrônicos.b) Uma plataforma de hardware para prototipagem eletrônica.c) Um sistema operacional para dispositivos embarcados.d) Um programa de modelagem 3D para impressão.2. Qual é a linguagem de programação usada com o Arduino?a) Javab) Pythonc) C/C++d) Ruby3. O que é o simulador Tinkercad?a) Um software de modelagem 3D.b) Um ambiente virtual para programação em Arduino.c) Um kit de componentes eletrônicos para prototipagem.d) Um serviço de armazenamento em nuvem.4. Quais tipos de componentes podem ser simulados no Tinkercad?a) Apenas componentes digitais.b) Apenas componentes analógicos.c) Tanto componentes digitais quanto analógicos.d) Apenas componentes mecânicos.5. O que é um sketch no Arduino?a) Um desenho feito no software de simulação.b) Uma simulação de um projeto eletrônico.c) Um programa escrito em linguagem Arduino.d) Uma conexão física entre componentes eletrônicos.6. Qual é a função do pino GND no Arduino?a) Fornecer energia para os componentes.b) Receber dados de entrada.c) Transmitir dados de saída.d) Conectar a placa a um display externo.7. O que é um LED no contexto do Arduino?a) Um sensor de luz.b) Um motor elétrico.c) Um componente para exibir informações.d) Um resistor variável.8. Como é feita a comunicação entre o Arduino e o Tinkercad?a) Através de uma conexão Wi-Fi.b) Através de uma conexão Bluetooth.c) Através de uma conexão USB virtual.d) Não é possível fazer a comunicação entre eles.9. O que é um sensor ultrassônico?a) Um sensor que mede a intensidade de luz.b) Um sensor que detecta movimento.c) Um sensor que mede a temperatura.d) Um sensor que mede distâncias.10. Quais são os benefícios de usar o simulador Tinkercad em projetos com Arduino?a) Economia de custos e acesso a uma ampla variedade de componentes virtuais.b) Maior velocidade de prototipagem e disponibilidade de componentes físicos.c) Melhor qualidade de simulação e compatibilidade com outros softwares.d) Nenhuma vantagem significativa em relação ao uso de componentes físicos.Respostas1. b) Uma plataforma de hardware para prototipagem eletrônica.2. c) C/C++3. b) Um ambiente virtual para programação em Arduino.4. c) Tanto componentes digitais quanto analógicos.5. c) Um programa escrito em linguagem Arduino.6. a) Fornecer energia para os componentes.7. c) Um componente para exibir informações.8. c) Através de uma conexão USB virtual.9. d) Um sensor que mede distâncias.10. a) Economia de custos e acesso a uma ampla variedade de componentes virtuais.Exercício sobre componentes eletrônicosComponentes eletrônicos, como resistor, LED, push button e display de 7 segmentos, que podem ser usados no Arduino e no simulador Tinkercad:1. O componente eletrônico utilizado para controlar o fluxo de corrente em um circuito é o:a) Resistorb) LEDc) Push buttond) Display de 7 segmentos2. O componente eletrônico que emite luz quando uma corrente elétrica passa por ele é o:a) Resistorb) LEDc) Push buttond) Display de 7 segmentos3. O componente eletrônico utilizado para interagir com o sistema, como um interruptor, é o:a) Resistorb) LEDc) Push buttond) Display de 7 segmentos4. O componente eletrônico utilizado para exibir informações numéricas de forma simplificada é o:a) Resistorb) LEDc) Push buttond) Display de 7 segmentos5. O componente eletrônico que possui duas pernas e é utilizado para limitar a corrente em um circuito é o:a) Resistorb) LEDc) Push buttond) Display de 7 segmentos6. O componente eletrônico que possui quatro pernas e é utilizado para exibir números de 0 a 9 é o:a) Resistorb) LEDc) Push buttond) Display de 7 segmentos7. O componente eletrônico que precisa de uma resistência limitadora para evitar queime é o:a) Resistorb) LEDc) Push buttond) Display de 7 segmentos8. O componente eletrônico que pode ser utilizado como um botão de pressão é o:a) Resistorb) LEDc) Push buttond) Display de 7 segmentos9. O componente eletrônico que emite luz quando uma corrente elétrica passa por ele em apenas uma direção é o:a) Resistorb) LEDc) Push buttond) Display de 7 segmentos10. O componente eletrônico utilizado para controlar o brilho de um LED é o:a) Resistorb) LEDc) Push buttond) Display de 7 segmentosRespostas sobre componentes1. a) Resistor2. b) LED3. c) Push button4. d) Display de 7 segmentos5. a) Resistor6. d) Display de 7 segmentos7. b) LED8. c) Push button9. b) LED10. a) Resistor" }, { "title": "Atributos e Relacionamentos", "url": "/aulas/posts/atributos-e-relacionamentos/", "categories": "DESENVOLVIMENTO, PROGRAMADOR", "tags": "Senac, programador, banco de dados, relacionamento", "date": "2023-05-26 17:00:00 -0300", "snippet": "Quando se trata de modelar um banco de dados relacional, é essencial compreender conceitos como chave primária, chave estrangeira, atributos e relacionamentos. Esses elementos desempenham um papel ...", "content": "Quando se trata de modelar um banco de dados relacional, é essencial compreender conceitos como chave primária, chave estrangeira, atributos e relacionamentos. Esses elementos desempenham um papel fundamental na organização e na integridade dos dados. Neste artigo, discutiremos cada um desses conceitos e identificaremos onde a chave estrangeira é aplicada nos relacionamentos entre tabelas.Chave PrimáriaA chave primária é um atributo (ou um conjunto de atributos) que identifica exclusivamente cada registro em uma tabela de um banco de dados. Ela garante a unicidade dos dados e é fundamental para manter a integridade referencial. A chave primária não pode ter valores nulos e deve ser única para cada linha da tabela.A chave primária pode ser composta por um único atributo (chave primária simples) ou por um conjunto de atributos (chave primária composta). Por exemplo, em uma tabela de “Clientes”, o atributo “ID do Cliente” pode ser definido como a chave primária. Isso significa que cada cliente terá um ID exclusivo, e essa chave primária será usada para identificar e relacionar os dados desse cliente em outras tabelas, se necessário.Chave EstrangeiraA chave estrangeira é um atributo (ou um conjunto de atributos) que estabelece uma relação entre duas tabelas em um banco de dados relacional. Ela cria um vínculo entre a tabela que contém a chave primária referenciada e a tabela que possui a chave estrangeira. A chave estrangeira representa uma referência a uma chave primária em outra tabela e é usada para manter a integridade referencial e estabelecer os relacionamentos entre os dados.Quando uma chave estrangeira é definida em uma tabela, ela indica que o valor desse atributo em cada registro deve corresponder a um valor existente na tabela referenciada. Por exemplo, suponha que tenhamos uma tabela de “Pedidos” e uma tabela de “Clientes”. A tabela de “Pedidos” pode conter uma coluna chamada “ID do Cliente” como chave estrangeira, que se refere à chave primária “ID do Cliente” na tabela de “Clientes”. Dessa forma, podemos estabelecer uma relação entre um pedido específico e o cliente associado a esse pedido.AtributosOs atributos são as características ou as propriedades que descrevem os dados em uma tabela de banco de dados. Cada tabela é composta por uma ou mais colunas, e cada coluna representa um atributo. Por exemplo, em uma tabela de “Produtos”, podemos ter atributos como “Nome do Produto”, “Preço”, “Quantidade em Estoque” e assim por diante. Os atributos são essenciais para fornecer detalhes sobre os dados armazenados em uma tabela.Os atributos podem ter diferentes tipos de dados, como números, strings, datas e assim por diante. Eles também podem ter restrições, como serem obrigatórios (não nulos) ou terem um valor padrão.Relacionamentos e Aplicação da Chave EstrangeiraOs relacionamentos entre tabelas são estabelecidos por meio das chaves primárias e estrangeiras. Existem três tipos principais de relacionamentos: um para um, um para muitos e muitos para muitos. Relacionamento um para um: Nesse tipo de relacionamento, um registro em uma tabela está relacionado a no máximo um registro em outra tabela. A chave primária da primeira tabela se torna a chave estrangeira na segunda tabela. Por exemplo, uma tabela de “Funcionários” pode ter uma chave primária “ID do Funcionário”, que se torna a chave estrangeira em uma tabela de “Informações de Contato”, onde cada funcionário pode ter apenas um conjunto de informações de contato. Relacionamento um para muitos: Nesse tipo de relacionamento, um registro em uma tabela pode estar relacionado a vários registros em outra tabela. A chave primária da primeira tabela se torna a chave estrangeira na segunda tabela. Por exemplo, uma tabela de “Departamentos” pode ter uma chave primária “ID do Departamento”, que se torna a chave estrangeira em uma tabela de “Funcionários”. Dessa forma, vários funcionários podem pertencer a um único departamento. Relacionamento muitos para muitos: Nesse tipo de relacionamento, vários registros em uma tabela podem estar relacionados a vários registros em outra tabela. Para estabelecer esse relacionamento, é necessário criar uma tabela intermediária, também conhecida como tabela de junção ou tabela associativa. Essa tabela contém as chaves primárias das duas tabelas relacionadas como chaves estrangeiras. Por exemplo, em um banco de dados de uma biblioteca, pode haver uma tabela de “Livros” e uma tabela de “Autores”. Como um livro pode ter vários autores e um autor pode ter escrito vários livros, uma tabela de junção seria necessária para relacionar essas duas tabelas.Em resumo, a chave primária e a chave estrangeira desempenham papéis fundamentais na organização e na integridade dos dados em um banco de dados relacional. A chave primária identifica exclusivamente cada registro em uma tabela, enquanto a chave estrangeira estabelece relacionamentos entre tabelas por meio da referência à chave primária em outra tabela. Esses conceitos são essenciais para garantir a consistência e a integridade dos dados em um ambiente de banco de dados.ExemploSituação atual: Uma loja de produtos diversos atualmente utiliza planilhas para a organização das vendas realizadas. Porém, algumas vezes os funcionários anotam as transações em papel, ou não preenchem todas as informações solicitadas nas planilhas. Com isso, a empresa vem sofrendo prejuízos, perda de informação e retrabalho. A empresa possui funcionários e fornecedores. A cada transação de venda, pode haver produtos de mais de um fornecedores. A cada transação de venda, pode haver produtos de mais de um fornecedor, porém a venda não pode ser compartilhada entre dois ou mais clientes.Necessidade: Para o crescimento da empresa, o diretor decidiu investir em um sistema, e para isso necessita que sejam mapeadas as necessidades operacionais, a fim de que a modelagem do banco de dados do sistema seja entregue e o banco de dados implementado. O sistema deve ser capaz de armazenar informações de produtos, clientes, vendas realizadas, funcionários e seus respectivos departamentos.Observações: Na loja, um cliente pode fazer compras, e cada compra pode conter diversos produtos. Os produtos vendidos são fornecidos por diversos fornecedores. As vendas são realizadas por um funcionário que pertence a somente um departamento. Os produtos vendidos são fornecidos por diversos fornecedores.Diagrama Entidade-RelacionamentoCom base no cenário apresentado, podemos criar um diagrama entidade-relacionamento (DER) para modelar as necessidades operacionais do sistema. O DER é uma representação visual das entidades (tabelas), seus atributos e os relacionamentos entre elas. Abaixo está o diagrama MERMAID com a modelagem proposta:erDiagram CUSTOMER ||--o{ SALE : \"Places\" SALE ||--o{ PRODUCT : \"Contains\" SALE ||--o{ EMPLOYEE : \"Performed by\" EMPLOYEE }|--|| DEPARTMENT : \"Belongs to\" SALE }|--|{ SUPPLIER : \"Supplied by\" CUSTOMER { CustomerID INT PK Name VARCHAR Address VARCHAR Phone VARCHAR } PRODUCT { ProductID INT PK Name VARCHAR Price DECIMAL } SALE { SaleID INT PK Date DATE } EMPLOYEE { EmployeeID INT PK Name VARCHAR Position VARCHAR } DEPARTMENT { DepartmentID INT PK Name VARCHAR } SUPPLIER { SupplierID INT PK Name VARCHAR Address VARCHAR Phone VARCHAR }No diagrama acima, temos as seguintes entidades: CUSTOMER (Cliente): Armazena informações dos clientes, como ID, nome, endereço e telefone. PRODUCT (Produto): Armazena informações dos produtos, como ID, nome e preço. SALE (Venda): Representa as vendas realizadas. Possui um ID único e a data da venda. EMPLOYEE (Funcionário): Armazena informações dos funcionários, como ID, nome e cargo. DEPARTMENT (Departamento): Representa os departamentos da empresa. Cada funcionário pertence a um departamento. SUPPLIER (Fornecedor): Armazena informações dos fornecedores, como ID, nome, endereço e telefone.Os relacionamentos no diagrama são definidos da seguinte forma: Um cliente (CUSTOMER) pode realizar várias vendas (SALE). Uma venda (SALE) pode conter vários produtos (PRODUCT). Uma venda (SALE) é realizada por um funcionário (EMPLOYEE). Um funcionário (EMPLOYEE) pertence a um departamento (DEPARTMENT). Uma venda (SALE) é fornecida por um ou mais fornecedores (SUPPLIER).Essa modelagem permite que a empresa registre e relacione as informações necessárias para suas operações, incluindo clientes, produtos, vendas, funcionários, departamentos e fornecedores.Com o diagrama entidade-relacionamento definido, é possível avançar para a implementação do banco de dados do sistema, levando em consideração as necessidades operacionais da loja.em consideração as necessidades operacionais da loja.Script SQLPara implementar o banco de dados com base no diagrama entidade-relacionamento apresentado, podemos utilizar a linguagem SQL para criar as tabelas correspondentes. Abaixo está um exemplo de script SQL para criação das tabelas:-- Tabela CUSTOMERCREATE TABLE CUSTOMER ( CustomerID INT PRIMARY KEY, Name VARCHAR(50), Address VARCHAR(100), Phone VARCHAR(20));-- Tabela PRODUCTCREATE TABLE PRODUCT ( ProductID INT PRIMARY KEY, Name VARCHAR(50), Price DECIMAL(10, 2));-- Tabela SALECREATE TABLE SALE ( SaleID INT PRIMARY KEY, Date DATE, CustomerID INT, EmployeeID INT, FOREIGN KEY (CustomerID) REFERENCES CUSTOMER(CustomerID), FOREIGN KEY (EmployeeID) REFERENCES EMPLOYEE(EmployeeID));-- Tabela EMPLOYEECREATE TABLE EMPLOYEE ( EmployeeID INT PRIMARY KEY, Name VARCHAR(50), Position VARCHAR(50), DepartmentID INT, FOREIGN KEY (DepartmentID) REFERENCES DEPARTMENT(DepartmentID));-- Tabela DEPARTMENTCREATE TABLE DEPARTMENT ( DepartmentID INT PRIMARY KEY, Name VARCHAR(50));-- Tabela SUPPLIERCREATE TABLE SUPPLIER ( SupplierID INT PRIMARY KEY, Name VARCHAR(50), Address VARCHAR(100), Phone VARCHAR(20));-- Tabela de junção entre SALE e PRODUCT para representar a relação de \"Contains\"CREATE TABLE SALE_PRODUCT ( SaleID INT, ProductID INT, PRIMARY KEY (SaleID, ProductID), FOREIGN KEY (SaleID) REFERENCES SALE(SaleID), FOREIGN KEY (ProductID) REFERENCES PRODUCT(ProductID));O script acima cria as tabelas CUSTOMER, PRODUCT, SALE, EMPLOYEE, DEPARTMENT, SUPPLIER e a tabela de junção SALE_PRODUCT para representar o relacionamento de “Contains” entre as tabelas SALE e PRODUCT.As chaves primárias são definidas usando a cláusula PRIMARY KEY, enquanto as chaves estrangeiras são criadas usando a cláusula FOREIGN KEY seguida pela cláusula REFERENCES, indicando a tabela e a coluna referenciada.É importante ressaltar que o script acima representa apenas a estrutura das tabelas. Dependendo das necessidades do sistema, é possível adicionar mais colunas e restrições para atender aos requisitos específicos da loja.Com o banco de dados implementado, a loja poderá armazenar e gerenciar as informações dos clientes, produtos, vendas, funcionários, departamentos e fornecedores de forma organizada e integrada, contribuindo para uma melhor gestão das operações e evitando problemas como perda de informação e retrabalho.ReferênciasWorkbench - Criando diagrama ER, exportando para SQL, implemantando e manipulandoApostila Seduc - Banco de Dados pdfLivro restrito da biblioteca Senac - Introdução a bancos de dados - Paloma Cristina PereiraLivro restrito da biblioteca Senac - Banco de dados" }, { "title": "Modelo Entidade Relacionamento", "url": "/aulas/posts/mer/", "categories": "DESENVOLVIMENTO, PROGRAMADOR", "tags": "Senac, programador, banco de dados, diagrama, uml, projetos", "date": "2023-05-25 17:00:00 -0300", "snippet": "A modelagem entidade-relacionamento (ER) é uma técnica amplamente utilizada na área de banco de dados para projetar e representar os relacionamentos entre entidades. Essa abordagem gráfica permite ...", "content": "A modelagem entidade-relacionamento (ER) é uma técnica amplamente utilizada na área de banco de dados para projetar e representar os relacionamentos entre entidades. Essa abordagem gráfica permite visualizar e descrever a estrutura e as interações de um sistema de informação. Neste artigo, exploraremos os conceitos-chave da modelagem ER e como criar diagramas usando a sintaxe Mermaid.Entidades e RelacionamentosNa modelagem ER, as entidades representam objetos ou conceitos do mundo real que desejamos armazenar informações em um banco de dados. Cada entidade possui atributos que descrevem suas características. Por exemplo, em um sistema de gerenciamento de biblioteca, podemos ter a entidade “Livro” com atributos como “Título”, “Autor” e “Ano de Publicação”.Os relacionamentos definem as interações entre as entidades. Podem ser do tipo um para um, um para muitos ou muitos para muitos. Por exemplo, em um sistema de vendas online, podemos ter o relacionamento entre as entidades “Cliente” e “Pedido”, onde um cliente pode realizar vários pedidos, mas um pedido pertence a um único cliente.Diagramas Entidade-Relacionamento com MermaidO Mermaid é uma linguagem de marcação para a criação de diagramas gráficos, incluindo diagramas entidade-relacionamento. Ele permite representar visualmente as entidades, atributos e relacionamentos de forma clara e concisa. A seguir, veremos como criar um diagrama ER básico usando a sintaxe Mermaid.Passo 1: ConfiguraçãoAntes de começar a criar o diagrama, é necessário configurar o ambiente para a renderização do Mermaid. Certifique-se de ter a biblioteca Mermaid instalada e a sintaxe suportada no ambiente em que está trabalhando.Passo 2: Definir Entidades e AtributosComece definindo as entidades e seus atributos. Por exemplo, para um sistema de gerenciamento de biblioteca, podemos ter as entidades “Livro” e “Autor” com os atributos relevantes. Usando a sintaxe Mermaid, ficaria assim:erDiagram Livro { id INT titulo VARCHAR autor_id INT ano_publicacao INT } Autor { id INT nome VARCHAR }Passo 3: Adicionar RelacionamentosEm seguida, adicione os relacionamentos entre as entidades. Por exemplo, no sistema de gerenciamento de biblioteca, podemos estabelecer um relacionamento “Um para Muitos” entre “Autor” e “Livro”, indicando que um autor pode ter vários livros. Usando a sintaxe Mermaid, ficaria assim:erDiagram Livro { id INT titulo VARCHAR autor_id INT ano_publicacao INT } Autor { id INT nome VARCHAR } Autor ||--o{ Livro : escreveNeste exemplo, o símbolo ||--o{ representa o relacionamento “Um para Muitos”, onde o lado “Autor” é o lado “Um” e o lado “Livro” é o lado “Muitos”.Passo 4: Personalizar eRefinar o DiagramaDepois de adicionar as entidades e os relacionamentos básicos, você pode personalizar e refinar o diagrama de acordo com suas necessidades. Você pode adicionar cardinalidades, chaves primárias, restrições e outros elementos conforme necessário.erDiagram Livro { id INT PK titulo VARCHAR autor_id INT ano_publicacao INT } Autor { id INT PK nome VARCHAR } Autor ||--o{ Livro : \"Escreve\"Neste exemplo, adicionamos o rótulo “Escreve” ao relacionamento entre “Autor” e “Livro” para indicar a natureza do relacionamento.Chave Primária e Chave EstrangeiraNa modelagem entidade-relacionamento (ER), a utilização de chaves primárias e chaves estrangeiras é fundamental para estabelecer relacionamentos e garantir a integridade dos dados. Neste artigo, vamos explorar esses conceitos e entender como eles são representados nos diagramas ER.Chave PrimáriaUma chave primária é um atributo ou conjunto de atributos que identifica exclusivamente uma entidade em uma tabela. Ela garante que cada registro em uma tabela seja único e permite o acesso rápido aos dados. A chave primária é representada na modelagem ER como uma chave sublinhada.Por exemplo, considerando a entidade “Livro” em um sistema de biblioteca, podemos atribuir o atributo “ISBN” como a chave primária, já que cada livro possui um número ISBN exclusivo. A representação no diagrama ER seria a seguinte:erDiagram Livro { ISBN INT PK titulo VARCHAR autor_id INT ano_publicacao INT }No exemplo acima, o atributo “ISBN” é identificado como a chave primária da entidade “Livro” utilizando o sufixo [PK] após o nome do atributo.Chave EstrangeiraUma chave estrangeira é um atributo ou conjunto de atributos que faz referência a uma chave primária de outra tabela. Ela estabelece uma relação entre duas tabelas e permite a integridade referencial dos dados. A chave estrangeira é representada na modelagem ER como uma seta que aponta para a tabela referenciada.Continuando com o exemplo da biblioteca, suponha que exista uma entidade “Autor” e queremos relacionar os autores aos livros. Podemos adicionar uma chave estrangeira na tabela “Livro” que referencia a chave primária da tabela “Autor”, como mostrado no diagrama ER a seguir:erDiagram Livro { ISBN INT PK autor_id INT FK titulo VARCHAR ano_publicacao INT } Autor { id INT PK nome VARCHAR } Autor ||--o{ Livro : escreveNo exemplo acima, o atributo “autor_id” na tabela “Livro” é uma chave estrangeira que faz referência à chave primária “id” na tabela “Autor”. Essa relação é indicada pela seta que aponta da tabela “Autor” para a tabela “Livro”.A utilização de chaves primárias e chaves estrangeiras na modelagem ER permite estabelecer relacionamentos entre as entidades, garantir a consistência dos dados e facilitar as operações de consulta e manipulação. Esses conceitos são fundamentais para a construção de um banco de dados bem estruturado e eficiente.ConclusãoA modelagem entidade-relacionamento é uma técnica valiosa para projetar e representar a estrutura de um banco de dados. O uso do Mermaid como uma ferramenta para criar diagramas ER torna o processo mais visual e compreensível. Ao seguir os passos descritos neste artigo, você poderá criar seus próprios diagramas ER usando a sintaxe Mermaid e representar com precisão as entidades, atributos e relacionamentos do seu sistema de informação.ReferênciasWorkbench - Criando diagrama ER, exportando para SQL, implemantando e manipulandoApostila Seduc - Banco de Dados pdfLivro restrito da biblioteca Senac - Introdução a bancos de dados - Paloma Cristina PereiraLivro restrito da biblioteca Senac - Banco de dadosFlowchart Maker &amp; Online Diagram Software" }, { "title": "Linguagem de Consulta Estruturada - SQL", "url": "/aulas/posts/sql/", "categories": "DESENVOLVIMENTO, PROGRAMADOR", "tags": "Senac, programador, banco de dados", "date": "2023-05-24 17:00:00 -0300", "snippet": "O SQL (Structured Query Language), ou Linguagem de Consulta Estruturada, é uma linguagem de programação usada para interagir com bancos de dados relacionais. Ele permite a criação, manipulação e co...", "content": "O SQL (Structured Query Language), ou Linguagem de Consulta Estruturada, é uma linguagem de programação usada para interagir com bancos de dados relacionais. Ele permite a criação, manipulação e consulta de dados em um banco de dados, fornecendo uma maneira padronizada de lidar com informações estruturadas.Funcionalidades e Operações do SQLO SQL oferece várias funcionalidades e operações para gerenciar bancos de dados e realizar análises de dados em tempo real. Algumas das principais características são: Criação de banco de dados: o SQL permite a criação de bancos de dados para armazenar informações de forma organizada. É possível definir a estrutura, relacionamentos e restrições dos dados a serem armazenados. Criação de Tabelas: as tabelas representam as entidades e atributos que compõem o banco de dados. Com o SQL, é possível criar tabelas, definir os tipos de dados dos atributos e estabelecer as chaves primárias e estrangeiras. Inserção de dados: o SQL permite inserir registros em uma tabela, fornecendo os valores correspondentes aos atributos definidos. Isso possibilita a adição de novos dados ao banco de dados. Consulta de dados: a consulta é uma das principais operações do SQL. Com a cláusula SELECT, é possível recuperar dados específicos de uma ou mais tabelas. As consultas podem ser modeladas de acordo com as necessidades do usuário, permitindo a filtragem, ordenação e agrupamento dos resultados. Alteração de dados: o SQL possibilita a alteração dos dados existentes em uma tabela. É possível atualizar valores de atributos específicos, modificar a estrutura da tabela ou adicionar novas colunas. Exclusão de dados: com o SQL, é possível excluir registros de uma tabela utilizando a cláusula DELETE. Isso permite remover informações indesejadas ou desatualizadas do banco de dados. Análise de dados: o SQL oferece recursos avançados de análise de dados. Por meio de funções agregadas, como SUM, AVG, MAX e MIN, é possível realizar cálculos estatísticos e obter informações resumidas sobre os dados armazenados.Utilização do SQLO SQL é amplamente utilizado em várias áreas, incluindo: Tecnologia da Informação: profissionais de TI utilizam o SQL para gerenciar bancos de dados, criar consultas complexas e garantir a integridade dos dados. Engenharia de Software: desenvolvedores de software incorporam o SQL em seus aplicativos para interagir com bancos de dados e manipular informações. Sistemas/Aplicativos: o SQL é usado em sistemas e aplicativos que exigem armazenamento e recuperação eficientes de dados, como sistemas de gerenciamento de conteúdo, sistemas de gestão de relacionamento com o cliente (CRM) e sistemas de gerenciamento de estoque. Data Science: profissionais de ciência de dados utilizam o SQL para extrair, transformar e carregar dados (ETL) de fontes diversas, além de realizar análises e criar modelos. Marketing: profissionais de marketing usam o SQL para segmentar dados, realizar análises declientes e executar campanhas direcionadas com base em informações armazenadas em bancos de dados. DBA (Administrador de Banco de Dados): os DBAs são responsáveis pela administração e manutenção de bancos de dados, e o SQL é uma ferramenta essencial em suas atividades diárias.Análise de Dados com SQLCom o aumento do volume de dados disponíveis, a análise de dados se tornou uma parte fundamental em diversos campos. O SQL desempenha um papel importante nesse contexto. Algumas áreas em que o SQL é aplicado na análise de dados incluem: Aplicação em Negócios: o SQL permite a realização de análises de negócios, como identificação de tendências, segmentação de clientes, análise de mercado e previsão de demanda. Marketing: profissionais de marketing podem usar o SQL para extrair insights de dados de campanhas, analisar o desempenho de anúncios e medir o impacto das estratégias de marketing. Medicina: o SQL é utilizado na análise de dados clínicos, como registros de pacientes, resultados de exames e históricos médicos, auxiliando médicos e pesquisadores na tomada de decisões e identificação de padrões. Inteligência Artificial: o SQL é uma linguagem essencial para trabalhar com bancos de dados em projetos de inteligência artificial e aprendizado de máquina. É usado para extrair dados de treinamento, realizar pré-processamento e análise exploratória.Comandos Básicos do SQLESTRUTURAÇÃO (DDL - Data Definition Language) CREATE DATABASE: cria um novo banco de dados. CREATE TABLE: cria uma nova tabela no banco de dados. ALTER TABLE: modifica a estrutura de uma tabela existente. DROP TABLE: exclui uma tabela do banco de dados.MANIPULAÇÃO DE DADOS (DML - Data Manipulation Language) INSERT: insere dados em uma tabela. UPDATE: atualiza dados existentes em uma tabela. DELETE: exclui registros de uma tabela.CONSULTA (DQL - Data Query Language) SELECT: recupera dados de uma ou mais tabelas com base em condições especificadas. O SQL é uma linguagem poderosa e versátil para manipulação e análise de dados em bancos de dados relacionais. Sua ampla utilização e suporte em diferentes áreas e setores destacam sua importância e relevância no mundo da tecnologia e dos negócios.Exemplo de Uso do SQLCriação de Banco de Dados, Tabela, Inserção, Atualização e Exclusão de Dados.Vamos acompanhar um exemplo prático do uso do SQL para criar um banco de dados, criar uma tabela, inserir dados nessa tabela, atualizar registros existentes e excluir dados da tabela.Criação do Banco de DadosPara começar, vamos criar um novo banco de dados chamado “exemplo_db”. Utilizaremos o comando CREATE DATABASE para realizar essa tarefa:CREATE DATABASE exemplo_db;Criação da TabelaAgora que temos o banco de dados criado, vamos criar uma tabela chamada “usuarios” dentro desse banco. Essa tabela armazenará informações dos usuários, como nome, e-mail e idade. Utilizaremos o comando CREATE TABLE para criar a tabela:USE exemplo_db;CREATE TABLE usuarios ( id INT PRIMARY KEY AUTO_INCREMENT, nome VARCHAR(50), email VARCHAR(100), idade INT);Nesse exemplo, definimos a tabela “usuarios” com quatro colunas: “id” (chave primária), “nome”, “email” e “idade”.Inserção de Dados na TabelaAgora que a tabela foi criada, podemos inserir dados nela. Utilizaremos o comando INSERT INTO para realizar a inserção de registros. Vamos adicionar dois usuários ao nosso banco de dados:INSERT INTO usuarios (nome, email, idade)VALUES ('João Silva', 'joao.silva@example.com', 30), ('Maria Santos', 'maria.santos@example.com', 25);Essa instrução insere dois registros na tabela “usuarios”, com os respectivos valores para as colunas “nome”, “email” e “idade”.Atualização de Dados na TabelaSuponha que desejamos atualizar o e-mail do usuário com o ID igual a 1. Utilizaremos o comando UPDATE para realizar essa atualização:UPDATE usuariosSET email = 'joao.novoemail@example.com'WHERE id = 1;Essa instrução atualiza o valor da coluna “email” para 'joao.novoemail@example.com' onde o ID é igual a 1.Exclusão de Dados na TabelaPor fim, vamos excluir o usuário com o ID igual a 2 da tabela “usuarios”. Utilizaremos o comando DELETE para realizar a exclusão:DELETE FROM usuariosWHERE id = 2;Essa instrução exclui o registro da tabela “usuarios” onde o ID é igual a 2.Neste exemplo, vimos como criar um banco de dados, criar uma tabela, inserir dados nessa tabela, atualizar registros existentes e excluir dados da tabela usando comandos SQL. Essas operações básicas são fundamentais para manipulação de dados em um banco de dados relacional.ReferênciasSQLite (O Banco de Dados de Bolso) // Dicionário do ProgramadorIntrodução SQL - Aula 01 - Minicurso de SQLComo Conectar ao SQLite com JavaCommand Line Shell For SQLiteWorkbench - Criando diagrama ER, exportando para SQL, implemantando e manipulandoApostila Seduc - Banco de Dados pdfLivro restrito da biblioteca Senac - Introdução a bancos de dados - Paloma Cristina PereiraLivro restrito da biblioteca Senac - Banco de dados" }, { "title": "Sistema gerenciador de banco de dados", "url": "/aulas/posts/sgbd/", "categories": "DESENVOLVIMENTO, PROGRAMADOR", "tags": "Senac, programador, banco de dados", "date": "2023-05-23 17:00:00 -0300", "snippet": "Neste artigo, vamos explorar os principais aspectos de um Sistema Gerenciador de Banco de Dados, desde a sua definição até as funcionalidades e vantagens que ele oferece.DefiniçãoUm Sistema Gerenci...", "content": "Neste artigo, vamos explorar os principais aspectos de um Sistema Gerenciador de Banco de Dados, desde a sua definição até as funcionalidades e vantagens que ele oferece.DefiniçãoUm Sistema Gerenciador de Banco de Dados (SGBD) é uma ferramenta ou software que permite a criação, organização, armazenamento, recuperação e manipulação de dados em um banco de dados. Ele fornece uma interface entre os usuários e o banco de dados, permitindo que eles realizem operações como inserção, atualização, consulta e exclusão de dados. Um Sistema Gerenciador de Banco de Dados é uma camada de software que gerencia a interação entre os usuários e o banco de dados. Ele permite a criação e administração de estruturas de armazenamento de dados, bem como a execução de consultas e transações.Componentes de um SGBDUm SGBD é composto por diversos componentes que trabalham em conjunto para garantir o correto funcionamento e gerenciamento dos dados. Alguns dos principais componentes são: Motor do Banco de Dados: responsável por gerenciar o armazenamento e a recuperação dos dados, implementando estruturas de indexação, controle de concorrência e mecanismos de recuperação em caso de falhas. Linguagem de Consulta: fornece uma interface para que os usuários possam formular consultas e interagir com o banco de dados. Exemplos de linguagens de consulta são SQL (Structured Query Language) e NoSQL (Not Only SQL). Dicionário de Dados: contém informações sobre a estrutura do banco de dados, como esquemas, tabelas, relacionamentos e restrições. Ele permite o controle e a descrição dos metadados. Gerenciador de Transações: responsável por garantir a atomicidade, consistência, isolamento e durabilidade (ACID) das transações executadas no banco de dados. Ele controla as operações de leitura e escrita para manter a integridade dos dados.Funcionalidades de um SGBDUm SGBD oferece uma variedade de funcionalidades para facilitar o gerenciamento eficiente dos dados. Algumas das funcionalidades mais comuns incluem: Criação e Definição de Banco de Dados: permite criar e definir a estrutura do banco de dados, incluindo tabelas, relacionamentos, índices e restrições. Manipulação de Dados: oferece operações para inserção, atualização, exclusão e consulta de dados no banco de dados. Controle de Acesso: permite controlar o acesso aos dados com base em permissões e níveis de segurança, garantindo que apenas usuários autorizados possam visualizar, modificar ou excluir dados. Backup e Recuperação: fornece mecanismos para realizar backups regulares do banco de dados e restaurá-lo em caso de falhas ou perda de dados. Otimização de Consultas: otimiza automaticamente as consultas enviadas ao banco de dados, visando melhorar o desempenho e a eficiência das operações.Vantagens do Uso de um SGBDO uso de um Sistema Gerenciador de Banco de Dados traz diversas vantagens para o armazenamento e manipulação de dados. Algumas das principais vantagens são: Integridade dos Dados: o SGBD garante a integridade dos dados por meio de restrições e mecanismos de validação, evitando a entrada de dados inválidos ou inconsistentes. Concorrência e Controle de Acesso: um SGBD gerencia o acesso concorrente aos dados, garantindo que múltiplos usuários possam acessar o banco de dados de forma segura e consistente. Recuperação de Falhas: o SGBD possui mecanismos de recuperação em caso de falhas do sistema, permitindo restaurar o banco de dados para um estado consistente. Desenvolvimento Eficiente de Aplicações: um SGBD fornece interfaces e ferramentas que facilitam o desenvolvimento de aplicações que interagem com o banco de dados, permitindo uma implementação mais rápida e eficiente. Segurança dos Dados: um SGBD oferece recursos de segurança para proteger os dados contra acessos não autorizados, garantindo a confidencialidade e a privacidade das informações armazenadas. Em resumo, um Sistema Gerenciador de Banco de Dados desempenha um papel fundamental na organização e manipulação de dados em um ambiente de software. Ele fornece as funcionalidades necessárias para garantir a integridade, segurança e eficiência do armazenamento e recuperação de informações. O uso adequado de um SGBD pode trazer inúmeras vantagens para o desenvolvimento e a gestão de sistemas de informação.SGBDs PopularesExistem vários Sistemas Gerenciadores de Banco de Dados (SGBDs) disponíveis no mercado, cada um com suas características e recursos específicos. Abaixo, apresentaremos alguns dos SGBDs mais populares: MySQL: o MySQL é um SGBD relacional de código aberto amplamente utilizado. Ele é conhecido por sua confiabilidade, escalabilidade e desempenho. O MySQL é compatível com SQL e é amplamente adotado em diferentes tipos de aplicativos, desde pequenos sites até grandes sistemas empresariais. Oracle Database: o Oracle Database é um SGBD relacional desenvolvido pela Oracle Corporation. Ele é conhecido por sua robustez, escalabilidade e recursos avançados. O Oracle Database é amplamente utilizado em empresas de grande porte e é conhecido por sua capacidade de lidar com grandes volumes de dados. Microsoft SQL Server: o Microsoft SQL Server é um SGBD relacional desenvolvido pela Microsoft. Ele é projetado para atender às necessidades de empresas de todos os tamanhos, desde pequenas empresas até grandes corporações. O SQL Server oferece recursos avançados, integração com outras tecnologias Microsoft e é conhecido por sua facilidade de uso. PostgreSQL: o PostgreSQL é um SGBD relacional de código aberto conhecido por sua confiabilidade, conformidade com padrões e recursos avançados. Ele é altamente personalizável e suporta uma ampla gama de recursos, incluindo replicação, particionamento e extensibilidade. O PostgreSQL é frequentemente escolhido para aplicativos complexos e críticos. MongoDB: o MongoDB é um SGBD NoSQL orientado a documentos. Ele difere dos SGBDs relacionais, pois armazena os dados em documentos flexíveis tipo JSON. O MongoDB é altamente escalável e adequado para aplicativos que exigem flexibilidade e desempenho em leitura e gravação de dados não estruturados. Redis: o Redis é um SGBD NoSQL conhecido por sua velocidade e recursos de armazenamento em memória. Ele é amplamente utilizado para armazenar e recuperar dados em cache, realizar filas e publicar/subscrever mensagens. O Redis é especialmente útil em cenários que exigem alta velocidade e baixa latência. Esses são apenas alguns exemplos de SGBDs populares disponíveis atualmente. Cada um tem suas próprias características e é mais adequado para diferentes casos de uso. A escolha do SGBD depende dos requisitos específicos do projeto, como escalabilidade, desempenho, segurança e modelo de dados. É importante realizar uma análise cuidadosa e considerar as necessidades do sistema antes de selecionar um SGBD específico.SGBDs Relacionais e Não RelacionaisExistem dois principais tipos de Sistemas Gerenciadores de Banco de Dados (SGBDs): os relacionais e os não relacionais. Cada tipo possui características distintas e é adequado para diferentes tipos de aplicativos e cenários de uso. Vamos explorar mais sobre esses dois tipos:SGBDs RelacionaisOs SGBDs relacionais são baseados no modelo relacional, que organiza os dados em tabelas com linhas e colunas. Eles são amplamente utilizados há décadas e seguem o padrão ACID (Atomicidade, Consistência, Isolamento e Durabilidade) para garantir a integridade dos dados. Alguns dos SGBDs relacionais mais populares são o MySQL, Oracle Database e Microsoft SQL Server.Características dos SGBDs Relacionais: Estrutura Tabular: os dados são organizados em tabelas, onde cada tabela representa uma entidade e as colunas representam os atributos. Esquema Rígido: os SGBDs relacionais têm um esquema rígido, o que significa que a estrutura das tabelas e os tipos de dados devem ser definidos antecipadamente. Relacionamentos: os relacionamentos entre as tabelas são estabelecidos por meio de chaves estrangeiras, garantindo a integridade referencial. SQL: a linguagem SQL (Structured Query Language) é amplamente utilizada para consultar e manipular os dados em SGBDs relacionais. Transações ACID: os SGBDs relacionais garantem atomicidade, consistência, isolamento e durabilidade das transações, garantindo a integridade dos dados em ambientes concorrentes. Os SGBDs relacionais são adequados para aplicações que requerem integridade dos dados, transações complexas e consultas flexíveis. Eles são amplamente utilizados em sistemas de gerenciamento de informações, sistemas financeiros, sistemas de CRM e muito mais.SGBDs Não Relacionais (NoSQL)Os SGBDs Não Relacionais, também conhecidos como SGBDs NoSQL (Not Only SQL), são projetados para lidar com grandes volumes de dados não estruturados ou semiestruturados. Eles oferecem uma abordagem flexível para o armazenamento e a recuperação de dados, sem seguir o modelo relacional tradicional. Alguns exemplos populares de SGBDs NoSQL são o MongoDB, Cassandra e Redis.Características dos SGBDs Não Relacionais: Modelos de Dados Flexíveis: os SGBDs NoSQL oferecem modelos de dados flexíveis, como documentos, grafos, chave-valor ou famílias de colunas, permitindo uma estruturação mais dinâmica dos dados. Escalabilidade Horizontal: os SGBDs NoSQL são altamente escaláveis, permitindo o armazenamento e processamento eficiente de grandes quantidades de dados distribuídos em clusters de servidores. Desempenho em Escrita: muitos SGBDs NoSQL priorizam o desempenho de gravação, permitindo inserções rápidas de dados. Consultas Simples: em comparação com os SGBDs relacionais, os SGBDs NoSQL podem oferecer consultas mais simples e eficientes para acesso aos dados. Flexibilidade de Esquema: os SGBDs NoSQL permitem alterações no esquema dos dados sem a necessidade de atualizações em massa.Os SGBDs NoSQL são frequentemente usados em cenários que requerem escalabilidade, alta disponibilidade, processamento distribuído e armazenamento de dados não estruturados. Eles são adequados para aplicativos da web, redes sociais, análise de big data, Internet das Coisas (IoT) e outros casos em que a flexibilidade e o desempenho são fundamentais.Os SGBDs relacionais e não relacionais oferecem abordagens diferentes para o armazenamento e gerenciamento de dados. Os SGBDs relacionais são adequados para aplicações que exigem integridade dos dados, suporte a transações complexas e consultas flexíveis. Por outro lado, os SGBDs NoSQL são ideais para lidar com grandes volumes de dados não estruturados, escalabilidade horizontal e consultas simplificadas. A escolha entre um SGBD relacional e não relacional depende das necessidades específicas do projeto, do tipo de dados a serem armazenados, dos requisitos de desempenho e escalabilidade, entre outros fatores. É importante avaliar cuidadosamente os requisitos e as características de cada tipo de SGBD para selecionar a melhor opção para sua aplicação.SQLite: Um SGBD Embutido e LeveO SQLite é um Sistema Gerenciador de Banco de Dados (SGBD) relacional que se destaca por ser embutido, leve e de fácil utilização. Ele foi projetado para ser incorporado em aplicativos e oferece suporte a diversos sistemas operacionais, incluindo Windows, macOS, Linux, Android e iOS.Características do SQLite: Embutido: o SQLite é uma biblioteca de código-fonte aberto que pode ser incorporada diretamente em um aplicativo, eliminando a necessidade de um servidor de banco de dados separado. O banco de dados SQLite é armazenado como um arquivo único no sistema de arquivos do dispositivo. Leve: o SQLite possui uma pegada de memória pequena e requer poucos recursos para funcionar. Isso o torna ideal para dispositivos com recursos limitados, como smartphones, sistemas embarcados e aplicativos de desktop. Transacional: o SQLite oferece suporte a transações ACID, permitindo que as operações de inserção, atualização e exclusão sejam tratadas de forma segura e confiável. Sem servidor: ao contrário de outros SGBDs que requerem um servidor dedicado para acesso aos dados, o SQLite permite o acesso direto aos arquivos do banco de dados, simplificando a configuração e a administração. Compatibilidade: o SQLite é compatível com a linguagem SQL e oferece uma ampla gama de recursos, incluindo consultas complexas, indexação, integridade referencial e suporte a tipos de dados.Principais Casos de Uso do SQLite: Aplicações Móveis: o SQLite é amplamente utilizado em aplicativos móveis, tanto para armazenar dados localmente como para sincronização com serviços em nuvem. Ele oferece desempenho eficiente e baixo consumo de recursos, tornando-o uma escolha popular para aplicativos Android e iOS. Armazenamento em Cachê: o SQLite é frequentemente usado para armazenar dados em cache, permitindo um acesso rápido a informações frequentemente acessadas. Isso é especialmente útil em aplicativos da web, onde o acesso a um servidor de banco de dados pode ser lento. Prototipagem e Desenvolvimento Rápido: o SQLite é uma opção conveniente para prototipagem e desenvolvimento rápido de aplicativos, pois não requer configurações complexas ou gerenciamento de servidores. Pequenas Aplicações de Desktop: para aplicativos desktop com requisitos de armazenamento de dados moderados, o SQLite pode ser uma alternativa leve e fácil de usar em vez de SGBDs maiores e mais complexos.Embora o SQLite seja ideal para muitos casos de uso, é importante considerar suas limitações. Ele pode não ser adequado para aplicações com requisitos de alta concorrência, armazenamento de grandes volumes de dados ou ambientes distribuídos. Nestes casos, outros SGBDs mais robustos e escaláveis devem ser considerados. Em suma, o SQLite é uma opção poderosa e popular para integração de um SGBD em aplicativos, fornecendo funcionalidades de banco de dados relacional em um pacote leve e fácil de usar. Sua portabilidade, eficiência e facilidade de implementação o tornam uma escolha atraente para muitos desenvolvedoresMySQL Server: Um SGBD Relacional PoderosoO MySQL Server é um Sistema Gerenciador de Banco de Dados (SGBD) relacional amplamente utilizado e conhecido por sua confiabilidade, desempenho e escalabilidade. Desenvolvido pela Oracle Corporation, o MySQL é uma opção popular tanto para pequenas aplicações quanto para grandes sistemas empresariais.Características do MySQL Server: Escalabilidade: o MySQL oferece suporte a escalabilidade vertical e horizontal, permitindo que os usuários aumentem a capacidade de armazenamento e o desempenho do banco de dados à medida que suas necessidades crescem. Ele suporta a replicação, a fragmentação de dados e o particionamento de tabelas para distribuir a carga de trabalho em múltiplos servidores. Desempenho: o MySQL é conhecido por seu desempenho rápido e eficiente. Ele utiliza índices, otimização de consultas e cache em memória para acelerar as operações de leitura e gravação. Além disso, o MySQL possui recursos avançados de otimização, como o ajuste automático de memória e o uso de índices espaciais para consultas geoespaciais. Segurança: o MySQL oferece recursos de segurança robustos para proteger os dados armazenados. Isso inclui autenticação baseada em senha, criptografia de dados em trânsito e em repouso, controle de acesso granular e auditoria de atividades. Confiabilidade: o MySQL é conhecido por sua confiabilidade e estabilidade. Ele suporta a recuperação de falhas, oferecendo opções de backup e restauração, além de mecanismos de recuperação de transações em caso de falha do sistema. Compatibilidade: o MySQL é compatível com a linguagem SQL padrão e oferece suporte a uma ampla gama de drivers de acesso a banco de dados, permitindo que seja integrado a várias linguagens de programação. Além disso, o MySQL é compatível com padrões e especificações da indústria, garantindo interoperabilidade com outros sistemas.Principais Casos de Uso do MySQL Server: Aplicações Web: o MySQL é amplamente utilizado em aplicações web, desde sites pessoais até grandes portais e plataformas de comércio eletrônico. Sua escalabilidade, desempenho e suporte a consultas complexas o tornam uma escolha popular para armazenar e recuperar dados de forma eficiente. Sistemas Empresariais: muitas empresas adotam o MySQL como seu SGBD padrão para gerenciar dados em sistemas de CRM, ERP, gestão de estoques e outras soluções empresariais. Sua capacidade de suportar grandes volumes de dados e alta concorrência torna-o adequado para ambientes empresariais. Aplicações de Big Data: o MySQL pode ser usado em cenários de big data, onde os dados são processados, analisados e armazenados. É comum utilizá-lo em conjunto com frameworks e ferramentas de processamento de dados, como Hadoop e Apache Spark. Sistemas de IoT: com o crescimento da Internet das Coisas (IoT), o MySQL é usado para armazenar e gerenciar dados gerados por dispositivos conectados. Ele fornece recursos de escalabilidade e desempenho necessários para lidar com grandes quantidades de dados provenientes de sensores e dispositivos IoT. O MySQL Server oferece uma combinação de desempenho, escalabilidade e confiabilidade, tornando-o uma escolha popular para uma ampla gama de aplicações. Sua comunidade ativa e ampla documentação facilitam o suporte e o aprendizado. Seja para projetos pequenos ou sistemas empresariais complexos, o MySQL é uma opção sólida para o gerenciamento eficiente de bancos de dados relacionais.ConclusãoUm Sistema Gerenciador de Banco de Dados é essencial para o armazenamento, organização e manipulação eficiente de dados. Ele oferece recursos e funcionalidades que simplificam o desenvolvimento de aplicativos, garantem a integridade dos dados e permitem a recuperação rápida em caso de falhas. A escolha do SGBD adequado depende das necessidades específicas do projeto e dos requisitos do sistema. Com a seleção correta do SGBD, é possível criar aplicações robustas, escaláveis e de alto desempenho.ReferênciasWorkbench - Criando diagrama ER, exportando para SQL, implemantando e manipulandoApostila Seduc - Banco de Dados pdfLivro restrito da biblioteca Senac - Introdução a bancos de dados - Paloma Cristina PereiraLivro restrito da biblioteca Senac - Banco de dados" }, { "title": "Ferramenta de produtividade PDCA", "url": "/aulas/posts/ferramenta-de-produtividade-pdca/", "categories": "AULAS, PLANEJAMENTO DE CARREIRA", "tags": "planejamento, carreira, projetos, gestão, tarefas", "date": "2023-05-23 10:00:00 -0300", "snippet": "No ambiente empresarial altamente competitivo de hoje, as organizações buscam constantemente maneiras de melhorar seus processos, aumentar a eficiência e alcançar a excelência operacional. Nesse co...", "content": "No ambiente empresarial altamente competitivo de hoje, as organizações buscam constantemente maneiras de melhorar seus processos, aumentar a eficiência e alcançar a excelência operacional. Nesse contexto, a ferramenta de gestão PDCA (Plan, Do, Check, Act) desempenha um papel fundamental ao fornecer um ciclo estruturado de melhoria contínua.DefiniçãoO PDCA pode ser identificado como o Ciclo de Shewhart, e foi desenvolvido em 1930 por Walter Andrew Shewhart, engenheiro e físico, que enquanto trabalhando no Bell Laboratories, apresentou tal ferramenta como instrumento de excelência de gestão de qualidade. Analisando estatisticamente o controle de processos, ele criou um modelo capaz de ser implantado na abordagem de qualquer situação, o PDCA signica: Plan: Planejamento da Atividade; Do: Execução da Atividade; Check: Verificação do andamento da Atividade; Action: Ação nos Resultados.Formato do PDCASeção 1: Plan (Planejar):A primeira etapa do PDCA é o planejamento. Nessa fase, a organização define seus objetivos e estabelece um plano detalhado para alcançá-los. Isso envolve identificar problemas ou oportunidades de melhoria, coletar e analisar dados relevantes, estabelecer metas específicas e desenvolver um plano de ação detalhado. Durante o planejamento, é importante envolver todas as partes interessadas relevantes para garantir um processo abrangente e colaborativo.Seção 2: Do (Executar):Uma vez que o plano tenha sido definido, a etapa de execução começa. Nessa fase, o plano de ação é implementado conforme projetado. Isso pode envolver a alocação de recursos adequados, treinamento de funcionários, mudanças nos processos existentes e a implementação de novas práticas. A execução cuidadosa e diligente do plano é essencial para garantir que as etapas seguintes do ciclo de melhoria sejam baseadas em dados e resultados precisos.Seção 3: Check (Verificar):Após a implementação do plano, é necessário verificar se as ações realizadas estão alcançando os resultados desejados. Nesta fase, a coleta e análise de dados são cruciais para avaliar o desempenho atual em relação às metas estabelecidas. É importante usar indicadores-chave de desempenho (KPIs) relevantes e comparar os resultados obtidos com os esperados. A verificação objetiva do progresso ajuda a identificar desvios, gargalos ou áreas que necessitam de ajustes.Seção 4: Act (Agir):Com base nas conclusões da fase de verificação, a etapa de ação é iniciada. Nessa fase, as lições aprendidas são aplicadas para corrigir problemas identificados e implementar melhorias necessárias. Isso pode envolver ajustes nos processos, realocação de recursos, revisão de políticas e procedimentos ou até mesmo a reformulação do plano de ação original. A ação deve ser decisiva, rápida e focada na resolução dos problemas identificados.A ferramenta de gestão PDCA é uma abordagem estruturada e sistemática para a melhoria contínua e a busca da excelência operacional. Ao seguir o ciclo PDCA, as organizações são capazes de planejar cuidadosamente, executar com eficiência, verificar os resultados e agir com base nas conclusões. Esse ciclo repetitivo permite um aprimoramento constante dos processos e uma cultura de aprendizado contínuo.Ao adotar o PDCA, as organizações podem enfrentar desafios de forma proativa, identificar oportunidadesExemplo prático de PDCAMelhoria do Processo de Atendimento ao ClienteNeste exemplo prático, vamos aplicar o ciclo PDCA em um cenário de melhoria do processo de atendimento ao cliente de uma empresa de varejo. Vamos seguir as etapas do PDCA para identificar e implementar melhorias no processo de atendimento.1. Plan (Planejar): Identificar o problema: Os clientes têm relatado tempos de espera longos e insatisfação com o atendimento ao cliente. Definir metas: Reduzir o tempo médio de espera para menos de 5 minutos e aumentar o índice de satisfação do cliente em 20%. Analisar dados: Coletar informações sobre os tempos de espera atuais, volumes de chamadas, horários de pico e feedback dos clientes. Desenvolver um plano de ação: Contratar mais agentes de atendimento, implementar um sistema de fila virtual e oferecer treinamento adicional aos funcionários.2. Do (Executar): Contratar mais agentes de atendimento conforme planejado. Implementar um sistema de fila virtual para gerenciar as chamadas de forma mais eficiente. Realizar treinamentos com a equipe de atendimento ao cliente para aprimorar suas habilidades de comunicação e resolução de problemas.3. Check (Verificar): Monitorar o tempo médio de espera diariamente e compará-lo com a meta estabelecida. Coletar feedback dos clientes através de pesquisas de satisfação. Analisar os dados coletados para identificar tendências e lacunas de desempenho.4. Act (Agir): Se o tempo médio de espera ainda estiver acima da meta, investigar as causas raiz e tomar medidas corretivas, como otimizar a programação dos agentes ou revisar o sistema de fila virtual. Se o índice de satisfação do cliente não estiver melhorando, analisar o feedback recebido e implementar melhorias adicionais no treinamento e nos processos de atendimento. Documentar as lições aprendidas e os ajustes realizados para orientar futuras ações de melhoria contínua.Conclusão:Ao seguir o ciclo PDCA, a empresa de varejo foi capaz de planejar, executar, verificar e agir para melhorar seu processo de atendimento ao cliente. Através da coleta e análise de dados, identificaram problemas, definiram metas, implementaram ações corretivas e monitoraram os resultados. Esse ciclo contínuo de melhoria permitiu que a empresa atendesse de forma mais eficiente, reduzisse o tempo de espera e aumentasse a satisfação dos clientes.O PDCA é uma ferramenta poderosa para orientar a melhoria contínua em qualquer processo ou área de uma organização, permitindo a identificação e solução de problemas de forma estruturada e eficaz.ReferênciasFerramentas de Gestão do TarefasBrainstorming: o que é + como fazer em 4 passosPDCA: O que é Ciclo PDCA e como aplicar para ter melhores resultadosCiclo PDCA: Exemplo prático para sua construtoraExemplos de PDCA na otimização de processos de uma empresa" }, { "title": "Experiência com display de 7 segmentos", "url": "/aulas/posts/experiencia-com-display/", "categories": "AULAS, NOÇÕES DE ROBÓTICA", "tags": "arduino, robótica, simulador, eletrônica", "date": "2023-05-23 04:00:00 -0300", "snippet": "O display de 7-segmentos são basicamente 7 LEDs que, quando acionados na sequência correta, apresentam o desenho de números.É possível criar várias outras formas neles, basta usar a imaginação. Vam...", "content": "O display de 7-segmentos são basicamente 7 LEDs que, quando acionados na sequência correta, apresentam o desenho de números.É possível criar várias outras formas neles, basta usar a imaginação. Vamos entender o display de 7-segmentos, e depois faremos outra experiência para utilizarmos alguns tipos de dados apresentados anteriormente.EXPERIÊNCIA - USANDO UM DISPLAY DE 7-SEGMENTOSDisplay de 7 segmentos é um mostrador comumente utilizado para mostrar números. Normalmente, são usados em conjunto com um conversor Binário/BCD (Binary Coded Decimal). São baratos e construídos por 7 LEDs que formam seus segmentos e o ponto decimal (DP). Display de 7 segmentos podem ser de ânodo comum, que possui um pino que é o polo negativo comum a todos os segmentos que devem ser conectados ao polo positivo para serem acesos, ou cátodo comum, que possui um pino que é o polo positivo comum a todos os segmentos que devem ser conectados ao polo negativo para serem acesos.Os segmentos são identificados por letras de A até G, mais o DP (ponto decimal). Para formar números e algumas letras, basta acender ou apagar os segmentos:Display de 7 segmentosPara trabalhar com displays de 7-segmentos, usamos os mesmos conhecimentos que já temos em trabalhar com LEDs.O que é necessário 1 x Arduino 1 x Display de 7-segmentos cátodo comum Resistores de 220 OhmsEsquema de montagemOrientando-se pela imagem a seguir e usando um cabinho, ligue os pinos comuns (5V) a um resistor de 220Ω e ao pino 5V doArduino. Agora, também usando um cabinho, ligue o pino do segmento A ao pino digital 2 do Arduino.Montagem do display de 7 segmentosProgramaçãoint a = 2;int b = 3;int c = 4;int d = 5;int e = 6;int f = 7;int g = 8;void setup(){ // Configuracao dos pinos 2 a 8 como SAIDA for (int i= 2; i&lt;= 8; i++) { pinMode(i, OUTPUT); }}void loop(){ //----Número 0 ------------- digitalWrite(a, HIGH); digitalWrite(b, HIGH); digitalWrite(c, HIGH); digitalWrite(d, HIGH); digitalWrite(e, HIGH); digitalWrite(f, HIGH); digitalWrite(g, LOW); delay(1000); // espera de 1 segundo //----Número 1 ------------- digitalWrite(a, LOW); digitalWrite(b, HIGH); digitalWrite(c, HIGH); digitalWrite(d, LOW); digitalWrite(e, LOW); digitalWrite(f, LOW); digitalWrite(g, LOW); delay(1000); // espera de 1 segundo //----Número 2 ------------- digitalWrite(a, HIGH); digitalWrite(b, HIGH); digitalWrite(c, LOW); digitalWrite(d, HIGH); digitalWrite(e, HIGH); digitalWrite(f, LOW); digitalWrite(g, HIGH); delay(1000); //----Número 3 ------------- digitalWrite(a, HIGH); digitalWrite(b, HIGH); digitalWrite(c, HIGH); digitalWrite(d, HIGH); digitalWrite(e, LOW); digitalWrite(f, LOW); digitalWrite(g, HIGH); delay(1000); // espera de 1 segundo //----Número 4 ------------- digitalWrite(a, LOW); digitalWrite(b, HIGH); digitalWrite(c, HIGH); digitalWrite(d, LOW); digitalWrite(e, LOW); digitalWrite(f, HIGH); digitalWrite(g, HIGH); delay(1000); // espera de 1 segundo //----Número 5 ------------- digitalWrite(a, HIGH); digitalWrite(b, LOW); digitalWrite(c, HIGH); digitalWrite(d, HIGH); digitalWrite(e, LOW); digitalWrite(f, HIGH); digitalWrite(g, HIGH); delay(1000); // espera de 1 segundo //----Número 6 ------------- digitalWrite(a, HIGH); digitalWrite(b, LOW); digitalWrite(c, HIGH); digitalWrite(d, HIGH); digitalWrite(e, HIGH); digitalWrite(f, HIGH); digitalWrite(g, HIGH); delay(1000); // espera de 1 segundo //----Número 7 ------------- digitalWrite(a, HIGH); digitalWrite(b, HIGH); digitalWrite(c, HIGH); digitalWrite(d, LOW); digitalWrite(e, LOW); digitalWrite(f, LOW); digitalWrite(g, HIGH); delay(1000); // espera de 1 segundo //----Número 8 ------------- digitalWrite(a, HIGH); digitalWrite(b, HIGH); digitalWrite(c, HIGH); digitalWrite(d, HIGH); digitalWrite(e, HIGH); digitalWrite(f, HIGH); digitalWrite(g, HIGH); delay(1000); // espera de 1 segundo //----Número 9 ------------- digitalWrite(a, HIGH); digitalWrite(b, HIGH); digitalWrite(c, HIGH); digitalWrite(d, HIGH); digitalWrite(e, LOW); digitalWrite(f, HIGH); digitalWrite(g, HIGH); delay(1000); // espera de 1 segundo }Programação 2int a = 3, b = 4, c = 5, d = 6, e = 7, f = 8, g = 9;int num[10][7] = { {a,b,c,d,e,f},// Zero {b,c},// Um {a,b,e,d,g},// Dois {a,b,c,d,g},// Três {b,c,f,g},// Quatro {a,c,d,f,g},// Cinco {a,c,d,e,f,g},// Seis {a,b,c},// Sete {a,b,c,d,e,f,g},// Oito {a,b,c,f,g}// Nove};void setup() { pinMode(a,OUTPUT); pinMode(b,OUTPUT); pinMode(c,OUTPUT); pinMode(d,OUTPUT); pinMode(e,OUTPUT); pinMode(f,OUTPUT); pinMode(g,OUTPUT);}void loop() { for(int i=0;i&lt;10;i++) { apaga(); numero(i); delay(1000); }}void apaga() { digitalWrite(a,HIGH); digitalWrite(b,HIGH); digitalWrite(c,HIGH); digitalWrite(d,HIGH); digitalWrite(e,HIGH); digitalWrite(f,HIGH); digitalWrite(g,HIGH);}void numero(int n) { for(int i=0;i&lt;7;i++) digitalWrite(num[n][i],LOW);}}ReferênciasCircuit design Display de 7 segmentos - TinkercadEntradas analógicas do ArduinoArduino - Entradas e Saídas Digitais - Pinos digitaisComo usar Portas Digitais e Analógicas no ARDUINOUsando os pinos digitais do Arduino" }, { "title": "Modelagem de dominio", "url": "/aulas/posts/modelagem-de-dominio/", "categories": "DESENVOLVIMENTO, PROGRAMADOR", "tags": "Senac, programador, projeto, planejamento, diagramas, uml, banco de dados", "date": "2023-05-22 17:00:00 -0300", "snippet": "A modelagem de domínio é uma técnica utilizada na engenharia de software para compreender, representar e organizar as entidades, relacionamentos e comportamentos de um determinado domínio de negóci...", "content": "A modelagem de domínio é uma técnica utilizada na engenharia de software para compreender, representar e organizar as entidades, relacionamentos e comportamentos de um determinado domínio de negócio. Essa técnica é essencial para o desenvolvimento de sistemas de software, pois permite a criação de um modelo abstrato que reflete a realidade do domínio em questão.Neste artigo, vamos explorar os conceitos básicos da modelagem de domínio e apresentar um exemplo prático passo a passo para ilustrar como aplicá-la de forma eficiente.1. EntidadesAs entidades são os elementos fundamentais da modelagem de domínio, representando os objetos ou conceitos relevantes para o domínio em questão. Elas podem ser tangíveis, como um cliente ou um produto, ou abstratas, como um pedido ou uma transação. Para identificar as entidades, é necessário compreender os requisitos e características do domínio em análise.Exemplo:Suponhamos que estamos desenvolvendo um sistema de gerenciamento de uma loja online. Algumas das entidades relevantes para esse domínio seriam: Cliente, Produto, Pedido e Carrinho de Compras.2. AtributosOs atributos representam as características ou propriedades das entidades. Eles descrevem informações específicas associadas a uma entidade e fornecem detalhes adicionais para a modelagem do domínio. Os atributos podem ser simples, como um nome ou um número de telefone, ou compostos, como um endereço, que possui subatributos, como rua, cidade e país.Exemplo:No contexto do sistema de gerenciamento de uma loja online, algumas possíveis atributos para a entidade Cliente seriam: Nome, E-mail, Telefone e Endereço.3. RelacionamentosOs relacionamentos representam as associações entre as entidades. Eles descrevem como as entidades estão conectadas e interagem umas com as outras. Existem diferentes tipos de relacionamentos, como um para um, um para muitos e muitos para muitos, que dependem das regras do domínio em análise.Exemplo:Considerando o sistema de gerenciamento de uma loja online, podemos ter os seguintes relacionamentos: um Cliente pode ter um ou muitos Pedidos, um Pedido pode conter um ou muitos Produtos e um Carrinho de Compras pode conter um ou muitos Produtos.4. Agregação e ComposiçãoAgregação e composição são tipos especiais de relacionamentos que indicam a natureza da dependência entre as entidades. A agregação representa uma relação de “todo-parte”, em que uma entidade pode ser composta por várias outras entidades, mas essas entidades podem existir independentemente. Já a composição indica uma relação de “todo-parte” em que as partes só existem dentro do todo e são completamente dependentes dele.Exemplo:No contexto do sistema de gerenciamento de uma loja online, podemos considerar que um Pedido é composto por vários itens de Produto. Essa relação seria um exemplo de composição, já que os itens do Pedido dependem completamente do Pedido em si.Exemplo Prático: Modelagem de Domínio para um Sistema BancárioVamos agora exemplificar a modelagem de domínio passoa passo para um sistema bancário simples.Passo 1: Identificar as entidades:As entidades relevantes para um sistema bancário poderiam ser: Cliente, Conta, Transação e Agência.Passo 2: Definir os atributos:Para a entidade Cliente, poderíamos ter os atributos: Nome, CPF, Data de Nascimento e Endereço.Para a entidade Conta, poderíamos ter os atributos: Número, Saldo e Data de Abertura.Para a entidade Transação, poderíamos ter os atributos: Tipo, Valor e Data.Para a entidade Agência, poderíamos ter os atributos: Número e Endereço.Passo 3: Estabelecer os relacionamentos:Um Cliente pode ter uma ou várias Contas.Uma Conta pode ter várias Transações.Uma Agência pode ter várias Contas.Passo 4: Identificar agregações ou composições:Neste exemplo, não temos agregações ou composições específicas, apenas relacionamentos simples entre as entidades.Com base nessas etapas, podemos construir um modelo de domínio para um sistema bancário, representando as entidades, atributos e relacionamentos de forma clara e organizada.Entidades:- Cliente- Conta- Transação- AgênciaAtributos:Cliente:- Nome- CPF- Data de Nascimento- EndereçoConta:- Número- Saldo- Data de AberturaTransação:- Tipo- Valor- DataAgência:- Número- EndereçoRelacionamentos:- Um Cliente pode ter uma ou várias Contas- Uma Conta pode ter várias Transações- Uma Agência pode ter várias ContasA modelagem de domínio é uma ferramenta poderosa para o desenvolvimento de software, pois ajuda a criar uma representação clara e precisa do domínio em análise, facilitando a comunicação entre os desenvolvedores e os stakeholders do projeto.Diagramas UMLContinuando o exemplo anterior usando um diagrama para ilustrar as entidades, atributos e relacionamentos do sistema bancário.classDiagram class Cliente { - Nome - CPF - Data de Nascimento - Endereço } class Conta { - Número - Saldo - Data de Abertura } class Transacao { - Tipo - Valor - Data } class Agencia { - Número - Endereco } Cliente \"1\" -- \"*\" Conta : possui Conta \"0..*\" -- \"*\" Transacao : possui Agência \"1\" -- \"*\" Conta : possuiNesse diagrama, cada classe representa uma entidade do sistema bancário, e os atributos estão listados como membros privados das classes. Os relacionamentos são representados pelas linhas que conectam as classes, e os multiplicadores indicam a cardinalidade dos relacionamentos.Por exemplo, temos a relação “um para muitos” entre Cliente e Conta, indicando que um cliente pode possuir uma ou várias contas. A relação entre Conta e Transação também é “um para muitos”, pois uma conta pode ter várias transações.Além disso, há a relação “um para muitos” entre Agência e Conta, indicando que uma agência pode ter várias contas associadas a ela.Essa representação visual por meio de um diagrama conceitual ajuda a entender de forma mais clara a estrutura do domínio e as interações entre as entidades. É uma ferramenta poderosa para a comunicação entre desenvolvedores, analistas de negócios e outras partes interessadas.A modelagem de domínio permite uma visão abstrata e organizada do sistema em desenvolvimento, facilitando o processo de análise, design e implementação de software.Domínio: área do negócio observadaModelo de domínio: modelo que descreve como os dados serão armazenados, sendo eles: as entidades e as inter-relacões entre elas.Níveis de abstração do modelo de domínio Nível Responsável Objetivo Ferramentas Conceitual ou de análise Analista de sistemas Descrever as entidades e suas inter-relações, independente de paradigma Modelo Entidade Relacionamento, Diagrama de classes Lógico ou de designe Projetista Descrever a forma das entidades e das inter-relações, preso a um paradigma como o modelo relacional ou de classes Modelo de relacionamentos e Diagrama de classes Físico ou de implementação Implementador Descrever a forma das entidades e das inter relações, preso a tecnologia e paradigma Script SQL, DDL, Java, etc. ExemploNota FiscalPedido Nº: 1001Data: 25/06/2022Detalhes do pedido:Produto | Descrição | Preço | Quantidade | Desconto | Subtotal8021 | cadeira | 400 | 4 | 0% | 1600.008055 | Mesa | 1500 | 1 | 10% | 1350Diagrama de Entidades e RelacionamentosNível conceitual:Modelo conceitualNível lógico:erDiagram PEDIDO ||--|{ ITEMPEDIDO : pedidos PEDIDO { integer id PK data Date } ITEMPEDIDO }|--|| PRODUTO : produtos ITEMPEDIDO { int pedido_id FK int produto_id FK int quantidade float desconto } PRODUTO { int id PK String descricao float preco }Referências Modelagem de domínio em nível conceitual com UML - Aulão #001 Modelo Conceitual de Dados - Aprenda a utilizar os principais mecanismos de abstração.Workbench - Criando diagrama ER, exportando para SQL, implemantando e manipulandoFlowchart Maker &amp; Online Diagram SoftwareApostila Seduc - Banco de Dados pdfLivro restrito da biblioteca Senac - Introdução a bancos de dados - Paloma Cristina PereiraLivro restrito da biblioteca Senac - Banco de dados" }, { "title": "Exercícios de segurança de redes", "url": "/aulas/posts/exercicios-de-seguran%C3%A7a-de-redes/", "categories": "AULAS, INFRAESTRUTURA DE REDES", "tags": "infraestrutura, segurança, exercícios", "date": "2023-05-22 10:40:00 -0300", "snippet": "Exercícios de segurança de redesConfiguração de roteadoresExercício com perguntas e respostas de múltipla escolha sobre a configuração de roteadores de Wi-Fi em uma rede local:Pergunta 1: Qual é a ...", "content": "Exercícios de segurança de redesConfiguração de roteadoresExercício com perguntas e respostas de múltipla escolha sobre a configuração de roteadores de Wi-Fi em uma rede local:Pergunta 1: Qual é a função principal de um roteador de Wi-Fi em uma rede local? a) Fornecer acesso à Internet b) Fazer backup dos dados dos dispositivos conectados c) Gerenciar as configurações de segurança do sistema operacional d) Aumentar a velocidade da conexão Wi-FiPergunta 2: Qual é a faixa de frequência mais comumente usada pelos roteadores de Wi-Fi? a) 2.4 GHz b) 5 GHz c) 10 GHz d) 20 GHzPergunta 3: O que é SSID em um roteador de Wi-Fi? a) Um protocolo de segurança usado para criptografar a conexão Wi-Fi b) Uma identificação exclusiva para o roteador de Wi-Fi na rede local c) Um tipo de cabo usado para conectar dispositivos ao roteador d) Um tipo de antena usado para melhorar o alcance do sinal Wi-FiPergunta 4: O que é WPA em relação à segurança de um roteador de Wi-Fi? a) Uma organização internacional que define padrões para roteadores de Wi-Fi b) Uma tecnologia de conexão sem fio mais rápida do que o Wi-Fi padrão c) Um protocolo de segurança usado para proteger a conexão Wi-Fi d) Um tipo de antena usado para melhorar a cobertura do sinal Wi-FiPergunta 5: Qual é o propósito de definir uma senha de acesso no roteador de Wi-Fi? a) Impedir que dispositivos não autorizados se conectem à rede b) Acelerar a velocidade da conexão Wi-Fi c) Permitir que o roteador seja detectado por outros dispositivos próximos d) Reduzir o consumo de energia do roteador de Wi-FiRespostas: a. Fornecer acesso à Internet a. 2.4 GHz b. Uma identificação exclusiva para o roteador de Wi-Fi na rede local c. Um protocolo de segurança usado para proteger a conexão Wi-Fi a. Impedir que dispositivos não autorizados se conectem à redePilares da segurança de redesPergunta 1: Qual é um dos principais objetivos da segurança de redes? a) Garantir a disponibilidade dos recursos de rede b) Aumentar a velocidade da conexão de rede c) Minimizar o uso de criptografia em comunicações d) Facilitar o acesso de qualquer dispositivo à redePergunta 2: O que é autenticação em segurança de redes? a) Processo de criptografar dados sensíveis em uma rede b) Verificação da identidade de um usuário ou dispositivo c) Proteção de informações confidenciais em tráfego de rede d) Restrição do acesso de dispositivos à redePergunta 3: Qual é a finalidade do controle de acesso em segurança de redes? a) Impedir ataques de vírus e malware b) Assegurar a integridade dos dados de rede c) Definir permissões para usuários e dispositivos d) Melhorar o desempenho da redePergunta 4: O que é criptografia em segurança de redes? a) Proteção física dos equipamentos de rede b) Identificação de vulnerabilidades em uma rede c) Ocultação de endereços IP em uma rede d) Transformação de dados em formato ilegível para proteger a confidencialidadePergunta 5: Qual é a importância da monitorização e detecção de intrusões em segurança de redes? a) Evitar a interferência de dispositivos não autorizados b) Aumentar a velocidade de conexão da rede c) Garantir a redundância dos servidores de rede d) Manter o controle do consumo de energia da redeRespostas: a. Garantir a disponibilidade dos recursos de rede b. Verificação da identidade de um usuário ou dispositivo c. Definir permissões para usuários e dispositivos d. Transformação de dados em formato ilegível para proteger a confidencialidade a. Evitar a interferência de dispositivos não autorizadosPropriedades da comunicação seguraExercício com perguntas e respostas de múltipla escolha sobre os pilares da segurança de redes:Pergunta 1: Qual é uma das propriedades desejáveis da comunicação segura que garante que as informações transmitidas sejam acessíveis apenas às partes autorizadas? a) Confidencialidade b) Integridade de mensagem c) Autenticação do ponto final d) Segurança operacionalPergunta 2: Qual é uma das propriedades desejáveis da comunicação segura que garante que as informações não tenham sido alteradas durante a transmissão? a) Confidencialidade b) Integridade de mensagem c) Autenticação do ponto final d) Segurança operacionalPergunta 3: Qual é uma das propriedades desejáveis da comunicação segura que garante a verificação da identidade das partes envolvidas na comunicação? a) Confidencialidade b) Integridade de mensagem c) Autenticação do ponto final d) Segurança operacionalPergunta 4: Qual é uma das propriedades desejáveis da comunicação segura que se refere à capacidade de proteger os sistemas e as informações contra ameaças e riscos? a) Confidencialidade b) Integridade de mensagem c) Autenticação do ponto final d) Segurança operacionalRespostas: a. Confidencialidade b. Integridade de mensagem c. Autenticação do ponto final d. Segurança operacionalTécnicas de segurança de redesExercício com perguntas e respostas de múltipla escolha sobre os pilares da segurança de redes:Pergunta 1: Qual é a técnica utilizada para proteger a confidencialidade das informações transmitidas em uma rede, transformando o conteúdo legível em um formato ilegível? a) Criptografia b) Firewall c) Certificado digital d) IntegridadePergunta 2: Qual é o componente de segurança de rede responsável por monitorar e controlar o tráfego de entrada e saída com base em regras de segurança? a) Criptografia b) Firewall c) Certificado digital d) IntegridadePergunta 3: O que é um certificado digital? a) Um tipo de criptografia usado para proteger a integridade das informações b) Um componente de hardware que armazena chaves de criptografia c) Um documento eletrônico que atesta a autenticidade de uma entidade d) Uma técnica usada para verificar a autenticidade dos dados transmitidosPergunta 4: Qual dos seguintes pilares da segurança de redes garante que as informações não tenham sido modificadas ou corrompidas durante a transmissão? a) Integridade b) Autenticação c) Criptografia d) Cálculo hash de verificação de autenticidadePergunta 5: O que é o cálculo hash de verificação de autenticidade? a) Um algoritmo usado para proteger a confidencialidade das informações b) Um método para autenticar os dispositivos conectados em uma rede c) Uma técnica para verificar a integridade dos dados através de um valor resumido único d) Um processo usado para estabelecer um túnel seguro entre dois pontos finaisRespostas: a. Criptografia b. Firewall c. Um documento eletrônico que atesta a autenticidade de uma entidade a. Integridade c. Uma técnica para verificar a integridade dos dados através de um valor resumido únicoReferênciasSegurança em redes de computadores PDF" }, { "title": "Ferramenta de produtividade Kanbam", "url": "/aulas/posts/ferramenta-de-produtividade-kanbam/", "categories": "AULAS, PLANEJAMENTO DE CARREIRA", "tags": "planejamento, carreira, projetos, gestão, tarefas", "date": "2023-05-22 10:00:00 -0300", "snippet": "A técnica Kanban é uma abordagem visual para gerenciar o fluxo de trabalho e aumentar a produtividade. Ela foi originalmente desenvolvida pela Toyota para melhorar a eficiência na produção, mas hoj...", "content": "A técnica Kanban é uma abordagem visual para gerenciar o fluxo de trabalho e aumentar a produtividade. Ela foi originalmente desenvolvida pela Toyota para melhorar a eficiência na produção, mas hoje em dia é amplamente utilizada em diversas áreas, incluindo desenvolvimento de software, gerenciamento de projetos e organização pessoal. Neste artigo, vamos explorar o conceito da técnica Kanban e fornecer um passo a passo para implementá-la.O que é a técnica Kanban?A técnica Kanban é baseada em um sistema visual de quadro com cartões que representam as tarefas a serem realizadas. O objetivo principal é limitar a quantidade de trabalho em andamento, de forma a evitar sobrecarga e garantir um fluxo contínuo de trabalho. O quadro Kanban é dividido em colunas que representam os estágios do fluxo de trabalho, como “A fazer”, “Em andamento” e “Concluído”. Cada tarefa é representada por um cartão que se move pelas colunas à medida que progride no processo.Passo a passo para implementar a técnica KanbanPasso 1: Defina o quadro KanbanO primeiro passo para implementar a técnica Kanban é criar o quadro. Você pode usar uma lousa branca, um quadro de cortiça ou uma ferramenta de gestão de projetos online. Divida o quadro em colunas que representem os estágios do fluxo de trabalho relevantes para o seu contexto. As colunas típicas incluem “A fazer”, “Em andamento” e “Concluído”, mas você pode adaptá-las conforme necessário.Passo 2: Identifique as tarefasIdentifique todas as tarefas que precisam ser realizadas e anote cada uma em um cartão separado. Esses cartões podem ser pequenos pedaços de papel, post-its ou cartões virtuais, dependendo do seu quadro Kanban. Cada cartão deve conter informações básicas sobre a tarefa, como uma descrição breve e os responsáveis por realizá-la.Passo 3: Preencha a coluna “A fazer”Coloque todos os cartões na coluna “A fazer” do seu quadro Kanban. Essa coluna representa as tarefas que ainda não foram iniciadas. Organize os cartões de acordo com a prioridade ou ordem de execução, se necessário.Passo 4: Mova os cartões conforme o progressoÀ medida que você avança nas tarefas, mova os cartões pelas colunas do quadro Kanban. Quando você começar a trabalhar em uma tarefa, mova o cartão correspondente para a coluna “Em andamento”. Conforme a tarefa progredir, você poderá mover o cartão para outras colunas, como “Aguardando aprovação” ou “Concluído”. O objetivo é limitar o número de cartões em cada coluna para evitar sobrecarga e garantir um fluxo de trabalho equilibrado.Passo 5: Acompanhe o quadro Kanban regularmenteÉ importante revisar e atualizar o quadro Kanban regularmente para garantir que todas as tarefas estejam atualizadasExemplo prático: Controle de Pedido, Produção e Entrega de um ProdutoAqui está um exemplo prático de como você pode aplicar a técnica Kanban para controlar o processo de pedido, produção e entrega de um produto. Vamos criar um quadro Kanban em formato Markdown para visualizar as etapas envolvidas.Passo 1. Defina o quadro KanbanCrie um documento Markdown e divida-o em colunas que representem as etapas do processo: “Pedido Recebido”, “Produção”, “Embalagem” e “Entrega”. A estrutura do quadro Kanban em Markdown ficará assim: Pedido Recebido Produção Embalagem Entrega         Passo 2. Identifique as tarefasIdentifique as tarefas necessárias para o processo de pedido, produção e entrega do produto. Vamos supor que tenhamos as seguintes tarefas: Criar ficha de pedido Verificar estoque Produzir item Embalar produto Agendar entregaAnote cada uma dessas tarefas em cartões separados no seu documento Markdown. O quadro ficará assim: Pedido Recebido Produção Embalagem Entrega - Criar ficha - Verificar - Embalar - Agendar entrega de pedido estoque produto     - Produzir item     Passo 3. Preencha a coluna “Pedido Recebido”No momento inicial do processo, insira os cartões de tarefas na coluna “Pedido Recebido”, indicando que o pedido foi recebido, mas as tarefas ainda não foram iniciadas: Pedido Recebido Produção Embalagem Entrega - Criar ficha - Verificar - Embalar - Agendar entrega de pedido estoque produto     - Produzir item     Passo 4. Mova os cartões conforme o progressoÀ medida que você avança nas tarefas, mova os cartões pelas colunas do quadro Kanban. Vamos supor que as tarefas progridam da seguinte forma: A ficha de pedido é criada e a verificação de estoque é feita. O item é produzido. O produto é embalado. A entrega é agendada.O quadro Kanban atualizado ficará assim: Pedido Recebido Produção Embalagem Entrega   - Verificar - Embalar - Agendar entrega   estoque produto   - Criar ficha - Produzir item     Passo 5. Acompanhe o quadro Kanban regularmenteAcompanhe regularmente o quadro Kanban para atualizar o status das tarefas à medidaExemplo prático: Controle de Desenvolvimento de SoftwareAqui está um exemplo prático de como você pode aplicar a técnica Kanban para controlar o desenvolvimento de software. Vamos criar um quadro Kanban em formato Markdown para visualizar as etapas envolvidas.Passo 1- Defina o quadro KanbanCrie um documento Markdown e divida-o em colunas que representem as etapas do processo de desenvolvimento de software, como “Backlog”, “Em andamento”, “Revisão” e “Concluído”. A estrutura do quadro Kanban em Markdown ficará assim: Backlog Em andamento Revisão Concluído         Passo 2- Identifique as tarefasIdentifique as tarefas necessárias para o desenvolvimento de software. Vamos supor que tenhamos as seguintes tarefas: Definir requisitos Projetar interface Desenvolver funcionalidade A Testar funcionalidade A Revisar código Preparar documentaçãoAnote cada uma dessas tarefas em cartões separados no seu documento Markdown. O quadro ficará assim: Backlog Em andamento Revisão Concluído - Definir requisitos - Desenvolver funcionalidade A - Revisar código   - Projetar interface - Testar funcionalidade A         - Preparar documentação   Passo 3- Preencha a coluna “Backlog”No início do desenvolvimento, insira os cartões de tarefas na coluna “Backlog”, indicando que as tarefas estão planejadas, mas ainda não foram iniciadas: Backlog Em andamento Revisão Concluído - Definir requisitos - Desenvolver funcionalidade A - Revisar código   - Projetar interface - Testar funcionalidade A         - Preparar documentação   Passo 4- Mova os cartões conforme o progressoÀ medida que você avança nas tarefas de desenvolvimento de software, mova os cartões pelas colunas do quadro Kanban. Vamos supor que as tarefas progridam da seguinte forma: Os requisitos são definidos e a interface é projetada. A funcionalidade A está em desenvolvimento e em seguida é testada. O código é revisado e a documentação é preparada.O quadro Kanban atualizado ficará assim: Backlog Em andamento Revisão Concluído   - Desenvolver funcionalidade A - Revisar código     - Testar funcionalidade A     - Projetar interface   - Preparar documentação   - Definir requisitos       Passo 5- Acompanhe o quadro Kanban regularmenteAcompanhe regularmente o quadro Kanban para atualizar o status das tarefas, garantindo que o fluxo de trabalho esteja avançando de maneira adequada e que as tarefas sejam concluídas conforme necessário.ReferênciasKanban: O que é e Como FuncionaKanban: conceito, como funciona, vantagens e implementaçãoMétodo Kanban: Guia detalhado e 5 modelos prontos para usarQuadro Kanban: 7 modelos ilustrados para você se inspirarFerramentas de Gestão do Tarefas" }, { "title": "Portas analógicas e digitais no Arduino", "url": "/aulas/posts/portas-analogicas-e-digitais-no-arduino/", "categories": "AULAS, NOÇÕES DE ROBÓTICA", "tags": "arduino, robótica, simulador, eletrônica", "date": "2023-05-22 04:00:00 -0300", "snippet": "Vamos explorar as portas analógicas e digitais do Arduino, bem como o conceito de PWM (Modulação por Largura de Pulso, do inglês Pulse Width Modulation). Vamos explicar o funcionamento de cada tipo...", "content": "Vamos explorar as portas analógicas e digitais do Arduino, bem como o conceito de PWM (Modulação por Largura de Pulso, do inglês Pulse Width Modulation). Vamos explicar o funcionamento de cada tipo de porta, fornecer exemplos práticos e explicar o passo a passo de como utilizá-las em projetos.Portas AnalógicasAs portas analógicas do Arduino permitem a leitura de sinais analógicos, ou seja, valores variáveis em uma faixa contínua. O Arduino UNO, por exemplo, possui 6 portas analógicas, numeradas de A0 a A5. Cada porta analógica pode ler valores entre 0 e 5 volts e converter esses valores em números digitais de 10 bits (ou seja, entre 0 e 1023).Para utilizar uma porta analógica, siga estes passos: Conecte o componente que você deseja ler à porta analógica do Arduino. No código, utilize a função analogRead() seguida do número da porta analógica (por exemplo, analogRead(A0)) para ler o valor analógico.Aqui está um exemplo de código que lê um sensor de luz conectado à porta analógica A0 e imprime o valor lido no monitor serial:void setup() { Serial.begin(9600);}void loop() { int valorLido = analogRead(A0); Serial.println(valorLido); delay(1000);}Portas DigitaisAs portas digitais do Arduino permitem a leitura e a escrita de sinais digitais, ou seja, valores que podem ser apenas 0 (LOW) ou 1 (HIGH). O Arduino UNO possui 14 portas digitais, numeradas de 0 a 13.Para utilizar uma porta digital como entrada, siga estes passos: Conecte o componente que você deseja utilizar à porta digital do Arduino. No código, utilize a função pinMode() seguida do número da porta digital e defina-a como INPUT.Aqui está um exemplo de código que lê o estado de um botão conectado à porta digital 2 e acende um LED conectado à porta digital 3 com base no estado do botão:const int botaoPin = 2;const int ledPin = 3;void setup() { pinMode(botaoPin, INPUT); pinMode(ledPin, OUTPUT); Serial.begin(9600);}void loop() { int estadoBotao = digitalRead(botaoPin); if (estadoBotao == HIGH) { digitalWrite(ledPin, HIGH); Serial.println(\"Botão pressionado\"); } else { digitalWrite(ledPin, LOW); Serial.println(\"Botão não pressionado\"); } delay(100);}PWM (Modulação por Largura de Pulso)O PWM (Modulação por Largura de Pulso) é uma técnica utilizada para simular saídas analógicas em portas digitais do Arduino. Essa técnica envolve a variação do tempo em que um sinal está em nível alto (HIGH) em relação ao tempo total de um ciclo. Isso permite controlar a média de energia entregue a um componente, como um LED ou um motor, mesmo usando uma porta digital.Para utilizar PWM em uma porta digital do Arduino, siga estes passos: Conecte o componente que você deseja controlar (por exemplo, um LED) à porta digital do Arduino, com PWM, ela tem a marca ~. No código, utilize a função analogWrite() seguida do número da porta digital e um valor entre 0 e 255 para definir a intensidade do sinal PWM. Quanto maior o valor, maior será a média de energia entregue ao componente.Aqui está um exemplo de código que utiliza PWM para controlar a intensidade de um LED conectado à porta digital 9:const int ledPin = 9;void setup() { pinMode(ledPin, OUTPUT);}void loop() { for (int brilho = 0; brilho &lt;= 255; brilho++) { analogWrite(ledPin, brilho); delay(10); } for (int brilho = 255; brilho &gt;= 0; brilho--) { analogWrite(ledPin, brilho); delay(10); }}Neste exemplo, o LED aumenta gradualmente a intensidade de brilho de 0 a 255 e depois diminui de volta para 0, criando um efeito de fade-in e fade-out.PráticaVamos continuar com um exemplo prático de como utilizar um potenciômetro ligado a uma porta analógica do Arduino e um LED com um resistor conectado a uma porta digital PWM.Neste exemplo, vamos ler o valor do potenciômetro e utilizar esse valor para controlar a intensidade do brilho do LED. Quanto maior o valor lido do potenciômetro, maior será a intensidade do LED.Materiais necessários Arduino UNO Potenciômetro LED Resistor (recomendado: 220 ohms) JumpersMontagem Conecte o terminal central do potenciômetro a uma das portas analógicas do Arduino (por exemplo, A0). Conecte um dos terminais externos do potenciômetro ao GND (terra) do Arduino. Conecte o outro terminal externo do potenciômetro a 5V (alimentação) do Arduino. Conecte o LED ao Arduino: Conecte o terminal positivo (maior) do LED a uma porta digital PWM do Arduino (por exemplo, 9). Conecte o terminal negativo (menor) do LED a um resistor (por exemplo, 220 ohms). Conecte o outro terminal do resistor ao GND (terra) do Arduino. Códigoconst int potPin = A0;const int ledPin = 9;void setup() { pinMode(ledPin, OUTPUT); Serial.begin(9600);}void loop() { int valorPot = analogRead(potPin); int brilho = map(valorPot, 0, 1023, 0, 255); // Mapeia o valor lido para o intervalo de 0 a 255 analogWrite(ledPin, brilho); Serial.print(\"Valor do potenciômetro: \"); Serial.print(valorPot); Serial.print(\" | Brilho do LED: \"); Serial.println(brilho); delay(100);}Explicação do código Definimos as constantes potPin e ledPin para representar as portas analógica e digital PWM, respectivamente. No setup(), configuramos a porta do LED como saída (OUTPUT) e iniciamos a comunicação serial. No loop(), lemos o valor do potenciômetro usando analogRead(potPin), que retorna um valor entre 0 e 1023. Em seguida, usamos a função map() para mapear esse valor para o intervalo de 0 a 255, que corresponde à faixa de intensidade do PWM. Utilizamos analogWrite(ledPin, brilho) para ajustar a intensidade do LED com base no valor mapeado. Imprimimos os valores lidos do potenciômetro e a intensidade do LED no monitor serial para acompanhamento. Adicionamos um pequeno atraso (delay(100)) para evitar leituras muito rápidas e oscilações indesejadas.Com este exemplo, o LED terá sua intensidade de brilho controlada pelo potenciômetro. Conforme você gira o potenciômetro, a intensidade do LED irá variar proporcionalmente.ReferênciasEntradas analógicas do ArduinoArduino - Entradas e Saídas Digitais - Pinos digitaisCurso Arduíno EaD - Prática 6 - Entrada AnalógicaComo usar Portas Digitais e Analógicas no ARDUINOCircuit design Analogica com potenciometro e led - TinkercadCircuit design Potenciômetro/Analógica - TinkercadUsando os pinos digitais do ArduinoTutorials - Arduino Documentation" }, { "title": "Aplicativo VirtualPet com herança", "url": "/aulas/posts/aplicativo-virtualpet-com-heranca/", "categories": "DESENVOLVIMENTO, PROGRAMADOR", "tags": "Senac, programador, programação, diagramas, uml", "date": "2023-05-19 17:00:00 -0300", "snippet": "Uma das principais características e vantagens da OO é a possibilidade de reutilização de código. Uma das propriedades que as classes podem ter que permite este reúso é a herança.Assim como no mund...", "content": "Uma das principais características e vantagens da OO é a possibilidade de reutilização de código. Uma das propriedades que as classes podem ter que permite este reúso é a herança.Assim como no mundo real, as gerações posteriores agregam características e conhecimento das gerações anteriores, a OO prevê que uma classe possa “passar” suas características e comportamentos para outras classes por meio do recurso da herança.Baseado no exemplo do jogo Virtual PET para criar a simulação de um bicho de estimação virtual, imagine que fosse necessário implementar algumas características especiais para um grupo específico de animais doméstico como aves.Essa implementação seria a inserção dos atributos COR_PENA (literal) e VOA(lógico) e o método VOAR (método que receberá um número entre 0 e 100 para especificar a distância em metros que será percorrida pela ave, bem como retirará 0,5 caloria, para cada metro, se ela puder voar além de 3 metros do atributo força).Você poderá até se perguntar: não há outros bichos que voam? Sim, porém para ilustrar este exemplo, serão mencionados apenas animais que voam e são domésticos (apesar de algumas pessoas criarem morcegos, abelhas, etc.).A partir daí, a primeira menção será inserir imediatamente na classe ANIMAL os atributos e o método solicitados.Nesse caso, todos os animais passariam a ter essas características e esse método. Isso seria extremamente errado, pois um gato não possui COR_PENA e não pode VOAR.A outra possibilidade seria criar outra classe chamada AVE e “copiar” todos os atributos e métodos para ela, acrescentando os já solicitados.Nesse caso, apesar de parecer mais correto, haveria dois inconvenientes.Primeiro, a necessidade de codificar novamente uma outra classe com toda codificação.E o segundo, não haveria nenhuma ligação entre as classes. Isso faria com que qualquer alteração importante na classe Animal não fosse refletida na classe Ave.A herança entre classes resolveria esse problema, pois a Ave não deixou de pertencer à classe. Ela apenas terá a necessidade de especificar mais algumas características e ações.O sistema Virtual PET poderá ser confeccionado em uma ou mais classe, ou seja, se você tiver na classe Animal o método principal que gera a aplicação, dirá que essa classe é uma classe de definição e aplicação (possui as definições - atributos e métodos - e a aplicação - o método principal que tem a responsabilidade de executar o sistema).Porém, você poderá ter duas classes: Animal e Virtual PET, sendo a primeira uma classe de definição e a segunda de aplicação.Primeira possibilidadePrimeira possibilidade: três classes, duas de definição (ANIMAL e AVE) e uma de aplicação (VIRTUAL PET). Veja o exemplo a seguir:1P Diagrama de classes UMLAqui está o diagrama de classe UML representando as classes “ANIMAL”, “AVE” e “VIRTUAL_PET” com base no código fornecido:classDiagram class ANIMAL { - NOME : literal - CLASSE : literal - FAMILIA : literal - IDADE : numérico - CALORIA : numérico - FORCA : numérico - ESTADO : lógico + ANIMAL(N: literal, C: literal, F: literal) + ~ANIMAL() + INSERIR_NOME(N: literal) + INSERIR_CLASSE(C: literal) + INSERIR_FAMILIA(F: literal) + OBTER_NOME(): literal + OBTER_ESTADO(): literal + INSERIR_CLASSE(): literal + INSERIR_FAMILIA(): literal + COMER() + CORRER() + DORMIR() } class AVE { - COR_PENA : literal - VOA : lógico + AVE(NA: literal, CA: literal, FA: literal, CP: literal, V: lógico) + INSERIR_COR_PENA(CP: literal) + OBTER_COR_PENA(): literal + INSERIR_VOA(V: lógico) + OBTER_VOA(): lógico + VOAR(MTS: numérico) } class VIRTUAL_PET { - OPCAO : literal - ACAO : literal - N : literal - CL : literal - FM : literal - ANIMALVIRTUAL : ANIMAL - AVEVIRTUAL : AVE + VIRTUAL_PET() } ANIMAL &lt;|-- AVE VIRTUAL_PET --&gt; ANIMAL VIRTUAL_PET --&gt; AVEObserve que a classe VIRTUAL_PET é representada separadamente, mesmo que seja apenas uma coleção de variáveis e métodos relacionados. Os relacionamentos de herança e composição são mostrados corretamente no diagrama.1P Algoritmoclasse ANIMAL protegido NOME, CLASSE, FAMILIA : literal protegido IDADE,CALORIA,FORCA: numérico protegido ESTADO:lógico construtor ANIMAL (N, C, F: literal) NOME ← N CLASSE ← C FAMILIA ← F CALORIA ← 10 FORCA ← 10 ESTADO ← verdadeiro IDADE ← 0 fim-construtor destruidor ANIMAL ( ) ESTADO ← falso FORCA ← 0 escreva \"Morto!\" fim-destruidor método público INSERIR_NOME (N: literal) NOME ← N fim-método método público INSERIR_CLASSE (C: literal) CLASSE ← C fim-método método público INSERIR_FAMILIA (F: literal) FAMILIA ← F fim-método método público literal OBTER_NOME ( ) retorne NOME fim-método método público literal OBTER_ESTADO ( ) retorne ESTADO fim-método método público literal INSERIR_CLASSE ( ) retorne CLASSE fim-método método público literal INSERIR_FAMILIA ( ) retorne FAMILIA fim-método método público COMER ( ) se (ESTADO e FORCA &gt; 10) então CALORIA ← CALORIA + 20 FORCA ← FORCA - 10 senão se (ESTADO) então escreva \"O animal está morto e não pode comer!\" senão escreva \"O animal está exausto!Faça-o dormir um pouco!\" fim-se fim-se fim-método método público CORRER ( ) se (ESTADO e FORCA &gt; 10 e CALORIA &gt; 10 ) então CALORIA ← CALORIA - 10 FORCA ← FORCA - 10 senão se (ESTADO) então escreva \"O animal está morto e não pode correr!\" senão se (CALORIA &lt; 10) então escreva \"O animal está fraco!Faça-o comer!\" senão escreva \"O animal está exausto! Faça-o dormir!\" fim-se fim-método método público DORMIR ( ) se (ESTADO) então CALORIA ← CALORIA - 5 FORCA ← FORCA +20 senão escreva \"O animal está morto!\" fim-se fim-método.fim-classeclasse AVE herda_de ANIMALprivado COR_PENA: literalprivado VOA:lógicoconstrutor AVE (NA,CA,FA,CP,V:literal) super.ANIMAL (NA, CA, FA) COR_PENA ← CP VOA ← Vfim-construtormétodo público INSERIR_COR_PENA(CP:literal) COR_PENA ← CPfim-métodométodo público literal OBTER_COR_PENA( ) retorne COR_PENA fim-métodométodo público INSERIR_VOA(V:lógico) VOA ← Vfim-métodométodo público lógico OBTER_VOA( ) retorne VOA fim-métodométodo público VOAR ( MTS:numérico ) se (super.ESTADO e VOA e FORCA &gt; = 3 e CALORIA &gt; MTS*0,5) então CALORIA ← CALORIA - MTS*0,5 FORCA ← FORCA - 3 senão se (super.ESTADO) então escreva \"A ave está morta e não pode voar!\" senão se (não VOA) então escreva \"A ave não voa!\" senão escreva \"A ave está exausta! Faça-a dormir um pouco!\" fim-sefim-classeclasse VIRTUAL_PETinícioOPCAO,ACAO,N,CL,FM :literalANIMAL ANIMALVIRTUAL AVE AVEVIRTUAL escreva \"Você quer cuidar de uma ave ou outro animal? Digite 1 → Ave, 2 → Outro animal ou 0 → Encerrar\"leia OPCAOenquanto (OPCAO &lt;&gt; 0) façase (OPCAO = 1) então escreva \"Qual o nome da sua ave?\" leia N escreva \"Qual a classe da sua ave?\" leia CL escreva \"Qual a família da ave?\" leia FM escreva \"Qual a cor da pena da ave?\" leia CP escreva \"A sua ave voa?\" leia V AVEVIRTUAL ← novo AVE (N,CL,FM,CP,V) escreva \"Sua ave \",AVEVIRTUAL.OBTER_NOME( ), \"nasceu!\" senão escreva \"Qual o nome do seu animal?\" leia N escreva \"Qual a classe do seu animal?\" leia CL escreva \"Qual a família do seu animal?\" leia FM ANIMAL VIRTUAL ← ANIMAL(N,CL,FM) escreva \"Seu animal \",ANIMAL.OBTER_NOME( ), \"nasceu!\"fim-serepita se (OPCAO = 1) então se (ANIMAL VIRTUAL.OBTER_ESTADO( ) ) então escreva \"Digite a ação você quer ?\" escreva \"C → Comer, R → correr ou D → Dormir ou E → Encerrar\" leia ACAO senão ACAO ← \"MORTO\" fim-secaso ACAO seja \"C\" faça ANIMAL VIRTUAL.COMER( ) seja \"R\" faça ANIMAL VIRTUAL.CORRER( ) seja \"D\" faça ANIMAL VIRTUAL.DORMIR( ) seja \"E\" faça escreva \"Você está abandonando seu animal!\" seja \"MORTO\" faça escreva \"Seu animal morreu! Não há mais chance!\" senão escreva \"Ação inválida!\"fim-casosenão se (AVEVIRTUAL.OBTER_ESTADO( ) ) então escreva \"Digite a ação você quer ?\" escreva \"C ← Comer, R ← correr, V← Voar, D ← Dormir ou E ← Encerrar\" leia ACAOsenão ACAO ← \"E\"fim-secaso ACAO seja \"C\" faça AVEVIRTUAL.COMER( ) seja \"R\" faça AVEVIRTUAL.CORRER( ) seja \"V\" faça AVEVIRTUAL.VOAR ( ) seja \"D\" faça AVEVIRTUAL.DORMIR ( ) seja \"E\" faça escreva \"Você está abandonando seu animal!\" seja \"MORTO\" faça escreva \"Seu animal morreu! Não há mais chance!\" senão escreva \"Ação inválida!\"fim-casofim-seaté que (ACAO = \"E\") escreva \"Você quer cuidar de uma ave ou outro animal? Digite 1 → Ave, 2→ Outro animal ou 0→ Encerrar\" leia OPCAOfim-enquantofimfim-classeSegunda possibilidadeSegunda possibilidade: duas classes, uma somente de definição (ANIMAL) e outra contendo definição e aplicação (AVE). Como mostra o exemplo a seguir:2P diagrama de classesAqui está o diagrama de classes UML em formato Mermaid para as classes “ANIMAL” e “AVE”:classDiagram class ANIMAL { - NOME : literal - CLASSE : literal - FAMILIA : literal - IDADE : numérico - CALORIA : numérico - FORCA : numérico - ESTADO : lógico + ANIMAL(N: literal, C: literal, F: literal) + ~ANIMAL() + INSERIR_NOME(N: literal) + INSERIR_CLASSE(C: literal) + INSERIR_FAMILIA(F: literal) + OBTER_NOME(): literal + OBTER_ESTADO(): literal + INSERIR_CLASSE(): literal + INSERIR_FAMILIA(): literal + COMER() + CORRER() + DORMIR() } class AVE { - COR_PENA : literal - VOA : lógico + AVE(NA: literal, CA: literal, FA: literal, CP: literal, V: literal) + INSERIR_COR_PENA(CP: literal) + OBTER_COR_PENA(): literal + INSERIR_VOA(V: lógico) + OBTER_VOA(): lógico + VOAR(MTS: numérico) } ANIMAL &lt;|-- AVEEste é o diagrama de classes UML que representa a estrutura das classes “ANIMAL” e “AVE”. A classe “ANIMAL” contém os atributos NOME, CLASSE, FAMILIA, IDADE, CALORIA, FORCA e ESTADO, juntamente com os métodos construtor, destruidor e outros métodos como INSERIR_NOME, INSERIR_CLASSE, OBTER_NOME, COMER, CORRER e DORMIR.A classe “AVE” herda da classe “ANIMAL” e adiciona os atributos COR_PENA e VOA, juntamente com os métodos construtor, INSERIR_COR_PENA, OBTER_COR_PENA, INSERIR_VOA, OBTER_VOA e VOAR. A seta “ANIMAL &lt; – AVE” indica que a classe “AVE” herda da classe “ANIMAL”. 2P algoritmoclasse ANIMALprotegido NOME, CLASSE, FAMILIA : literalprotegido IDADE,CALORIA,FORCA: numéricoprotegido ESTADO:lógicoconstrutor ANIMAL (N, C, F: literal) NOME ← N CLASSE ← C FAMILIA ← F CALORIA ← 10 FORCA ← 10 ESTADO ← verdadeiro IDADE ← 0 fim-construtordestruidor ANIMAL ( ) ESTADO ← falso FORCA ← 0 escreva \"Morto!\"fim-destruidormétodo público INSERIR_NOME (N: literal) NOME ← Nfim-métodométodo público INSERIR_CLASSE (C: literal) CLASSE ← Cfim-métodométodo público INSERIR_FAMILIA (F: literal) FAMILIA ← Ffim-métodométodo público literal OBTER_NOME ( ) retorne NOME fim-métodométodo público literal OBTER_ESTADO ( ) retorne ESTADO fim-métodométodo público literal INSERIR_CLASSE ( ) retorne CLASSE fim-métodométodo público literal INSERIR_FAMILIA ( ) retorne FAMILIA fim-métodométodo público COMER ( ) se (ESTADO e FORCA &gt; 10) então CALORIA ← CALORIA + 20 FORCA ← FORCA - 10 senão se (ESTADO) então escreva \"O animal está morto e não pode comer!\" senão escreva \"O animal está exausto!Faça-o dormir um pouco!\" fim-se fim-sefim-métodométodo público CORRER ( ) se (ESTADO e FORCA &gt; 10 e CALORIA &gt; 10 ) então CALORIA ← CALORIA - 10 FORCA ← FORCA - 10 senão se (ESTADO) então escreva \"O animal está morto e não pode correr!\" senão se (CALORIA &lt; 10) então escreva \"O animal está fraco! Faça-o comer!\" senão escreva \"O animal está exausto! Faça-o dormir!\" fim-se fim-sefim-métodométodo público DORMIR ( ) se (ESTADO) então CALORIA ← CALORIA - 5 FORCA ← FORCA +20 senão escreva \"O animal está morto!\" fim-se fim-métodofim-classeclasse AVE herda_de ANIMAL privado COR_PENA: literalprivado VOA:lógicoconstrutor AVE (NA,CA,FA,CP,V:literal) super.ANIMAL (NA, CA, FA) COR_PENA ← CP VOA ← V fim-construtormétodo público INSERIR_COR_PENA(CP:literal) COR_PENA ← CP fim-métodométodo público literal OBTER_COR_PENA( ) retorne COR_PENA fim-métodométodo público INSERIR_VOA(V:lógico) VOA ← V fim-métodométodo público lógico OBTER_VOA( ) retorne VOA fim-métodométodo público VOAR ( MTS:numérico ) se (super.ESTADO e VOA e FORCA &gt; = 3 e CALORIA &gt; MTS*0,5) então CALORIA ← CALORIA - MTS*0,5 FORCA ← FORCA - 3 senão se (super.ESTADO) então escreva \"A ave está morta e não pode voar!\" senão se (não VOA) então escreva \"A ave não voa!\" senão escreva \"A ave está exausta! Faça-a dormir um pouco!\" fim-se fim-sefim-métodoinícioOPCAO,ACAO,N,CL,FM :literalANIMAL ANIMAL VIRTUAL AVE AVEVIRTUAL escreva \"Você quer cuidar de uma ave ou outro animal? Digite 1 → Ave, 2 → Outro animal ou 0 → Encerrar\"leia OPCAOenquanto (OPCAO &lt;&gt; 0) faça se (OPCAO = 1) então escreva \"Qual o nome da sua ave?\" leia N escreva \"Qual a classe da sua ave?\" leia CL escreva \"Qual a família da ave?\" leia FM escreva \"Qual a cor da pena da ave?\" leia CP escreva \"A sua ave voa?\" leia V AVEVIRTUAL ← novo AVE (N,CL,FM,CP,V) escreva \"Sua ave \",AVEVIRTUAL.OBTER_NOME( ), \"nasceu!\" senão escreva \"Qual o nome do seu animal?\" leia N escreva \"Qual a classe do seu animal?\" leia CL escreva \"Qual a família do seu animal?\" leia FM ANIMALVIRTUAL ← ANIMAL(N,CL,FM) escreva \"Seu animal \",ANIMAL.OBTER_NOME( ), \"nasceu!\" fim-serepita se (OPCAO = 1) então se (ANIMALVIRTUAL.OBTER_ESTADO( ) ) então escreva \"Digite a ação você quer ?\" escreva \"C → Comer, R → correr ou D → Dormir ou E → Encerrar\" leia ACAO senão ACAO ← \"MORTO\"fim-secaso ACAO seja \"C\" faça ANIMALVIRTUAL.COMER( ) seja \"R\" faça ANIMALVIRTUAL.CORRER( ) seja \"D\" faça ANIMALVIRTUAL.DORMIR ( ) seja \"E\" faça escreva \"Você está abandonando seu animal!\" seja \"MORTO\" faça escreva \"Seu animal morreu! Não há mais chance!\" senão escreva \"Ação inválida!\"fim-casosenão se (AVEVIRTUAL.OBTER_ESTADO( ) ) então escreva \"Digite a ação você quer ?\" escreva \"C → Comer, R → correr, V → Voar, D → Dormir ou E → Encerrar\" leia ACAOsenão ACAO ← \"E\"fim-secaso ACAO seja \"C\" faça AVEVIRTUAL.COMER( ) seja \"R\" faça AVEVIRTUAL.CORRER( ) seja \"V\" faça AVEVIRTUAL.VOAR ( ) seja \"D\" faça AVEVIRTUAL.DORMIR ( ) seja \"E\" faça escreva \"Você está abandonando seu animal!\" seja \"MORTO\" faça escreva \"Seu animal morreu! Não há mais chance!\" senão escreva \"Ação inválida!\"fim-casofim-seaté que (ACAO = \"E\") escreva \"Você quer cuidar de uma ave ou outro animal? Digite 1 → Ave, 2 → Outro animal ou 0 → Encerrar\" leia OPCAOfim-enquantofimfim-classeImplementaçãoA implementação da primeira possibilidade, usando 3 classes está no repositório do Github: github.com/jocile/virtualpetReferênciasGitHub VirtualPetXavier, Gley Fabiano Cardoso - Lógica de programação cap. 10, E-book. Disponível em: https://bibliotecadigitalsenac.com.br/?from=%3FcontentInfo%3D1306#/legacy/epub/1306. Acesso em 19/05/2023" }, { "title": "Introdução ao gerenciamento de requisitos", "url": "/aulas/posts/introducao-ao-gerenciamento-de-requisitos/", "categories": "DESENVOLVIMENTO, PROGRAMADOR", "tags": "Senac, programador, programação, diagramas, uml", "date": "2023-05-18 17:00:00 -0300", "snippet": "O gerenciamento de requisitos é uma parte fundamental do desenvolvimento de software, pois garante que as necessidades dos clientes e usuários sejam adequadamente capturadas e traduzidas em funcion...", "content": "O gerenciamento de requisitos é uma parte fundamental do desenvolvimento de software, pois garante que as necessidades dos clientes e usuários sejam adequadamente capturadas e traduzidas em funcionalidades do sistema.Levantamento de RequisitosO levantamento de requisitos é a fase inicial e uma das etapas mais importantes do desenvolvimento de um sistema. É nessa etapa que buscamos compreender o que o cliente realmente precisa para o software, levando em consideração as regras dos processos de negócio. Antes de iniciar um projeto de software, é essencial saber quais requisitos o software deve atender. O objetivo principal do levantamento de requisitos é garantir que os usuários e os desenvolvedores tenham a mesma visão do problema a ser resolvido.O que é um requisito?Um requisito é uma condição ou capacidade que um sistema ou componente deve alcançar ou possuir para satisfazer um contrato, padrão ou especificação formalmente estabelecida. Em outras palavras, é algo que o software deve oferecer ou uma função que o software deve executar. Identificar requisitos envolve obter informações sobre o que o sistema deve ter, geralmente trabalhando em conjunto com os stakeholders e especialistas da área de negócio.Importância do levantamento de requisitosO levantamento de requisitos é fundamental para evitar problemas durante o desenvolvimento do software. Alguns problemas clássicos que podem ser causados por uma análise malfeita ou incompleta incluem: Comunicação inadequada: Uma comunicação deficiente entre o cliente e o analista pode levar a informações insuficientes ou mal interpretadas, resultando em requisitos incorretos. Mudanças nos requisitos: Os requisitos podem mudar ao longo do tempo, e é necessário gerenciar essas alterações adequadamente para garantir que o software seja desenvolvido de acordo com as necessidades atuais. Falta de conhecimento do domínio: É importante compreender o domínio de negócio no qual o software será aplicado. Caso os desenvolvedores não tenham conhecimento suficiente sobre o domínio, pode ser difícil desenvolver um software adequado e alinhado às necessidades dos usuários.Ao realizar um levantamento de requisitos eficiente, podemos obter um documento que lista os requisitos que o sistema deverá atender. Esse documento pode ser escrito em linguagem informal ou em forma de casos de uso, tornando mais fácil para pessoas não técnicas compreenderem os requisitos.Tipos de requisitosExistem diferentes tipos de requisitos no processo de análise e desenvolvimento de software. Vou citar alguns exemplos dos principais tipos de requisitos: Requisitos Funcionais: São os requisitos que descrevem as funções e as operações específicas que o sistema deve realizar. Eles descrevem o comportamento esperado do software e como ele deve responder a diferentes entradas. Exemplo: “O sistema deve permitir que os usuários façam login usando nome de usuário e senha.” Requisitos Não Funcionais: São os requisitos que descrevem as características e propriedades do sistema, além das suas funcionalidades. Eles não estão relacionados diretamente às funções do software, mas afetam a sua qualidade e desempenho. Exemplo: “O sistema deve ser capaz de suportar até 1000 usuários simultaneamente.” Requisitos de Usuário: São os requisitos que representam as necessidades, expectativas e restrições dos usuários finais do sistema. Eles descrevem como o sistema deve ser do ponto de vista dos usuários. Exemplo: “O sistema deve ter uma interface intuitiva e fácil de usar.” Requisitos de Sistema: São os requisitos que descrevem as características e comportamentos do sistema como um todo, incluindo componentes de hardware, software e rede. Exemplo: “O sistema deve ser compatível com o sistema operacional Windows 10.” Requisitos de Domínio: São os requisitos que se referem a regras, políticas e restrições específicas do domínio de negócio em que o sistema será aplicado. Eles refletem as particularidades e necessidades únicas do setor ou da organização. Exemplo: “O sistema deve seguir as regulamentações de segurança da indústria bancária.” Requisitos de Desempenho: São os requisitos que definem as metas de desempenho do sistema, como tempo de resposta, capacidade de processamento e uso eficiente de recursos. Exemplo: “O sistema deve fornecer resultados de pesquisa em menos de 1 segundo.” Requisitos de Segurança: São os requisitos que descrevem as medidas de segurança que o sistema deve implementar para proteger os dados e garantir a privacidade dos usuários. Exemplo: “O sistema deve criptografar os dados confidenciais do usuário durante a transmissão.” Esses são apenas alguns exemplos dos tipos de requisitos de análise de desenvolvimento de software. É importante identificar e documentar corretamente os requisitos para garantir que o sistema atenda às necessidades dos usuários e às expectativas dos stakeholders.Diagramas UML de requisitosAqui estão alguns exemplos de diagramas que podem ser usados para representar requisitos usando a linguagem Mermaid: Diagrama de Caso de Uso:graph LR A[Usuário] -- Realiza --&gt; B(Caso de Uso) B -- Descreve --&gt; C{Requisitos}Neste diagrama, o caso de uso representa uma interação entre um usuário e o sistema, descrevendo a funcionalidade que o sistema deve fornecer. Os requisitos estão associados ao caso de uso, indicando quais requisitos estão relacionados a ele. Diagrama de Fluxo de Dados:graph TD A[Entrada] --&gt; B(Processo) B --&gt; C[Saída] C --&gt; D{Requisitos}Neste diagrama, as setas representam o fluxo de dados no sistema, mostrando a entrada, o processamento e a saída dos dados. Os requisitos estão associados ao processo, indicando quais requisitos estão envolvidos no fluxo de dados. Diagrama de Sequência:sequenceDiagram participant U as Usuário participant S as Sistema U -&gt;&gt; S: Realiza Ação S -&gt;&gt; S: Processa Ação S --&gt;&gt; U: Retorna Resultado Note right of S: {Requisitos}Neste diagrama, a interação entre o usuário e o sistema é representada em uma sequência de mensagens. Os requisitos são indicados por uma nota associada ao sistema, descrevendo quais requisitos estão envolvidos nessa sequência. Esses são apenas alguns exemplos de diagramas que podem ser usados para representar requisitos usando a linguagem Mermaid. A escolha do diagrama depende do contexto e da necessidade específica de representação dos requisitos do sistema. Lembre-se de adaptar os exemplos de acordo com as suas necessidades e especificações do seu projeto.adaptar os exemplos de acordo com as suas necessidades e especificações do seu projeto.Exemplo com sistema de bibliotecaAqui está um exemplo básico de como um projeto de gerenciamento de requisitos para um sistema de empréstimo de livros de uma biblioteca pode ser estruturado: Descrição do Sistema: Nome do sistema: Sistema de Empréstimo de Livros da Biblioteca Objetivo: Permitir que os usuários da biblioteca realizem empréstimos de livros de forma eficiente e organizada. Partes Interessadas: Bibliotecários: Responsáveis por administrar o sistema e gerenciar os empréstimos de livros. Usuários da Biblioteca: Pessoas que desejam emprestar livros da biblioteca. Escopo: Funcionalidades Iniciais: Registro de usuários da biblioteca. Registro de livros no acervo da biblioteca. Registro de empréstimos de livros. Consulta de disponibilidade de livros. Renovação e devolução de livros emprestados. Requisitos Funcionais: RF1: Os usuários devem ser capazes de se registrar no sistema fornecendo informações pessoais, como nome, endereço e número de identificação. RF2: Os bibliotecários devem poder cadastrar livros no sistema, incluindo informações como título, autor, ano de publicação e número de exemplares disponíveis. RF3: Os usuários devem poder solicitar empréstimos de livros disponíveis no sistema, fornecendo o número de identificação do usuário e o código do livro. RF4: O sistema deve permitir que os bibliotecários gerenciem os empréstimos, registrando as informações do empréstimo, como data de retirada e data de devolução esperada. RF5: Os usuários devem poder consultar a disponibilidade de um livro específico no sistema. RF6: O sistema deve permitir que os usuários renovem ou devolvam os livros emprestados. Requisitos Não Funcionais: RNF1: O sistema deve ter uma interface intuitiva e fácil de usar para os usuários. RNF2: O sistema deve ser capaz de lidar com um grande número de usuários simultâneos sem comprometer o desempenho. RNF3: O sistema deve ser seguro, protegendo as informações pessoais dos usuários. RNF4: O sistema deve ser confiável, garantindo que as transações sejam registradas corretamente e que nenhum livro seja emprestado indevidamente. Rastreabilidade de Requisitos: Mapear cada requisito funcional e não funcional para os casos de uso relevantes, diagramas ou documentação associada. Controle de Mudanças: Estabelecer um processo para solicitar, avaliar e aprovar mudanças nos requisitos do sistema, garantindo que todas as alterações sejam adequadamente documentadas e comunicadas. Lembre-se de que este é apenas um exemplo básico de como um projeto de gerenciamento de requisitos para um sistema de empréstimo de livros de uma biblioteca pode ser estruturado. Na prática, o projeto de gerenciamento de requisitos pode ser mais detalhado, incluindoExemplo com diagramas UMLAqui estão alguns exemplos de diagramas UML (Unified Modeling Language) no formato Mermaid que podem ser utilizados no projeto de gerenciamento de requisitos de um sistema de empréstimo de livros de uma biblioteca: Diagrama de Casos de Uso:graph LR A[Usuário] -- Realiza empréstimo --&gt; B(Sistema de Empréstimo de Livros) B -- Consulta disponibilidade --&gt; C(Banco de Dados) B -- Renova/Devolve livro --&gt; C B -- Cadastra livro --&gt; C B -- Cadastra usuário --&gt; C Diagrama de Classes:classDiagram class Usuario { - id: int - nome: string - endereco: string - registrar() } class Livro { - id: int - titulo: string - autor: string - anoPublicacao: int - numExemplares: int - cadastrar() } class Emprestimo { - id: int - dataRetirada: date - dataDevolucao: date - usuario: Usuario - livro: Livro - registrar() } class SistemaEmprestimo { - usuarios: list&lt;Usuario&gt; - livros: list&lt;Livro&gt; - emprestimos: list&lt;Emprestimo&gt; - consultarDisponibilidade(livro: Livro): bool - renovarDevolucaoLivro(emprestimo: Emprestimo) } Usuario \"1\" -- \"0..*\" Emprestimo Livro \"1\" -- \"0..*\" Emprestimo SistemaEmprestimo \"1\" *-- \"0..*\" Usuario SistemaEmprestimo \"1\" *-- \"0..*\" Livro SistemaEmprestimo \"1\" *-- \"0..*\" Emprestimo Diagrama de Sequência (Realização de Empréstimo):sequenceDiagram participant User as Usuário participant System as Sistema de Empréstimo participant Database as Banco de Dados User -&gt;&gt; System: Realiza empréstimo System -&gt;&gt; Database: Consulta disponibilidade Database --&gt;&gt; System: Disponibilidade do livro alt Livro disponível System -&gt;&gt; Database: Registrar empréstimo Database --&gt;&gt; System: Empréstimo registrado System -&gt;&gt; User: Empréstimo realizado com sucesso else Livro indisponível System -&gt;&gt; User: Livro não está disponível para empréstimo end Esses são apenas exemplos básicos de diagramas UML que podem ser usados no projeto de gerenciamento de requisitos para um sistema de empréstimo de livros de uma biblioteca. Você pode adaptar e expandir esses diagramas de acordo com os requisitos e funcionalidades específicas do sistema.Referências Requisitos Funcionais, Não Funcionais e De Domínio Editor de diagramas Mermaid Livro restrito da biblioteca Senac - Análise de sistemas - Henrique Pontes Gonçalves de Oliveira - capítulos 5 e 7" }, { "title": "Controle de versões com Git e GitHub", "url": "/aulas/posts/controle-de-versoes-com-git-e-github/", "categories": "DESENVOLVIMENTO, PROGRAMADOR", "tags": "Senac, programador, programação, git, github", "date": "2023-05-17 17:00:00 -0300", "snippet": "O Git e o GitHub são ferramentas essenciais para o controle de versão e colaboração no desenvolvimento de software. O Git é um sistema de controle de versão distribuído, enquanto o GitHub é uma pla...", "content": "O Git e o GitHub são ferramentas essenciais para o controle de versão e colaboração no desenvolvimento de software. O Git é um sistema de controle de versão distribuído, enquanto o GitHub é uma plataforma baseada na web que permite hospedar e compartilhar projetos Git. Neste artigo, vamos explorar como usar o Git e o GitHub em um ambiente de desenvolvimento.Usando o GitPasso 1: Instalação do Git Acesse o site oficial do Git em https://git-scm.com/. Faça o download da versão compatível com o seu sistema operacional (Windows, macOS, Linux) e execute o instalador. Siga as instruções do instalador para concluir a instalação do Git.Passo 2: Configuração inicial do Git Abra o terminal ou prompt de comando. Execute o seguinte comando para configurar o seu nome de usuário:git config --global user.name \"Seu Nome\" Execute o seguinte comando para configurar o seu endereço de e-mail:git config --global user.email \"seuemail@example.com\" Opcionalmente, você pode configurar outras opções, como a cor da saída do Git:git config --global color.ui autoPasso 3: Inicialização de um repositório Git Crie uma nova pasta para o seu projeto. Abra o terminal ou prompt de comando e navegue até a pasta do projeto usando o comando cd. Execute o seguinte comando para inicializar um repositório Git na pasta:git initPasso 4: Adição e confirmação de alterações Coloque os arquivos do seu projeto na pasta do repositório Git. Execute o seguinte comando para ver o status das alterações:git status Utilize o comando git add para adicionar os arquivos ao próximo commit:git add arquivo1.txt arquivo2.txtou para adicionar todos os arquivos.git add . Execute o seguinte comando para confirmar as alterações:git commit -m \"Mensagem do commit\" Para visualizar as configurações execute o comando list:git config --list No Windows: marque para visualizar as extensões e os arquivos ocultos, em opções do explorador de arquivos.janela de configuração da visualização do explorador do WindowsPasso 5: Criação e utilização de branches Execute o seguinte comando para criar uma nova branch:git branch nome-da-branch Troque para a nova branch usando o comando git checkout:git checkout nome-da-branch Realize as alterações necessárias nos arquivos. Adicione e confirme as alterações como explicado anteriormente. Para mesclar a branch com a branch principal (geralmente chamada de main ou master), troque para a branch principal e execute o comando git merge:git checkout maingit merge nome-da-branchUsando o GithubPasso 6: Uso do GitHub Acesse o site do GitHub em https://github.com/ e crie uma conta, caso ainda não tenha. Crie um novo repositório clicando no botão “New” ou “Novo”. Siga as instruções para criar um repositório remoto no GitHub. No terminal ou prompt de comando, adicione o repositório remoto ao seu repositório local usando o seguinte comando:git remote add origin URL-do-repositorio-remoto Envie as alterações locais para o repositório remoto usando o comando git push:Substitua main pelo nome da branch principal, se necessário.git push -u origin mainAgora você está pronto para começar a usar o Git e o GitHub em seus projetos de desenvolvimento de software. Lembre-se de consultar a documentação oficial do Git e do GitHub para obter mais informações sobre os recursos avançados e práticas recomendadas.Usando o GitHub desktopO GitHub Desktop é uma ferramenta gráfica que facilita o uso do GitHub para controle de versão e colaboração em projetos. Aqui está um guia básico sobre como usar o GitHub Desktop: Instalação: Baixe e instale o GitHub Desktop em seu computador a partir do site oficial do GitHub: desktop.github.com. Configuração inicial: Abra o GitHub Desktop e faça login com sua conta do GitHub. Caso não tenha uma conta do GitHub, crie uma antes de prosseguir. Clonando um repositório: Clique no botão “Clone a repository” (Clonar um repositório) na página inicial do GitHub Desktop. Escolha o repositório que deseja clonar da lista de repositórios disponíveis no GitHub. Selecione o local onde deseja salvar o repositório clonado em seu computador. Trabalhando em um repositório: Depois de clonar um repositório, você poderá ver os arquivos e as alterações pendentes no painel do GitHub Desktop. Para fazer alterações, adicione, modifique ou exclua arquivos em seu computador usando sua ferramenta de preferência (como um editor de código). Enviando alterações: No painel do GitHub Desktop, você verá as alterações que fez nos arquivos do repositório. Selecione as alterações que deseja enviar ao repositório. Adicione uma descrição opcional para descrever as alterações. Clique no botão “Commit to main” (Enviar para o principal) para confirmar suas alterações localmente. Sincronizando com o repositório remoto: Depois de confirmar suas alterações localmente, você precisará enviá-las para o repositório remoto. Clique no botão “Push origin” (Enviar origem) no canto superior direito do GitHub Desktop. Isso enviará suas alterações para o repositório remoto no GitHub. Essas são apenas as etapas básicas para começar a usar o GitHub Desktop. A ferramenta possui mais recursos, como trabalhar com branches, resolver conflitos, visualizar histórico de alterações e colaborar com outros usuários. Recomendo explorar a documentação oficial do GitHub Desktop para obter mais informações sobre recursos avançados e funcionalidades adicionais.Utilizando o git e gihub no NebeansPara utilizar o Git e o GitHub com a IDE NetBeans, você precisa primeiro configurar o Git no seu ambiente e, em seguida, integrá-lo ao NetBeans. Aqui está um guia passo a passo sobre como fazer isso:Passo 1: Instalação e configuração do Git Baixe e instale o Git no seu computador, seguindo as instruções do site oficial: https://git-scm.com/. Abra o terminal ou prompt de comando e configure seu nome de usuário Git com o seguinte comando:git config --global user.name \"Seu Nome\" Configure seu endereço de e-mail Git com o seguinte comando:git config --global user.email \"seuemail@example.com\"Passo 2: Clonando um repositório do GitHub No NetBeans, vá para “Equipe” (Team) e escolha “Git” &gt; “Clonar” (Clone). Na caixa de diálogo “Clonar Repositório”, insira a URL do repositório do GitHub que você deseja clonar. Escolha o diretório local onde você deseja clonar o repositório. Selecione a branch desejada. Clique em “Finalizar” (Finish) para iniciar o processo de clonagem. Após a conclusão, o repositório será clonado para o diretório local especificado.Passo 3: Gerenciando e realizando alterações No NetBeans, você verá o painel “Equipe” (Team) no lado esquerdo da IDE. Aqui você pode ver as alterações, histórico e outras operações relacionadas ao Git. Para realizar alterações, faça modificações nos arquivos do projeto. No painel “Equipe” (Team), você pode ver as alterações detectadas. Clique com o botão direito nas alterações e escolha “Adicionar” (Add) para adicioná-las ao próximo commit. Após adicionar as alterações, clique com o botão direito no projeto e escolha “Commit” para confirmar as alterações. No diálogo de confirmação, insira uma mensagem de commit e clique em “Confirmar” (Commit) para salvar as alterações localmente. Você pode usar outras operações do Git, como criar e alternar entre branches, mesclar branches, etc., por meio do painel “Equipe” (Team).Passo 4: Enviando alterações para o GitHub Após realizar os commits localmente, você pode enviar suas alterações para o repositório remoto no GitHub. No painel “Equipe” (Team), clique com o botão direito no projeto e escolha “Git” &gt; “Enviar” (Push). Selecione a branch que deseja enviar para o repositório remoto e clique em “Próximo” (Next). Verifique as alterações e clique em “Próximo” (Next). Insira suas credenciais do GitHub, se solicitado. Clique em “Finalizar” (Finish) para enviar as alterações para o repositório remoto.Agora você pode usar o Git e o GitHub diretamente do NetBeans para gerenciar seus projetos de forma eficiente. Lembre-se de sincronizar suas alterações regularmente e realizar os commits com mensagens descritivas para manter um histórico claro do seu projeto.Referências Comandos do Git Livro do Git" }, { "title": "Aplicação cadastro de alunos com interface gráfica", "url": "/aulas/posts/aplicacao-cadastro-de-alunos-com-interface-grafica/", "categories": "DESENVOLVIMENTO, PROGRAMADOR", "tags": "Senac, programador, programação, gui, java, uml, diagrama", "date": "2023-05-16 17:00:00 -0300", "snippet": "Criar um aplicativo em Java que represente um sistema de cadastro de alunos.Fase 4 interface gráficaMonte o algoritmo de cadastramento de alunos utilizando a estrutura de registros. Represente o al...", "content": "Criar um aplicativo em Java que represente um sistema de cadastro de alunos.Fase 4 interface gráficaMonte o algoritmo de cadastramento de alunos utilizando a estrutura de registros. Represente o algoritmo em pseudocódigo, e o código em java para fazer um formulário em uma gui swing, salvando em arquivo texto.Segue abaixo o algoritmo de cadastramento de alunos utilizando a estrutura de registros, seguido do código em Java para criar um formulário em uma GUI Swing e salvar as informações em um arquivo de texto:Pseudocódigo: Definir a estrutura de registro para o aluno, contendo os campos nome, idade, matrícula e curso. Inicializar as variáveis de entrada nome, idade, matrícula e curso. Criar um formulário com campos de entrada para nome, idade, matrícula e curso. Ler as informações de entrada do usuário e armazená-las nas variáveis correspondentes. Criar um objeto do tipo Aluno com as informações armazenadas nas variáveis. Escrever as informações do objeto Aluno em um arquivo de texto. Exibir uma mensagem de confirmação para o usuário. Desafio: Para refatorar o algoritmo anterior de cadastramento de alunos utilizando a estrutura de registros e criar um formulário em uma GUI Swing para salvar as informações em um arquivo de texto, é necessário utilizar as bibliotecas Java Swing e Java I/O.import javax.swing.*;import java.awt.*;import java.awt.event.*;import java.io.FileWriter;import java.io.IOException;public class CadastroalunosGUI extends JFrame { private JTextField nomeField, idadeField, matriculaField, cursoField; public CadastroalunosGUI() { setTitle(\"Cadastro de alunos\"); setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE); setSize(400, 200); setLocationRelativeTo(null); JPanel panel = new JPanel(); panel.setLayout(new GridLayout(5, 2)); panel.add(new JLabel(\"Nome:\")); nomeField = new JTextField(); panel.add(nomeField); panel.add(new JLabel(\"Idade:\")); idadeField = new JTextField(); panel.add(idadeField); panel.add(new JLabel(\"Matrícula:\")); matriculaField = new JTextField(); panel.add(matriculaField); panel.add(new JLabel(\"Curso:\")); cursoField = new JTextField(); panel.add(cursoField); JButton cadastrarButton = new JButton(\"Cadastrar\"); cadastrarButton.addActionListener(new ActionListener() { public void actionPerformed(ActionEvent e) { cadastraraluno(); } }); panel.add(new JLabel()); panel.add(cadastrarButton); add(panel); setVisible(true); } private void cadastraraluno() { String nome = nomeField.getText(); int idade = Integer.parseInt(idadeField.getText()); int matricula = Integer.parseInt(matriculaField.getText()); String curso = cursoField.getText(); aluno aluno = new aluno(nome, idade, matricula, curso); salvaraluno(aluno); JOptionPane.showMessageDialog(this, \"aluno cadastrado com sucesso!\"); // Limpar campos do formulário nomeField.setText(\"\"); idadeField.setText(\"\"); matriculaField.setText(\"\"); cursoField.setText(\"\"); } private void salvaraluno(aluno aluno) { try (FileWriter writer = new FileWriter(\"alunos.txt\", true)) { String linha = aluno.nome + \";\" + aluno.idade + \";\" + aluno.matricula + \";\" + aluno.curso + \"\\\\n\"; writer.write(linha); } catch (IOException e) { e.printStackTrace(); } } public static void main(String[] args) { SwingUtilities.invokeLater(new Runnable() { public void run() { new CadastroalunosGUI(); } }); }}class aluno { public String nome; public int idade, matricula; public String curso; public aluno(String nome, int idade, int matricula, String curso) { this.nome = nome; this.idade = idade; this.matricula = matricula; this.curso = curso; }}Fase 5 salvando em arquivoAdicionar uma função no código que permitirá salvar os dados dos alunos em um arquivo de texto.import javax.swing.*;import java.awt.*;import java.awt.event.*;import java.io.FileWriter;import java.io.IOException;public class CadastroalunosGUI extends JFrame { private JTextField nomeField, idadeField, matriculaField, cursoField; public CadastroalunosGUI() { setTitle(\"Cadastro de alunos\"); setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE); setSize(400, 200); setLocationRelativeTo(null); JPanel panel = new JPanel(); panel.setLayout(new GridLayout(5, 2)); panel.add(new JLabel(\"Nome:\")); nomeField = new JTextField(); panel.add(nomeField); panel.add(new JLabel(\"Idade:\")); idadeField = new JTextField(); panel.add(idadeField); panel.add(new JLabel(\"Matrícula:\")); matriculaField = new JTextField(); panel.add(matriculaField); panel.add(new JLabel(\"Curso:\")); cursoField = new JTextField(); panel.add(cursoField); JButton cadastrarButton = new JButton(\"Cadastrar\"); cadastrarButton.addActionListener(new ActionListener() { public void actionPerformed(ActionEvent e) { cadastraraluno(); } }); panel.add(new JLabel()); panel.add(cadastrarButton); add(panel); setVisible(true); } private void cadastraraluno() { String nome = nomeField.getText(); int idade = Integer.parseInt(idadeField.getText()); int matricula = Integer.parseInt(matriculaField.getText()); String curso = cursoField.getText(); aluno aluno = new aluno(nome, idade, matricula, curso); salvaraluno(aluno); JOptionPane.showMessageDialog(this, \"aluno cadastrado com sucesso!\"); // Limpar campos do formulário nomeField.setText(\"\"); idadeField.setText(\"\"); matriculaField.setText(\"\"); cursoField.setText(\"\"); } private void salvaraluno(aluno aluno) { try (FileWriter writer = new FileWriter(\"alunos.txt\", true)) { String linha = aluno.nome + \";\" + aluno.idade + \";\" + aluno.matricula + \";\" + aluno.curso + \"\\\\n\"; writer.write(linha); } catch (IOException e) { e.printStackTrace(); } } public static void main(String[] args) { SwingUtilities.invokeLater(new Runnable() { public void run() { new CadastroalunosGUI(); } }); }}class aluno { public String nome; public int idade, matricula; public String curso; public aluno(String nome, int idade, int matricula, String curso) { this.nome = nome; this.idade = idade; this.matricula = matricula; this.curso = curso; }}Desafio: criar o botão salvar que usa a função salvar Aluno.Adicionando o botão salvarAdicionar um botão “Salvar” à interface gráfica que usará a função salvarAluno() para salvar os dados do aluno em uma nova linha no arquivo de texto. Aqui está o código atualizado:import javax.swing.*;import java.awt.*;import java.awt.event.*;import java.io.FileWriter;import java.io.IOException;public class CadastroAlunosGUI extends JFrame { private JTextField nomeField, idadeField, matriculaField, cursoField; public CadastroAlunosGUI() { setTitle(\"Cadastro de Alunos\"); setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE); setSize(400, 200); setLocationRelativeTo(null); JPanel panel = new JPanel(); panel.setLayout(new GridLayout(5, 2)); panel.add(new JLabel(\"Nome:\")); nomeField = new JTextField(); panel.add(nomeField); panel.add(new JLabel(\"Idade:\")); idadeField = new JTextField(); panel.add(idadeField); panel.add(new JLabel(\"Matrícula:\")); matriculaField = new JTextField(); panel.add(matriculaField); panel.add(new JLabel(\"Curso:\")); cursoField = new JTextField(); panel.add(cursoField); JButton cadastrarButton = new JButton(\"Cadastrar\"); cadastrarButton.addActionListener(new ActionListener() { public void actionPerformed(ActionEvent e) { cadastrarAluno(); } }); panel.add(new JLabel()); panel.add(cadastrarButton); JButton salvarButton = new JButton(\"Salvar\"); salvarButton.addActionListener(new ActionListener() { public void actionPerformed(ActionEvent e) { salvarAluno(); } }); panel.add(new JLabel()); panel.add(salvarButton); add(panel); setVisible(true); } private void cadastrarAluno() { String nome = nomeField.getText(); int idade = Integer.parseInt(idadeField.getText()); int matricula = Integer.parseInt(matriculaField.getText()); String curso = cursoField.getText(); Aluno aluno = new Aluno(nome, idade, matricula, curso); salvarAluno(aluno); JOptionPane.showMessageDialog(this, \"Aluno cadastrado com sucesso!\"); // Limpar campos do formulário nomeField.setText(\"\"); idadeField.setText(\"\"); matriculaField.setText(\"\"); cursoField.setText(\"\"); } private void salvarAluno() { String nome = nomeField.getText(); int idade = Integer.parseInt(idadeField.getText()); int matricula = Integer.parseInt(matriculaField.getText()); String curso = cursoField.getText(); Aluno aluno = new Aluno(nome, idade, matricula, curso); salvarAluno(aluno); JOptionPane.showMessageDialog(this, \"Aluno salvo com sucesso!\"); // Limpar campos do formulário nomeField.setText(\"\"); idadeField.setText(\"\"); matriculaField.setText(\"\"); cursoField.setText(\"\"); } private void salvarAluno(Aluno aluno) { try (FileWriter writer = new FileWriter(\"alunos.txt\", true)) { String linha = aluno.nome + \";\" + aluno.idade + \";\" + aluno.matricula + \";\" + aluno.curso + \"\\\\n\"; writer.write(linha); } catch (IOException e) { e.printStackTrace(); } } public static void main(String[] args) { SwingUtilities.invokeLater(new Runnable() { public void run() { new CadastroAlunosGUI(); } }); }}class Aluno { public String nome; public int idade, matricula; public String curso; public Aluno(String nome, int idade, int matricula, String curso) { this.nome = nome; this.idade = idade; this.matricula = matricula; this.curso = curso; }}Neste código atualizado, foi adicionado um novo botão “Salvar” à interface gráfica. Quando o botão “Salvar” for clicado, a função salvarAluno() será chamada, que realizará as seguintes ações: Obter os dados do aluno dos campos de texto da interface gráfica. Criar um objeto Aluno com os dados fornecidos. Chamar a função salvarAluno(Aluno aluno) para salvar os dados do aluno em uma nova linha no arquivo de texto “alunos.txt”. Exibir uma mensagem de confirmação para o usuário. Limpar os campos do formulário.Agora você pode cadastrar os alunos e salvá-los no arquivo de texto pressionando o botão “Salvar”.Referências GitHub: Cadastro de alunos Xavier, Gley Fabiano Cardoso Lógica de programação E-book, capítulos 2, 4 e 8. Disponível em: https://bibliotecadigitalsenac.com.br/?from=%3FcontentInfo%3D1306#/legacy/epub/1306 Acesso em 15/05/2023 Editor de diagramas Mermaid" }, { "title": "Circuito com botão no Tinkercad", "url": "/aulas/posts/circuito-com-botao-no-tinkercad/", "categories": "AULAS, NOÇÕES DE ROBÓTICA", "tags": "arduino, robótica, simulador, eletrônica", "date": "2023-05-16 04:00:00 -0300", "snippet": "Neste artigo, vamos falar sobre push buttons ou micro botões e apresentar o que são e como funcionam. Um push button é uma pequena peça com quatro pernas, e vamos explorar seu funcionamento passo a...", "content": "Neste artigo, vamos falar sobre push buttons ou micro botões e apresentar o que são e como funcionam. Um push button é uma pequena peça com quatro pernas, e vamos explorar seu funcionamento passo a passo.O que é um Push Button?Um push button, também conhecido como micro botão, é um dispositivo eletrônico comumente utilizado como um interruptor momentâneo. Ele possui quatro terminais ou pernas que realizam conexões específicas quando o botão é pressionado.Funcionamento do Push ButtonO push button funciona da seguinte maneira: ele possui uma chavinha que, quando pressionada, estabelece conexões entre diferentes terminais. Vejamos o diagrama de conexão do push button:Legenda:1 - Terminal 12 - Terminal 23 - Terminal 34 - Terminal 4Quando pressionado:Terminal 1 conecta com Terminal 3Terminal 2 conecta com Terminal 4Portanto, quando o botão é pressionado, ocorre o contato entre as pernas 1 e 3, assim como entre as pernas 2 e 4. Ao soltar o botão, as conexões são interrompidas, e cada perna retorna ao seu estado original.Montagem Simples no Tinkercad CircuitsVamos realizar uma montagem simples no Tinkercad Circuits para ilustrar o funcionamento do push button. A montagem consiste em um LED conectado em série com um resistor, e o push button inserido entre as camadas de contatos.Passo a passo: Abra o Tinkercad Circuits, faça login e crie um novo projeto, acessando o link: Simulador online Tinkercad. Na área de componentes, localize o LED e o resistor. Posicione o LED e o resistor no espaço de trabalho do Circuits. Conecte uma extremidade do resistor a um pino de alimentação (5V). Conecte a outra extremidade do resistor ao anodo (positivo) do LED. Conecte o catodo (negativo) do LED ao terra (GND). Insira o push button entre os contatos dos terminais do circuito, garantindo que as pernas estejam conectadas corretamente. Verifique se todas as conexões estão corretas.Ao pressionar o push button, o LED deve acender, e ao soltá-lo, o LED deve apagar.Montagem com Arduino no Tinkercad CircuitsAgora, vamos realizar uma montagem utilizando um Arduino para controlar o LED através do push button.Passo a passo: Abra o Tinkercad Circuits e crie um novo projeto. Na área de componentes, localize o Arduino, o LED e o push button. Posicione o Arduino, o LED e o push button no espaço de trabalho do Circuits. Conecte uma extremidade do resistor ao pino de 5 volts do Arduino. Conecte a outra extremidade do resistor ao anodo (positivo) do LED. Conecte o catodo (negativo) do LED ao terra (GND) do Arduino. Conecte uma perna do push button a um pino digital de entrada (por exemplo, pino 7) do Arduino. Conecte a outra perna do push button a um pino digital de saída (por exemplo, pino 8) do Arduino.Agora, vamos programar o Arduino para controlar o funcionamento do LED com base na leitura do push button.Passo a passo: Abra o editor de código no Tinkercad Circuits e selecione a aba do Arduino. No código, defina o pino 7 como entrada utilizando a função pinMode(). Por exemplo: pinMode(7, INPUT); Em seguida, defina o pino 8 como saída utilizando a função pinMode(). Por exemplo: pinMode(8, OUTPUT); Dentro do loop principal (void loop()), adicione um teste condicional para verificar se a leitura digital do pino 7 é alta (ou seja, se o push button está pressionado). Por exemplo: if (digitalRead(7) == HIGH) Dentro do bloco condicional, escreva o valor HIGH (ou ligue) no pino 8 utilizando a função digitalWrite(). Por exemplo: digitalWrite(8, HIGH); Fora do bloco condicional, adicione um bloco else para o caso em que o push button não está pressionado. Dentro deste bloco, escreva o valor LOW (ou desligue) no pino 8 utilizando digitalWrite(). Por exemplo: digitalWrite(8, LOW); Verifique se não há erros de sintaxe no código e faça as devidas correções, se necessário. Clique em “Simular” para testar a simulação.Ao pressionar o push button, o LED deve acender, e ao soltá-lo, o LED deve apagar. O funcionamento do LED será controlado pela leitura do push button através do Arduino.Essas foram as instruções básicas para a montagem e programação de push buttons no Tinkercad Circuits. Com essas informações, você poderá explorar diferentes aplicações e aprimorar seus projetos eletrônicos.O código completo que você pode carregar no Arduino:// Definição dos pinosconst int pushButtonPin = 7; // Pino conectado ao push buttonconst int ledPin = 8; // Pino conectado ao LEDvoid setup() { pinMode(pushButtonPin, INPUT); pinMode(ledPin, OUTPUT);}void loop() { if (digitalRead(pushButtonPin) == HIGH) { digitalWrite(ledPin, HIGH); } else { digitalWrite(ledPin, LOW); }}Certifique-se de ter conectado o push button ao pino 7 e o LED ao pino 8 do Arduino, conforme explicado anteriormente.Para carregar o código no Arduino, siga as etapas abaixo: Conecte o Arduino ao computador utilizando um cabo USB. Abra a IDE do Arduino no seu computador. Crie um novo arquivo e copie o código fornecido. Selecione o tipo de placa Arduino que você está usando em “Tools” &gt; “Board” no menu da IDE. Selecione a porta correta do Arduino em “Tools” &gt; “Port”. Clique no botão de upload (seta apontando para a direita) para carregar o código no Arduino. Aguarde até que o processo de upload seja concluído e verifique se não há erros na janela de saída.Após o upload do código, o Arduino estará pronto para controlar o funcionamento do LED com base na leitura do push button.Referências ABTC-3-Arduino Básico com TinkerCad Circuits - Aula 3 - Botão e LED Curso Arduíno EaD - Prática 2 - Botão LED Como funciona um interruptor - Geração de Energia Simulador online Tinkercad" }, { "title": "Criando aplicação cadastro de alunos", "url": "/aulas/posts/criando-aplicacao-cadastro-de-alunos/", "categories": "DESENVOLVIMENTO, PROGRAMADOR", "tags": "Senac, programador, programação, gui, java, uml, diagrama", "date": "2023-05-15 17:00:00 -0300", "snippet": "Criar um aplicativo em Java que represente um sistema de cadastro de alunos.Fase 1 Cap. 2Iniciando a proposta, que é construir um sistema de informação, declare as variáveis para o algoritmo de cad...", "content": "Criar um aplicativo em Java que represente um sistema de cadastro de alunos.Fase 1 Cap. 2Iniciando a proposta, que é construir um sistema de informação, declare as variáveis para o algoritmo de cadastramento de alunos, cujos dados são: nome, sexo, endereço, cidade, estado, CEP, telefone, data de nascimento, RG, nome do pai, nome da mãe grau de escolaridadeClassifique os dados segundo os tipos das variáveis (numéricos, literais ou lógicos) que irão armazená-los. Variáveis literais: nome do aluno, sexo, endereço, cidade, estado, nome do pai, nome da mãe. Variáveis numéricas: telefone, CEP, RG, data de nascimento, grau de escolaridade.Diagrama de classeclassDiagram class Aluno{ +String nome +String sexo +String endereco +String cidade +String estado +String nomeDoPai +String nomeDaMae +int CEP +int telefone +int dataDeNascimento +int RG +int grauDeEscolaridade }Implementação:public class aluno { public String nome, sexo, endereco, cidade, estado, nomeDoPai,nomeDaMae ; public int cep, rg, grauDeEscolaridade, telefone, dataDeNascimento; }Fase2 cap. 4Atribuição de valores às variáveis:O usuário entra com valores para preencher as variáveis: leia “Entre com o sexo:”, SEXO leia “Entre com o endereço:”, ENDERECO leia “Entre com a cidade onde o aluno reside:”, CIDADE leia “Entre com a sigla do estado onde o aluno reside:”, UF leia “Entre com o CEP (somente números):”, CEP leia “Entre com o telefone (somente números):”, FONE leia “Entre com o nome do pai do aluno:”, PAI leia “Entre com o nome da mãe do aluno:”, MAE leia “Entre com o Registro Geral (RG) do aluno (somente números) leia “Entre com o grau de escolaridade do aluno (0, 1, 2, 3):”, GRAUESC escreva “Aluno:”, NOME escreva “Sexo:”, SEXO, “Data de Nascimento:”, DATANASC escreva “Registro Geral (RG):”, RG escreva “Grau de escolaridade:”, GRAUESC, “grau” escreva “Endereço:”, ENDERECO, “Cidade:”, CIDADE, “Estado:”, UF escreva “CEP:”, CEP escreva “Telefone:”, FONE escreva “Nome do pai:”, PAI escreva “Nome da mãe:”, MAECadastrar 50 alunos significa repetir o algoritmo anterior cinquenta vezes, ou seja, utilizar uma estrutura de repetição; neste caso, utilize a estrutura para/faça/fim-para. Para controlar a quantidade de alunos cadastrados, você deve utilizar uma variável contadora. Antes disso, porém, todas as variáveis do algoritmo devem ser declaradas.Para criar um aplicativo em Java que cadastre 50 alunos usando uma estrutura de repetição, você pode utilizar o laço for para iterar 50 vezes. Aqui está o código atualizado:import java.util.Scanner;public class Aluno { public String nome, sexo, endereco, cidade, estado, nomeDoPai, nomeDaMae; public int cep, rg, grauDeEscolaridade, telefone, dataDeNascimento; public static void main(String[] args) { Scanner scanner = new Scanner(System.in); for (int i = 1; i &lt;= 50; i++) { System.out.println(\"Entre com os dados do aluno \" + i + \":\"); Aluno aluno = new Aluno(); System.out.println(\"Entre com o nome:\"); aluno.nome = scanner.next(); System.out.println(\"Entre com o sexo:\"); aluno.sexo = scanner.next(); System.out.println(\"Entre com o endereço:\"); aluno.endereco = scanner.next(); System.out.println(\"Entre com a cidade onde o aluno reside:\"); aluno.cidade = scanner.next(); System.out.println(\"Entre com a sigla do estado onde o aluno reside:\"); aluno.estado = scanner.next(); System.out.println(\"Entre com o CEP (somente números):\"); aluno.cep = scanner.nextInt(); System.out.println(\"Entre com o telefone (somente números):\"); aluno.telefone = scanner.nextInt(); System.out.println(\"Entre com o nome do pai do aluno:\"); aluno.nomeDoPai = scanner.next(); System.out.println(\"Entre com o nome da mãe do aluno:\"); aluno.nomeDaMae = scanner.next(); System.out.println(\"Entre com o Registro Geral (RG) do aluno (somente números):\"); aluno.rg = scanner.nextInt(); System.out.println(\"Entre com o grau de escolaridade do aluno (0, 1, 2, 3):\"); aluno.grauDeEscolaridade = scanner.nextInt(); System.out.println(\"Aluno: \" + aluno.nome); System.out.println(\"Sexo: \" + aluno.sexo); System.out.println(\"Registro Geral (RG): \" + aluno.rg); System.out.println(\"Grau de escolaridade: \" + aluno.grauDeEscolaridade); System.out.println(\"Endereço: \" + aluno.endereco + \", Cidade: \" + aluno.cidade + \", Estado: \" + aluno.estado); System.out.println(\"CEP: \" + aluno.cep); System.out.println(\"Telefone: \" + aluno.telefone); System.out.println(\"Nome do pai: \" + aluno.nomeDoPai); System.out.println(\"Nome da mãe: \" + aluno.nomeDaMae); } }}Nesse código, o laço for é usado para repetir o processo de cadastro 50 vezes. A cada iteração, um novo objeto Aluno é criado e preenchido com os dados fornecidos pelo usuário. Em seguida, os dados são exibidos na tela.Lembre-se de que é uma boa prática seguir as convenções de nomenclatura do Java, portanto, o nome da classe aluno foi alterado para Aluno, começando com letra maiúscula.Imagine quanto trabalho seu amigo terá para controlar todas as fichas. Para ajudá-lo, você pode desenvolver um programa de computador. Antes, porém, deve criar um algoritmo, seguindo algumas etapas.Fase 3 Usando funções Refatorar o algoritmo anterior usando funções para separar a lógica em partes mais organizadas e reutilizáveis. Colocar uma opção para sair do loop.DiagramasDiagrama de fluxoflowchart TD A([inicio]) --&gt; B[/leia os dados do aluno\\] B --&gt; i[\\imprima os dados do aluno/] i --&gt; C{Quer continuar? s ou n} C --&gt; |n| e([fim]) C --&gt;|s| BDiagrama de classe:classDiagram class Aluno{ +String nome +String sexo +String endereco +String cidade +String estado +String nomeDoPai +String nomeDaMae +int CEP +int RG +int grauDeEscolaridade +int telefone +int dataDeNascimento static void main(String[] args) static void cadastrarAluno(aluno aluno, Scanner scanner) static void exibirDadosaluno(aluno aluno) }ImplementaçãoAqui está o código refatorado:import java.util.Scanner;public class Aluno { public String nome, sexo, endereco, cidade, estado, nomeDoPai, nomeDaMae; public int cep, rg, grauDeEscolaridade, telefone, dataDeNascimento; public static void main(String[] args) { Aluno aluno = new Aluno(); Scanner scanner = new Scanner(System.in); for (int i = 1; i &lt;= 50; i++) { System.out.println(\"Entre com os dados do aluno \" + i + \":\"); cadastrarAluno(aluno, scanner); exibirDadosAluno(aluno); } } public static void cadastrarAluno(Aluno aluno, Scanner scanner) { System.out.println(\"Entre com o nome:\"); aluno.nome = scanner.next(); System.out.println(\"Entre com o sexo:\"); aluno.sexo = scanner.next(); System.out.println(\"Entre com o endereço:\"); aluno.endereco = scanner.next(); System.out.println(\"Entre com a cidade onde o aluno reside:\"); aluno.cidade = scanner.next(); System.out.println(\"Entre com a sigla do estado onde o aluno reside:\"); aluno.estado = scanner.next(); System.out.println(\"Entre com o CEP (somente números):\"); aluno.cep = scanner.nextInt(); System.out.println(\"Entre com o telefone (somente números):\"); aluno.telefone = scanner.nextInt(); System.out.println(\"Entre com o nome do pai do aluno:\"); aluno.nomeDoPai = scanner.next(); System.out.println(\"Entre com o nome da mãe do aluno:\"); aluno.nomeDaMae = scanner.next(); System.out.println(\"Entre com o Registro Geral (RG) do aluno (somente números):\"); aluno.rg = scanner.nextInt(); System.out.println(\"Entre com o grau de escolaridade do aluno (0, 1, 2, 3):\"); aluno.grauDeEscolaridade = scanner.nextInt(); } public static void exibirDadosAluno(Aluno aluno) { System.out.println(\"Aluno: \" + aluno.nome); System.out.println(\"Sexo: \" + aluno.sexo); System.out.println(\"Registro Geral (RG): \" + aluno.rg); System.out.println(\"Grau de escolaridade: \" + aluno.grauDeEscolaridade); System.out.println(\"Endereço: \" + aluno.endereco + \", Cidade: \" + aluno.cidade + \", Estado: \" + aluno.estado); System.out.println(\"CEP: \" + aluno.cep); System.out.println(\"Telefone: \" + aluno.telefone); System.out.println(\"Nome do pai: \" + aluno.nomeDoPai); System.out.println(\"Nome da mãe: \" + aluno.nomeDaMae); }}Nesse código refatorado, duas funções foram adicionadas: cadastrarAluno e exibirDadosAluno.A função cadastrarAluno é responsável por solicitar e armazenar os dados de um aluno fornecidos pelo usuário. Ela recebe um objeto Aluno e um scanner como parâmetros. Os dados são preenchidos no objeto aluno passado por referência.A função exibirDadosAluno é responsável por exibir os dados de um aluno na telaRefatorar o código novamente, dessa vez utilizando um construtor na classe Aluno para inicializar os objetos e o método toString() para exibir os dados de cada aluno. Aqui está o código refatorado:import java.util.Scanner;public class Aluno { public String nome, sexo, endereco, cidade, estado, nomeDoPai, nomeDaMae; public int cep, rg, grauDeEscolaridade, telefone, dataDeNascimento; public Aluno(String nome, String sexo, String endereco, String cidade, String estado, String nomeDoPai, String nomeDaMae, int cep, int rg, int grauDeEscolaridade, int telefone, int dataDeNascimento) { this.nome = nome; this.sexo = sexo; this.endereco = endereco; this.cidade = cidade; this.estado = estado; this.nomeDoPai = nomeDoPai; this.nomeDaMae = nomeDaMae; this.cep = cep; this.rg = rg; this.grauDeEscolaridade = grauDeEscolaridade; this.telefone = telefone; this.dataDeNascimento = dataDeNascimento; } @Override public String toString() { return \"Aluno: \" + nome + \"\\\\n\" + \"Sexo: \" + sexo + \"\\\\n\" + \"Registro Geral (RG): \" + rg + \"\\\\n\" + \"Grau de escolaridade: \" + grauDeEscolaridade + \"\\\\n\" + \"Endereço: \" + endereco + \", Cidade: \" + cidade + \", Estado: \" + estado + \"\\\\n\" + \"CEP: \" + cep + \"\\\\n\" + \"Telefone: \" + telefone + \"\\\\n\" + \"Nome do pai: \" + nomeDoPai + \"\\\\n\" + \"Nome da mãe: \" + nomeDaMae; } public static void main(String[] args) { Scanner scanner = new Scanner(System.in); for (int i = 1; i &lt;= 50; i++) { System.out.println(\"Entre com os dados do aluno \" + i + \":\"); Aluno aluno = cadastrarAluno(scanner); System.out.println(aluno); } } public static Aluno cadastrarAluno(Scanner scanner) { System.out.println(\"Entre com o nome:\"); String nome = scanner.next(); System.out.println(\"Entre com o sexo:\"); String sexo = scanner.next(); System.out.println(\"Entre com o endereço:\"); String endereco = scanner.next(); System.out.println(\"Entre com a cidade onde o aluno reside:\"); String cidade = scanner.next(); System.out.println(\"Entre com a sigla do estado onde o aluno reside:\"); String estado = scanner.next(); System.out.println(\"Entre com o CEP (somente números):\"); int cep = scanner.nextInt(); System.out.println(\"Entre com o telefone (somente números):\"); int telefone = scanner.nextInt(); System.out.println(\"Entre com o nome do pai do aluno:\"); String nomeDoPai = scanner.next(); System.out.println(\"Entre com o nome da mãe do aluno:\"); String nomeDaMae = scanner.next(); System.out.println(\"Entre com o Registro Geral (RG) do aluno (somente números):\"); int rg = scanner.nextInt(); System.out.println(\"Entre com o grau de escolaridade do aluno (0, 1, 2, 3):\"); int grauDeEscolaridade = scanner.nextInt(); return new Aluno(nome, sexo, endereco, cidade, estado, nomeDoPai, nomeDaMae, cep, rg, grauDeEscolaridade, telefone, 0); }}Nesse código refatorado, a classe Aluno possui um construtor que recebe todos os dados do aluno como parâmetros. Esse construtor inicializa os atributos da classe com os valores fornecidos.Também foi adicionado o método toString() na classe Aluno, que retorna uma string formatada contendo os dados do aluno.No método cadastrarAluno(), os dados do aluno são solicitados ao usuário e retornados como um novo objeto Aluno criado usando o construtor.No método main(), o laço for é utilizado para cadastrar e exibir os dados dos 50 alunos.Agora, ao chamar System.out.println(aluno), a representação em formato de string dos dados do aluno será exibida automaticamente.Referências GitHub: Cadastro de alunos Xavier, Gley Fabiano Cardoso Lógica de programação E-book, capítulos 2, 4 e 8. Disponível em: https://bibliotecadigitalsenac.com.br/?from=%3FcontentInfo%3D1306#/legacy/epub/1306 Acesso em 15/05/2023 Editor de diagramas Mermaid" }, { "title": "Políticas de segurança de redes", "url": "/aulas/posts/politicas-de-seguranca-de-redes/", "categories": "AULAS, INFRAESTRUTURA DE REDES", "tags": "infraestrutura, segurança", "date": "2023-05-15 10:40:00 -0300", "snippet": "A segurança de redes de computadores é uma área fundamental para proteger a informação em um ambiente digital. Ela está inserida em um contexto mais amplo chamado segurança da informação, que abran...", "content": "A segurança de redes de computadores é uma área fundamental para proteger a informação em um ambiente digital. Ela está inserida em um contexto mais amplo chamado segurança da informação, que abrange diferentes aspectos relacionados à proteção dos dados. Neste trabalho, vamos focar na segurança da informação, com ênfase nas políticas de segurança.Segurança FísicaA segurança física é o primeiro ponto de preocupação quando se trata de proteger as informações. Ela envolve a proteção do ambiente físico onde estão localizadas as instalações que abrigam os dados. Alguns aspectos importantes da segurança física são:Segurança Externa da RedeGarantir a segurança externa da rede é essencial para proteger a corporação. Isso envolve a implementação de medidas de segurança para controlar as entradas e saídas da rede, evitando acesso não autorizado.Segurança na Sala de EquipamentosA segurança da sala de equipamentos é crucial, pois qualquer computador que contenha dados sensíveis da empresa pode ser alvo de roubo. É importante adotar medidas de segurança tanto para os equipamentos portáteis quanto para os equipamentos nas estações de trabalho.Redundância e BackupA redundância é uma prática importante para garantir a continuidade das operações em caso de falhas. Ela pode ser aplicada tanto em termos de redundância de software, onde as informações podem seguir caminhos distintos, como em termos de redundância física, utilizando caminhos de comunicação alternativos.Além disso, é fundamental garantir o fornecimento de energia adequado, realizar backups regularmente e ter uma política de descarte seguro das informações.Segurança LógicaA segurança lógica abrange as medidas de proteção baseadas em software para garantir a integridade, confidencialidade e disponibilidade dos dados. Algumas práticas de segurança lógica incluem:Combate a VírusUtilizar softwares antivírus para proteger os sistemas é essencial. Os vírus podem comprometer o desempenho do computador, excluir arquivos, alterar dados e permitir o acesso não autorizado a informações confidenciais.Configuração do Sistema OperacionalUma configuração adequada do sistema operacional é importante para evitar vulnerabilidades. Manter o sistema atualizado com as últimas correções de segurança é fundamental para garantir a proteção dos dados. Atualizações e Patches Manter os sistemas atualizados com as últimas atualizações e patches de segurança é essencial para proteger a rede contra vulnerabilidades conhecidas. A política de segurança deve incluir diretrizes para garantir que os sistemas sejam regularmente atualizados com as correções de segurança mais recentes, seja por meio de atualizações automáticas ou de processos manuais de atualização. Prevenção de AtaquesÉ importante implementar medidas de prevenção contra diferentes tipos de ataques, como sniffing, que busca informações importantes na rede, e ataques de engenharia social. Utilizar firewalls e ferramentas de detecção de intrusões pode ajudar a proteger a rede contra essas ameaças.Política de SegurançaA política de segurança é uma abordagem abrangente e eficaz para garantir a segurança da informação. Ela engloba tanto as medidas de segurança física quanto lógica e é respaldada por estratégias de proteção. Alguns aspectos importantes da política de segurança são:Classificação das InformaçõesA política de segurança deve incluir a classificação das informações, identificando seu valor e criticidade. É necessário estabelecer regras e diretrizes específicas para cada tipo de informação.Acesso e Controle de PrivacidadeÉ importante estabelecer um controle de acesso aos recursos da rede, garantindo que apenas usuários autorizados tenham permissão para acessar informações sensíveis. A autenticação forte, como o uso de senhas seguras e autenticação de dois fatores, é recomendada. Política de Senhas A política de senhas é um elemento fundamental na proteção dos dados. Ela deve estabelecer requisitos claros para a criação de senhas fortes, incluindo comprimento mínimo, uso de caracteres especiais, letras maiúsculas e minúsculas, além de exigir a troca periódica de senhas. Além disso, é importante educar os usuários sobre práticas de segurança, como não compartilhar senhas e evitar o uso de senhas óbvias. Controle de Acesso A política de segurança deve incluir diretrizes para o controle de acesso aos recursos da rede. Isso envolve a definição de privilégios de acesso para diferentes usuários e grupos, com base em suas necessidades e funções dentro da organização. Os princípios do menor privilégio e da separação de funções devem ser aplicados para limitar o acesso apenas ao que é necessário para realizar as tarefas específicas de cada usuário. Monitoramento e AuditoriaUm componente essencial da política de segurança é o monitoramento contínuo das atividades na rede. Isso permite a detecção precoce de ameaças e a identificação de comportamentos suspeitos. Além disso, é importante realizar auditorias regulares para avaliar a eficácia das medidas de segurança implementadas. Monitoramento e Resposta a Incidentes A política de segurança deve incluir diretrizes para o monitoramento contínuo da rede e a resposta eficaz a incidentes de segurança. Isso envolve a implementação de ferramentas de monitoramento de segurança, como sistemas de detecção de intrusões e registros de eventos de segurança. Além disso, é importante estabelecer um plano de resposta a incidentes que especifique as ações a serem tomadas em caso de violação de segurança, incluindo a notificação adequada das partes interessadas e a mitigação dos danos causados. Conscientização e TreinamentoA conscientização dos funcionários sobre as práticas de segurança é fundamental para o sucesso da política de segurança. É importante oferecer treinamentos periódicos para informar sobre as ameaças mais recentes e fornecer orientações sobre como agir de maneira segura.Gestão de RiscosA gestão de riscos é um componente vital de uma política de segurança eficaz. Envolve a identificação, análise e avaliação dos riscos de segurança que a organização enfrenta. Isso permite que medidas apropriadas sejam implementadas para mitigar esses riscos. A gestão de riscos pode incluir a realização de avaliações de vulnerabilidade, análise de ameaças e implementação de salvaguardas para reduzir os riscos a um nível aceitável.Política de Backup e RecuperaçãoUma política de segurança eficaz deve abordar a questão do backup e recuperação de dados. Isso envolve a definição de procedimentos para a realização de backups regulares dos dados críticos da organização e a verificação periódica da integridade dos backups. Além disso, é importante testar periodicamente os procedimentos de recuperação para garantir que os dados possam ser restaurados com sucesso em caso de falhas ou incidentes de segurança.Resumo de políticas de segurançaAqui está um resumo que pode ser usada para descrever e documentar as políticas de segurança de uma organização: Gestão de Riscos Esta política define o processo de identificação, análise e avaliação de riscos de segurança enfrentados pela organização. Inclui a realização de avaliações de vulnerabilidade, análise de ameaças e implementação de medidas de mitigação para reduzir os riscos a um nível aceitável. Política de Senhas Esta política estabelece requisitos para a criação de senhas fortes e seguras. Define o comprimento mínimo das senhas, o uso de caracteres especiais, letras maiúsculas e minúsculas, e a frequência de troca de senhas. Também aborda a proibição do compartilhamento de senhas e o uso de senhas óbvias. Controle de Acesso Esta política define diretrizes para o controle de acesso aos recursos da rede. Estabelece a atribuição de privilégios de acesso com base nas funções e responsabilidades dos usuários. Implementa o princípio do menor privilégio, garantindo que os usuários tenham acesso apenas ao necessário para realizar suas tarefas. Também enfatiza a separação de funções para evitar conflitos de interesse e abusos de privilégios. Política de Backup Esta política estabelece procedimentos para a realização de backups regulares dos dados críticos da organização. Define a frequência dos backups, os métodos de armazenamento e a verificação periódica da integridade dos dados de backup. Também aborda a segregação adequada dos dados de backup para proteção contra perda de dados e a realização de testes periódicos de recuperação para garantir que os dados possam ser restaurados com sucesso em caso de falhas ou incidentes de segurança. Monitoramento e Resposta Esta política define diretrizes para o monitoramento contínuo da rede e a resposta a incidentes de segurança. Estabelece a implementação de ferramentas de monitoramento, como sistemas de detecção de intrusões, registros de eventos de segurança e análise de logs. Também descreve o plano de resposta a incidentes, incluindo a notificação adequada das partes interessadas, a condução de investigações e a mitigação dos danos causados. Atualizações e Patches Esta política estabelece a prática de manter os sistemas atualizados com as últimas atualizações e patches de segurança. Define a frequência das atualizações e os métodos de implementação. Também aborda a importância de acompanhar as notificações de vulnerabilidades e aplicar prontamente os patches de segurança. Essas políticas podem ser adaptadas de acordo com as políticas específicas de segurança de uma organização, adicionando ou removendo elementos conforme necessário. É importante lembrar que as políticas devem ser complementadas por procedimentos operacionais e diretrizes mais detalhadas para uma implementação eficaz.ConclusãoA segurança de redes de computadores abrange tanto a segurança física quanto lógica. É fundamental implementar medidas de proteção adequadas em ambos os aspectos para garantir a integridade, confidencialidade e disponibilidade das informações. Uma política de segurança abrangente, que inclua classificação das informações, controle de acesso, monitoramento e treinamento, é essencial para manter um ambiente seguro.Referência" }, { "title": "Como criar um currículo", "url": "/aulas/posts/como-criar-um-curriculo/", "categories": "AULAS, PLANEJAMENTO DE CARREIRA", "tags": "planejamento, carreira, graduação", "date": "2023-05-15 10:00:00 -0300", "snippet": "Um currículo bem estruturado é essencial para transmitir suas informações profissionais de maneira clara e organizada aos recrutadores. Neste artigo, vamos explicar passo a passo como fazer um curr...", "content": "Um currículo bem estruturado é essencial para transmitir suas informações profissionais de maneira clara e organizada aos recrutadores. Neste artigo, vamos explicar passo a passo como fazer um currículo eficiente, destacando os principais elementos que devem ser incluídos. Vamos começar!Estrutura de um currículoA estrutura de um currículo segue uma ordem lógica para facilitar a leitura e compreensão das informações. Veja a seguir a sequência correta dos elementos: Nome: O primeiro elemento do currículo é o seu nome. Ele deve ser destacado com uma fonte diferente, geralmente em negrito e com um tamanho maior do que o restante do texto. Por exemplo: “Beatriz Santos Telles”. Objetivo: Logo após o nome, é recomendado incluir um objetivo profissional. O objetivo deve indicar a área em que você deseja atuar. Por exemplo: “Assistente Administrativo na área administrativa”. Resumo Profissional: O resumo profissional é um breve resumo das suas qualificações e experiências relevantes para a vaga pretendida. Se você já possui experiência na área, mencione quantos anos de experiência tem e sua formação. Caso seja o seu primeiro emprego, foque em destacar suas características pessoais e habilidades relevantes para a vaga. Dados Pessoais: Inclua seus dados pessoais, como data de nascimento, idade, endereço, telefone e e-mail. Se desejar, pode adicionar informações extras, como estado civil e nacionalidade. Experiências Profissionais: Nesta seção, liste suas experiências profissionais em ordem cronológica inversa, ou seja, da mais recente para a mais antiga. Para cada experiência, mencione o cargo ocupado, o nome da empresa e suas responsabilidades. Destaque as informações mais relevantes para a vaga em questão. Evite incluir experiências não relacionadas ao objetivo profissional. Formação: Liste sua formação acadêmica em ordem cronológica inversa. Comece com o nível mais alto de educação alcançado, como doutorado, mestrado, especializações, graduação e assim por diante. Informe o nome do curso, nome da instituição e ano de conclusão ou previsão de conclusão. Cursos Complementares: Caso tenha realizado cursos adicionais, como workshops, treinamentos ou certificações relevantes para a vaga, inclua-os nesta seção. Novamente, siga a ordem cronológica inversa, mencionando o nome do curso, nome da instituição, ano em que foi realizado e carga horária, se aplicável. Habilidades: Destaque suas habilidades relevantes para a vaga. Isso pode incluir habilidades técnicas, como o domínio de softwares específicos, e habilidades comportamentais, como comunicação, liderança e trabalho em equipe. Liste as habilidades de forma clara e objetiva. Idiomas: Se você possui conhecimento em idiomas estrangeiros, mencione-os nesta seção. Caso domine mais de um idioma, pode criar uma categoria específica para “Idiomas” e listar todos eles. Informe o nome do idioma, nível de proficiência (básico, intermediário, avançado, fluente) e, se houver, mencione certificados ou instituições onde tenha estudado. Informações Adicionais: Esta seção é destinada a informações que não se encaixam nas categorias anteriores. Por exemplo, se você possui carteira de habilitação ou disponibilidade para horários específicos, pode mencioná-los aqui. Utilize esse espaço para incluir qualquer informação adicional relevante para a vaga.Dicas para criar um currículo eficienteAqui estão algumas dicas adicionais para criar um currículo eficiente e atrativo: Seja objetivo e conciso: Evite informações desnecessárias e mantenha o currículo em uma ou duas páginas, quando possível. Utilize palavras-chave: Analise a descrição da vaga e identifique as palavras-chave mais relevantes. Inclua essas palavras-chave em seu currículo para aumentar suas chances de ser selecionado. Seja honesto: Não exagere suas habilidades ou experiências. Seja honesto em relação ao seu conhecimento e experiência real. Revise e formate: Revise cuidadosamente seu currículo em busca de erros de gramática e ortografia. Além disso, mantenha uma formatação limpa e organizada, facilitando a leitura e a compreensão das informações. Adapte o currículo para cada vaga: Faça ajustes no seu currículo para se adequar às exigências de cada vaga. Destaque as experiências e habilidades mais relevantes para o cargo em questão. Mantenha um estilo profissional: Use uma linguagem formal e profissional ao redigir seu currículo. Evite gírias e linguagem muito informal. Seja claro e objetivo: Utilize frases curtas e diretas, destacando suas principais realizações e responsabilidades em cada experiência profissional. Peça feedback: Após criar seu currículo, peça a opinião de outras pessoas, como amigos ou profissionais da área, para obter feedback construtivo e fazer melhorias, se necessário.Lembre-se de que um currículo bem elaborado é apenas o primeiro passo. Durante o processo de candidatura, é importante preparar-se para entrevistas e outras etapas do processo seletivo. Boa sorte em sua busca por oportunidades profissionais!Exemplo de CurrículoDados Pessoais Nome: Beatriz Santos Tele Data de Nascimento: 10/05/1990 Endereço: Rua das Flores, 123 - Cidade, Estado Telefone: (00) 12345-6789 E-mail: beatriz.tele@example.com Perfil do LinkedIn: linkedin.com/in/beatriztele Currículo Lattes: lattes.cnpq.br/1234567890ObjetivoBusco oportunidade na área administrativa como Assistente Administrativo, utilizando minhas habilidades e conhecimentos para contribuir com o crescimento da empresa.Resumo Profissional Dois anos de experiência como Assistente Administrativo em uma empresa de médio porte. Graduada em Administração de Empresas pela Universidade XYZ. Habilidades em gerenciamento de documentos, organização de arquivos e atendimento ao cliente.Experiência ProfissionalAssistente Administrativo - Empresa ABCPeríodo: janeiro de 2019 - presente Responsável por realizar atividades administrativas, incluindo o gerenciamento de documentos, controle de arquivos e atendimento telefônico. Elaboração de relatórios mensais para a diretoria, apresentando informações relevantes sobre o desempenho administrativo. Auxílio no planejamento e organização de eventos corporativos, como seminários e conferências.Estagiária Administrativa - Empresa XYZPeríodo: agosto de 2017 - dezembro de 2018 Suporte na organização de eventos internos e externos, garantindo o bom andamento das atividades. Apoio na elaboração de relatórios e planilhas de controle. Atendimento telefônico e recepção de visitantes.Formação AcadêmicaBacharelado em Administração de Empresas - Universidade XYZPeríodo: 2015 - 2019Cursos Complementares Curso de Gestão de Projetos - Instituto de Capacitação Profissional (ICP) - 2020 Curso de Excel Avançado - Online - 2018 (Carga horária: 40 horas)Habilidades Comunicação efetiva Organização e gerenciamento de documentos Pacote Microsoft Office (Word, Excel, PowerPoint) Atendimento ao cliente Trabalho em equipe AdaptabilidadeIdiomas Inglês Avançado Espanhol IntermediárioInformações Adicionais Carteira de Habilitação: Categoria B Disponibilidade para viagens e horários flexíveisEste é um exemplo básico de currículo, adaptado para uma vaga na área administrativa. Lembre-se de personalizar seu currículo de acordo com sua experiência e as exigências da vaga desejada.Referências YouTube: Como fazer um currículo 2022 YouTube: O currículo perfeito! " }, { "title": "Prática com botão de comando", "url": "/aulas/posts/pratica-com-botao-de-comando/", "categories": "AULAS, NOÇÕES DE ROBÓTICA", "tags": "arduino, robótica, simulador, eletrônica", "date": "2023-05-15 09:00:00 -0300", "snippet": "Nessa prática, vamos aprender como receber um sinal de nível lógico nas portas digitais do Arduino. Para isso, faremos uma montagem onde iremos pressionar um botão externo para acender ou apagar um...", "content": "Nessa prática, vamos aprender como receber um sinal de nível lógico nas portas digitais do Arduino. Para isso, faremos uma montagem onde iremos pressionar um botão externo para acender ou apagar um LED, utilizando o Arduino como intermediário. Antes de iniciarmos a montagem, vamos entender o funcionamento de uma chave eletrônica para microcontroladores.Funcionamento de uma Chave EletrônicaUma chave eletrônica para microcontroladores é utilizada para garantir que o sinal de entrada recebido pelo Arduino tenha um nível lógico adequado. Utilizaremos um circuito com um resistor pull-down para essa finalidade. Quando a chave está aberta, o terminal conectado à entrada do Arduino está com potencial próximo de zero volts. Ao pressionarmos a chave, o terminal conectado à entrada do Arduino recebe uma tensão de 5 volts.Essa configuração evita deixar a entrada do Arduino aberta, sem um nível lógico definido. Na prática, utilizaremos um botão de pulso, que fica sempre aberto, mas quando pressionado, fecha o contato, enviando o sinal para o Arduino. Agora que entendemos o funcionamento da chave eletrônica, vamos realizar a montagem no Tinkercad.Montagem da Prática Abra o Tinkercad e clique em “Circuitos” e depois em “Novo Circuito”. Adicione um Arduino Uno ao circuito. Em seguida, adicione um protoboard. Conecte a alimentação de 5 volts nos pinos horizontais inferiores e superiores do protoboard. Observação: Ao ligar o terminal negativo da alimentação, todas as linhas do protoboard ficam conectadas. Conecte um fio saindo de uma das linhas superiores de alimentação de 5 volts até a linha inferior correspondente. Isso garantirá que tenhamos alimentação de 5 volts disponível em ambos os lados do protoboard. Agora, pegue um fio e conecte-o ao pino de 5 volts do Arduino. Conecte a outra extremidade do fio a uma linha superior do protoboard. Utilize outro fio e conecte-o a uma linha inferior do protoboard, interligando as duas fileiras. Adicione um botão ao protoboard. Observe que os terminais 1 e 1b são interligados internamente, assim como os terminais 2 e 2b. Conecte um dos terminais do botão ao fio que está ligado ao pino de 5 volts do Arduino. Pegue um resistor de 100k ohms e conecte o outro terminal do botão a um dos terminais do resistor. Conecte o outro terminal do resistor a uma linha interligada com o terminal do botão. Em seguida, conecte um outro resistor de 100 ohms nessa mesma linha de interligação entre o terminal do botão e o primeiro resistor. Pegue o lado livre do segundo resistor de 100 ohms e conecte-o ao pino 2 do Arduino. Esse será o pino de entrada para receber o sinal do botão. Agora, vamos adicionar o LED à montagem: Pegue um resistor de 470 ohms e conecte-o ao protoboard. Conecte a outra extremidade do resistor a uma linha do protoboard. Agora, pegue o LED e observe os terminais anodo (ânodo) e cátodo (cátodo). Conecte o terminal anodo (positivo) do LED à linha do protoboard onde está conectado o resistor de 470 ohms. Conecte o terminal cátodo (negativo) do LED ao terra (GND) ou a 0 volts do Arduino. A montagem está concluída. Agora, vamos ao código. Código do ProgramaAgora vamos desenvolver o programa para controlar o LED utilizando o botão. Utilizaremos a função digitalRead para ler o estado lógico do botão e a função digitalWrite para acender ou apagar o LED.void setup() {pinMode(13, OUTPUT); // Define o pino 13 como saída para o LEDpinMode(2, INPUT); // Define o pino 2 como entrada para o botão}void loop() {int buttonState = digitalRead(2); // Lê o estado lógico do botãoif (buttonState == HIGH) { digitalWrite(13, HIGH); // Acende o LED se o botão estiver pressionado} else { digitalWrite(13, LOW); // Apaga o LED se o botão não estiver pressionado}}O programa começa definindo os pinos 13 e 2, respectivamente, como saída para o LED e como entrada para o botão. Em seguida, no loop principal, o programa lê o estado lógico do botão utilizando a função digitalRead e armazena esse valor na variável buttonState. Em seguida, utilizando uma estrutura if, o programa verifica se o botão está pressionado (estado lógico alto) e acende o LED utilizando a função digitalWrite. Caso contrário, o LED é apagado.ConclusãoNesta prática, aprendemos a utilizar um botão para acionar um LED utilizando o Arduino. Exploramos o funcionamento de uma chave eletrônica para microcontroladores, utilizamos o protoboard para fazer as conexões e desenvolvemos o programa em Arduino para controlar o LED com o botão. Essa é uma prática simples, mas que ilustra conceitos importantes de entrada e saída digital em microcontroladores.Como desafio adicional, você pode tentar criar um programa que utilize dois botões, um para ligar o LED e outro para apagá-lo. Experimente modificar o código e explore outras funcionalidades disponíveis no Arduino.Espero que você tenha gostado dessa prática e tenha aprendido mais sobre o uso de botões e LEDs com o Arduino.Referências Curso Arduíno EaD - Prática 2 - Botão LED ABTC-3-Arduino Básico com TinkerCad Circuits - Aula 3 - Botão e LED Introdução a Chaves e Botões - RoboCore" }, { "title": "Criando aplicação conta bancária", "url": "/aulas/posts/criando-aplicacao-conta-bancaria/", "categories": "DESENVOLVIMENTO, PROGRAMADOR", "tags": "Senac, programador, programação, gui, java, uml, diagrama", "date": "2023-05-12 17:00:00 -0300", "snippet": "Criar um aplicativo em Java que represente um sistema de controle de contas correntes bancárias de um correntista. Conta: porque seriam movimentadas uma ou várias contas. Para isso, serão necessár...", "content": "Criar um aplicativo em Java que represente um sistema de controle de contas correntes bancárias de um correntista. Conta: porque seriam movimentadas uma ou várias contas. Para isso, serão necessários os seguintes dados (número, banco, saldo, etc.) para realizar operações de crédito, débito, entre outras operações bancárias nas contas. Banco: porque poderia ter um ou mais bancos a quem essas contas pertencessem.Correntista: porque toda conta pertence a uma pessoa no mundo real e geralmente têm atrelado a elas seus dados (nome, endereço, fone, documento de identidade, CPF, etc.).Programação estruturadaExemplo de um programa de conta de banco, com depósito, saque e transferênciaimport java.util.Scanner;public class ContaBancaria { public static void main(String[] args) { Scanner input = new Scanner(System.in); int opcao; double saldo = 0; do { System.out.println(\"Escolha uma opção:\"); System.out.println(\"1 - Depósito\"); System.out.println(\"2 - Saque\"); System.out.println(\"3 - Transferência\"); System.out.println(\"4 - Saldo\"); System.out.println(\"0 - Sair\"); opcao = input.nextInt(); switch(opcao) { case 1: System.out.print(\"Digite o valor do depósito: \"); double deposito = input.nextDouble(); saldo += deposito; break; case 2: System.out.print(\"Digite o valor do saque: \"); double saque = input.nextDouble(); if (saque &lt;= saldo) { saldo -= saque; } else { System.out.println(\"Saldo insuficiente\"); } break; case 3: System.out.print(\"Digite o valor da transferência: \"); double transferencia = input.nextDouble(); if (transferencia &lt;= saldo) { System.out.print(\"Digite o número da conta de destino: \"); int contaDestino = input.nextInt(); System.out.println(\"Transferência realizada com sucesso\"); saldo -= transferencia; } else { System.out.println(\"Saldo insuficiente\"); } break; case 4: System.out.println(\"Saldo: \" + saldo); break; case 0: System.out.println(\"Saindo...\"); break; default: System.out.println(\"Opção inválida\"); } System.out.println(); } while (opcao != 0); }}Usando funçõesSegue abaixo um exemplo de programa de conta bancária em Java com a classe principal usando funções:import java.util.Scanner;public class ContaBancaria { public static void main(String[] args) { Scanner input = new Scanner(System.in); double saldo = 0.0; int opcao; do { System.out.println(\"Escolha uma opção:\"); System.out.println(\"1 - Depósito\"); System.out.println(\"2 - Saque\"); System.out.println(\"3 - Transferência\"); System.out.println(\"4 - Saldo\"); System.out.println(\"0 - Sair\"); opcao = input.nextInt(); switch(opcao) { case 1: System.out.print(\"Digite o valor do depósito: \"); double deposito = input.nextDouble(); saldo = depositar(saldo, deposito); break; case 2: System.out.print(\"Digite o valor do saque: \"); double saque = input.nextDouble(); saldo = sacar(saldo, saque); break; case 3: System.out.print(\"Digite o valor da transferência: \"); double transferencia = input.nextDouble(); System.out.print(\"Digite o número da conta de destino: \"); int contaDestino = input.nextInt(); saldo = transferir(saldo, transferencia, contaDestino); break; case 4: System.out.println(\"Saldo: \" + saldo); break; case 0: System.out.println(\"Saindo...\"); break; default: System.out.println(\"Opção inválida\"); } System.out.println(); } while (opcao != 0); } public static double depositar(double saldo, double valor) { return saldo + valor; } public static double sacar(double saldo, double valor) { if (valor &lt;= saldo) { return saldo - valor; } else { System.out.println(\"Saldo insuficiente\"); return saldo; } } public static double transferir(double saldo, double valor, int contaDestino) { if (valor &lt;= saldo) { // Lógica para transferência return saldo - valor; } else { System.out.println(\"Saldo insuficiente\"); return saldo; } }}Neste exemplo, as operações de depósito, saque e transferência foram transformadas em funções que recebem o saldo atual e os valores necessários para realizar as operações e retornam o novo saldo após a operação. Na classe principal, as funções são chamadas dentro do switch-case correspondente a cada operação. O objeto da classe Conta não é mais necessário neste exemplo, uma vez que todas as operações são realizadas por meio das funções.Usando Programação orientada a objetosDiagrama UML de classeEssas características devem estar presentes na classe e são chamadas de Atributos. Veja o diagrama a seguir que representa a classe conta, assim como alguns atributos:classDiagram class Conta{ -double saldo void depositar(double valor) boolean sacar(double valor) boolean transferir(double valor, int contaDestino) double getSaldo() } class ContaBancaria{ Scanner input Conta conta int opcao static void main(String[] args) } ContaBancaria *-- ContaImplementação:import java.util.Scanner;public class ContaBancaria { public static void main(String[] args) { Scanner input = new Scanner(System.in); Conta conta = new Conta(); int opcao; do { System.out.println(\"Escolha uma opção:\"); System.out.println(\"1 - Depósito\"); System.out.println(\"2 - Saque\"); System.out.println(\"3 - Transferência\"); System.out.println(\"4 - Saldo\"); System.out.println(\"0 - Sair\"); opcao = input.nextInt(); switch(opcao) { case 1: System.out.print(\"Digite o valor do depósito: \"); double deposito = input.nextDouble(); conta.depositar(deposito); break; case 2: System.out.print(\"Digite o valor do saque: \"); double saque = input.nextDouble(); if (conta.sacar(saque)) { System.out.println(\"Saque realizado com sucesso\"); } else { System.out.println(\"Saldo insuficiente\"); } break; case 3: System.out.print(\"Digite o valor da transferência: \"); double transferencia = input.nextDouble(); System.out.print(\"Digite o número da conta de destino: \"); int contaDestino = input.nextInt(); if (conta.transferir(transferencia, contaDestino)) { System.out.println(\"Transferência realizada com sucesso\"); } else { System.out.println(\"Saldo insuficiente\"); } break; case 4: System.out.println(\"Saldo: \" + conta.getSaldo()); break; case 0: System.out.println(\"Saindo...\"); break; default: System.out.println(\"Opção inválida\"); } System.out.println(); } while (opcao != 0); }}class Conta { private double saldo; public void depositar(double valor) { this.saldo += valor; } public boolean sacar(double valor) { if (valor &lt;= this.saldo) { this.saldo -= valor; return true; } else { return false; } } public boolean transferir(double valor, int contaDestino) { if (valor &lt;= this.saldo) { // Lógica para transferência this.saldo -= valor; return true; } else { return false; } } public double getSaldo() { return this.saldo; }}Neste exemplo, criamos uma classe Conta que possui os métodos depositar, sacar, transferir e getSaldo para realizar as operações na conta bancária. No método main, criamos um objeto da classe Conta e usamos seus métodos para realizar as operações de depósito, saque, transferência e consulta de saldo. As operações de saque e transferência verificam se há saldo suficiente na conta antes de realizar a operação e retornam um valor booleano indicando se a operação foi realizada com sucesso ou não.ReferênciaGitHub: Conta-poo;" }, { "title": "Criando jogo virtual pet", "url": "/aulas/posts/criando-jogo-virtual-pet/", "categories": "DESENVOLVIMENTO, PROGRAMADOR", "tags": "Senac, programador, programação, gui, java, uml, diagrama", "date": "2023-05-11 17:00:00 -0300", "snippet": "Suponha que você tivesse de criar um jogo de Bicho Virtual (também chamado de Virtual PET ou Tamagotchi). Neste jogo, o jogador terá um animal e deverá fazer com ele várias ações com o objetivo de ...", "content": "Suponha que você tivesse de criar um jogo de Bicho Virtual (também chamado de Virtual PET ou Tamagotchi). Neste jogo, o jogador terá um animal e deverá fazer com ele várias ações com o objetivo de criá-lo por um determinado tempo. O objetivo é não deixá-lo morrer de fome, cansaço ou sede.Para construir o jogo usando OO, é preciso imaginar. Imaginar genericamente um animal e não somente um tipo de animal ou apenas o seu animal de estimação.Pense então nas características principais que gostaria que ele tivesse. Com quais informações você poderia descrever esse animal genérico? Provavelmente seriam: nome, classe, família, idade, cor, tipo de pelagem, cor dos olhos, etc.Em seguida, determine quais ações seriam executadas por ele. Imagine-se criando situações para o cotidiano desse animal: como nascerá, como morrerá, o que comerá, de que maneira correrá, como dormirá, entre outras situações.Diagrama UML de classeEssas características devem estar presentes na classe e são chamadas de Atributos. Veja o diagrama a seguir que representa a classe Animal, assim como alguns atributos:classDiagram class Animal Animal : nome Animal : classe Animal : familia Animal : idadeQuando se fala em comportamento na definição de classe, está se referindo a métodos, ou seja, às ações/operações.No Virtual PET foram escolhidas algumas ações, como: nascer, morrer, comer, correr e dormir. Veja no diagrama a seguir como ficam a classe e os objetos com a inserção dos métodos:classDiagram class Animal Animal : nome Animal : classe Animal : familia Animal : idade Animal : nascer() Animal : morrer() Animal : comer() Animal : dormir()Criando objetosTodo objeto criado a partir da classe Animal deve ter os atributos descritos no diagrama. Porém, os conteúdos desses atributos presentes nos objetos é que os distinguem entre si. Esses conteúdos são chamados de estados, pois cada objeto criado a partir da classe terá suas características próprias.Por exemplo: cria 3 objetos a partir da classe animal.Vamos criar um cachorro, um gato e um passarinho conforme o diagrama:Diagrama de objetos:classDiagram class Animal{ nome classe familia idade nascer() morrer() comer() dormir() } Animal &lt;|-- Animal1 Animal &lt;|-- Animal2 Animal &lt;|-- Animal3 class Animal1{ \"Totó\" \"Mamífero\" \"Canídeo\" 5 } class Animal2{ \"Chiquinho\" \"Mamífero\" \"Felídeo\" 3 } class Animal3{ \"Amarelo\" \"Ave\" \"Frigilidae\" 1 }Implementando com JavaPara implementa com a linguagem de programação precisamos implementar os métodos com suas respectivas funcionalidades:Os atributos servirão para indicar a saúde do animal. Isto é, ele somente fará algo se estiver vivo (atributo estado), possuir a quantidade de calorias necessárias (atributo caloria) e tiver força para isso (atributo força), como todo animal precisa.Precisamos especificar os tipos das variáveis para as propriedades da classe animal:classe ANIMAL NOME, CLASSE, FAMILIA : literal IDADE,CALORIA,FORCA: numérico ESTADO:lógicoOs métodos: NASCER: método que pergunta os dados do animal: nome, classe e família, coloca-o em estado vivo, insere uma quantidade de calorias e força e insere 0 como estado do atributo idade. MORRER: método que coloca o objeto em estado morto. COMER: método que, caso o animal não esteja cheio e/ou morto, insere determinada quantidade de calorias e retira uma quantidade de força por ter realizado essa ação. CORRER: método que retira determinada quantidade de calorias e uma quantidade de força por ter realizado essa ação, caso o animal não esteja morto ou exausto. DORMIR: método que retira determinada quantidade de calorias e insere uma quantidade de força, caso o animal não esteja morto.Atualizando o diagrama de classe:classDiagram class Animal{ +String : nome +String : classe +String : familia +int : idade +int : caloria +int : forca +boolean : estado +nascer() +morrer() +comer() +dormir() } Animal &lt;|-- Animal1 Animal &lt;|-- Animal2 Animal &lt;|-- Animal3 class Animal1{ &lt;&lt;objeto&gt;&gt; \"Totó\" \"Mamífero\" \"Canídeo\" 5 } class Animal2{ &lt;&lt;objeto&gt;&gt; \"Chiquinho\" \"Mamífero\" \"Felídeo\" 3 } class Animal3{ &lt;&lt;objeto&gt;&gt; \"Amarelo\" \"Ave\" \"Frigilidae\" 1 }Exemplo inicial de implementação:public class Animal { public String Nome; public String Classe; public String Familia; public int Idade; public int Caloria; public int Forca; public boolean Estado; public static void main(String[] args) { Animal animal1 = new Animal(); Animal animal2 = new Animal(); Animal animal3 = new Animal(); animal1.Nome = \"Totó\"; animal1.Classe = \"mamífero\"; animal1.Familia = \"Canídeo\"; animal1.Idade = 5; animal2.Nome = \"Chiquinho\"; animal2.Classe = \"mamífero\"; animal2.Familia = \"Felídio\"; animal2.Idade = 3; animal3.Nome = \"Amarelo\"; animal3.Classe = \"ave\"; animal3.Familia = \"Fringilidae\"; animal3.Idade = 1; System.out.println(\"Nome do animal 1: \" + animal1.Nome); System.out.println(\"Classe: \" + animal1.Classe); System.out.println(\"Familia: \" + animal1.Familia); System.out.println(\"Idade: \" + animal1.Idade); System.out.println(\"Nome do animal 2: \" + animal2.Nome); System.out.println(\"Classe: \" + animal2.Classe); System.out.println(\"Familia: \" + animal2.Familia); System.out.println(\"Idade: \" + animal2.Idade); System.out.println(\"Nome do animal 3: \" + animal3.Nome); System.out.println(\"Classe: \" + animal3.Classe); System.out.println(\"Familia: \" + animal3.Familia); System.out.println(\"Idade: \" + animal3.Idade); System.out.println(\"métodos do animal: \"); animal1.nascer(); animal3.morrer(); animal2.correr(); animal1.comer(); } public void nascer(String Nome, String Classe, String Familia, int Idade, boolean Estado, int Caloria, int Forca) { this.Nome = Nome; this.Classe = Classe; this.Familia = Familia; this.Idade = Idade; this.Estado = Estado; this.Caloria = Caloria; this.Forca = Forca; System.out.println(\"O \" + Nome + \" nasceu\"); } public String morrer() { return (\"O \" + Nome + \" morreu\"); } public void comer() { System.out.println(\"O \" + Nome + \" comeu\"); } public void correr() { System.out.println(\"O \" + Nome + \" corre\"); } public void dormir() { System.out.println(\"O \" + Nome + \" dorme\"); } public void nascer() { }}Como atividade as funcionalidades devem ser implementadas, acompanhe o progresso no repositório do Github.ReferênciasXavier, Gley Fabiano CardosoLógica de programação cap. 10. pg. 247.E-book. Disponível em: https://bibliotecadigitalsenac.com.br/?from=%3FcontentInfo%3D1306#/legacy/epub/1306Acesso em 11/05/2023 Exercícios com classes em java Editor de diagramas Mermaid Mermaid Class diagram Help Java OOP (Object-Oriented Programming) Repositório da atividade jogo Pet no Github " }, { "title": "Zona desmilitarizada de rede", "url": "/aulas/posts/zona-desmilitarizada-de-rede/", "categories": "AULAS, INFRAESTRUTURA DE REDES", "tags": "infraestrutura, segurança", "date": "2023-05-11 10:40:00 -0300", "snippet": "A segurança em redes de computadores é um tema fundamental na era da informação, nela a Zona Desmilitarizada (DMZ), também conhecida como Rede de Perímetro, é uma área intermediária dentro de uma r...", "content": "A segurança em redes de computadores é um tema fundamental na era da informação, nela a Zona Desmilitarizada (DMZ), também conhecida como Rede de Perímetro, é uma área intermediária dentro de uma rede de computadores. Ela atua como uma barreira de proteção entre a rede pública (por exemplo, a internet) e a rede interna de uma empresa, conhecida como rede local. A DMZ é geralmente implementada por meio do uso de firewalls e tem a finalidade de permitir o acesso externo a serviços disponíveis na empresa.O Conceito da DMZA DMZ foi inspirada na zona desmilitarizada existente entre dois estados ou nações, onde operações militares não são permitidas. Por exemplo, na península coreana, existe uma zona desmilitarizada entre a Coreia do Sul e a Coreia do Norte. Esse conceito foi importado para redes de computadores, representando uma área que isola a rede interna da rede externa, criando assim um perímetro de segurança. A DMZ não é uma zona totalmente segura, mas também não é completamente insegura. Ela contém recursos que precisam ser acessados tanto internamente quanto externamente.Categorias de Locais em uma RedeDentro da DMZ, existem três categorias de locais ou dispositivos: Rede Local Insegura: Essa categoria engloba dispositivos ou redes que não são confiáveis em termos de segurança. Esses dispositivos podem ser acessados tanto internamente quanto a partir da DMZ. Rede Local Protegida: Nessa categoria, encontram-se dispositivos ou redes que são considerados protegidos e confiáveis. Eles não devem ser acessados por usuários externos ou não autorizados. A rede local protegida está isolada da DMZ. DMZ: A DMZ é a área intermediária que atua como uma ponte entre a rede local insegura e a rede local protegida. Nela, são colocados servidores que fornecem serviços específicos, como servidor de e-mail, servidor FTP ou servidor web. Esses servidores, também conhecidos como “bastion hosts”, podem ser acessados tanto internamente quanto a partir da rede externa.Serviços na DMZA DMZ permite a hospedagem de diversos serviços que são acessados a partir da rede externa. Alguns exemplos de serviços comumente implementados na DMZ são: Servidores web Servidores DNS Servidores de e-mail Servidores FTP Serviços de VoIP Bancos de dados específicosAlém disso, é possível implementar um proxy reverso na DMZ, que permite o acesso a outros serviços. Todos os serviços que são acessados a partir da rede externa são colocados na DMZ, garantindo que eles não acessem diretamente a rede interna protegida.Arquiteturas de Rede na DMZExistem duas arquiteturas principais para a implementação da DMZ: a arquitetura de um único firewall (single firewall) e a arquitetura de dois firewalls (dual firewall).Na arquitetura de um único firewall, há apenas um firewall que faz a interligação entre a rede externa e a DMZ. Esse firewall possui pelo menos três interfaces de rede para conectar as três redes distintas: a rede externa, a DMZ e a rede interna protegida. O tráfego da rede externa para a DMZ é permitido, assim como o tráfego da DMZ para a rede interna é controlado pelo firewall. Essa arquitetura é mais simples de ser implementada, mas também é considerada menos segura, pois um único ponto de falha pode comprometer toda a segurança da rede.Na arquitetura de dois firewalls, há dois firewalls que atuam em conjunto para proteger a rede interna. Um firewall é colocado entre a rede externa e a DMZ, e outro firewall é colocado entre a DMZ e a rede interna. Essa arquitetura cria uma camada adicional de segurança, pois o tráfego deve passar por dois firewalls para chegar à rede interna. Ela é mais complexa de ser implementada, mas oferece um nível de segurança maior do que a arquitetura de um único firewall.Considerações de SegurançaAo implementar uma DMZ, é importante levar em consideração algumas práticas de segurança para garantir a proteção da rede interna. Algumas considerações incluem: Segmentação de Rede: A DMZ deve ser isolada da rede interna por meio do uso de firewalls. Isso evita que um atacante, que conseguiu acesso à DMZ, comprometa diretamente a rede interna. Políticas de Acesso: Devem ser definidas políticas de acesso claras para controlar o tráfego entre a rede externa, a DMZ e a rede interna. Apenas o tráfego necessário para os serviços hospedados na DMZ deve ser permitido, enquanto todo o restante deve ser bloqueado. Atualizações de Segurança: Todos os dispositivos e servidores na DMZ devem estar com as atualizações de segurança em dia. Isso inclui aplicar patches de segurança, atualizar softwares e manter uma política de senhas fortes. Monitoramento de Tráfego: É essencial ter um sistema de monitoramento de tráfego na DMZ para identificar possíveis ataques ou comportamentos suspeitos. Isso permite uma resposta rápida a incidentes de segurança. Backup e Recuperação: É importante realizar backups periódicos dos servidores e dados na DMZ. Isso garante que, em caso de comprometimento ou falha, seja possível recuperar as informações importantes.Essas são apenas algumas das considerações de segurança ao implementar uma DMZ. Cada ambiente e organização pode ter requisitos específicos que devem ser levados em conta para garantir a segurança adequada da rede.ConclusãoA Zona Desmilitarizada (DMZ) é uma abordagem de segurança para redes de computadores que visa proteger a rede interna de uma organização ao permitir o acesso externo a serviços específicos. Ela atua como uma barreira intermediária entre a rede externa e a rede interna protegida, hospedando servidores e serviços que precisam ser acessados tanto internamente quanto externamente. A implementação adequada da DMZ, juntamente com práticas de segurança sólidas, ajuda a mitigar riscos e fortalecer a segurança da rede como um todo.Referência" }, { "title": "Qualificação em Curso técnicos em Sobral", "url": "/aulas/posts/cursos-tecnicos-em-sobral/", "categories": "AULAS, PROFISSÃO E FORMAÇÃO", "tags": "profissão, curso, Senac", "date": "2023-05-11 10:00:00 -0300", "snippet": "a Prefeitura de Sobral, por meio da Secretaria do Trabalho e Desenvolvimento Econômico (STDE), lançou vagas para cursos gratuitos dos programas de qualificação. As inscrições devem ser feitas no si...", "content": "a Prefeitura de Sobral, por meio da Secretaria do Trabalho e Desenvolvimento Econômico (STDE), lançou vagas para cursos gratuitos dos programas de qualificação. As inscrições devem ser feitas no site selecao.sobral.ce.gov.br ou presencialmente, na sede da STDE, de segunda a sexta-feira, das 8h às 12h e das 13h às 17h, na Avenida Lúcia Saboia, 215 - Centro.A iniciativa visa promover qualificação profissional em diversas áreas, para preparar a juventude sobralense para o mercado de trabalho, além de constituir um cadastro reserva para os projetos Capacita, Qualifica e Sobral Profissionalizado, que fazem parte dos programas de qualificação, em parceria com o Serviço Nacional de Aprendizagem Industrial (Senai) e com o Serviço Nacional de Aprendizagem Comercial (Senac).Neste primeiro edital de 2023, estão sendo ofertados para o projeto Capacita Sobral os cursos de: técnicas básicas em manicure e pedicure; ventosaterapia; culinária japonesa-sushi e sashimi; pizzas doces e salgadas; customizado: tendências de moda; confecção de bolsas e acessórios.Referente ao projeto Qualifica Sobral, a iniciativa também oferece os cursos de: barbeiro; programador de sistemas; instalador e reparador de computadores; marceneiro de móveis sob medida; mecânico de manutenção de motocicletas; e gesseiro. Além disso, também está disponível a qualificação de eletricista industrial do projeto Sobral Profissionalizado.Para realizar a inscrição, o interessado deverá apresentar, presencialmente, o original dos seguintes documentos: RG, CPF, comprovante escolar de matrícula ou certificado de conclusão e comprovante de residência. Caso opte por fazer a inscrição pela internet, basta anexar os mesmos documentos no formulário online.Programa de gratuidade no SenacO Programa Senac de Gratuidade (PSG) proporciona acesso gratuito a cursos de educação profissional, por meio de bolsas de estudos, para pessoas com renda familiar mensal per capita de até dois salários mínimos. Para participar basta fazer o cálculo da renda familiar e fazer a inscrição online no link: psg.ce.senac.br.São diversos cursos em áreas como saúde, gastronomia, informática, etc. Confira a lista de cursos no link: psg.ce.senac.br/oportunidades.Referências Senac Ceará PSG Sobral - Sistema de Seleção Sobral Secretaria do trabalho e desenvolvimento econômico - notícias Prefeitura de Sobral oferta vagas para cursos" }, { "title": "Programação visual com Netbeans", "url": "/aulas/posts/programacao-visual-com-netbeans/", "categories": "DESENVOLVIMENTO, PROGRAMADOR", "tags": "Senac, programador, programação, gui, java, ide, uml, diagrama", "date": "2023-05-10 17:00:00 -0300", "snippet": "O NetBeans é um ambiente de desenvolvimento integrado (IDE) popular que suporta várias linguagens de programação, incluindo Java, C/C++, PHP e HTML/CSS/JavaScript.Como utilizar o NetbeansEmbora o N...", "content": "O NetBeans é um ambiente de desenvolvimento integrado (IDE) popular que suporta várias linguagens de programação, incluindo Java, C/C++, PHP e HTML/CSS/JavaScript.Como utilizar o NetbeansEmbora o NetBeans seja conhecido principalmente pelo desenvolvimento Java, ele também possui recursos de desenvolvimento visual para criar interfaces gráficas de usuário (GUIs) de forma fácil e rápida. Aqui estão os passos básicos para usar o NetBeans para programar de forma visual: Instale o NetBeans: Faça o download e instale a versão mais recente do NetBeans no site oficial (netbeans.apache.org). Certifique-se de escolher a versão correta para a linguagem de programação que você deseja usar. Crie um novo projeto: Abra o NetBeans e clique em “File” (Arquivo) no menu superior e selecione “New Project” (Novo Projeto). Escolha a categoria relevante, como “Java” ou “Web”, e selecione o tipo de projeto que deseja criar. Dê um nome ao projeto e escolha o local onde deseja salvá-lo. Crie uma GUI: Com o projeto criado, clique com o botão direito do mouse na pasta “Source Packages” (Pacotes de Origem) do seu projeto e selecione “New” (Novo) e, em seguida, “JFrame Form” (Formulário de JFrame) ou “JPanel Form” (Formulário de JPanel), dependendo da sua necessidade. Projete a GUI: O NetBeans abrirá uma janela de design visual para a sua GUI. Você pode arrastar e soltar componentes da paleta (localizada no canto direito da interface) para a área de design para criar a interface do usuário. Os componentes incluem botões, rótulos, campos de texto e muitos outros. Você também pode ajustar as propriedades dos componentes, como tamanho, posição, cor, fonte, etc. Adicione código: Depois de projetar a GUI, você pode adicionar lógica ao seu programa. Clique duas vezes em um componente para criar um evento associado a ele, como um botão de clique. O NetBeans abrirá automaticamente o editor de código para o evento selecionado, onde você pode adicionar seu código Java para lidar com a lógica do evento. Execute o programa: Depois de concluir o design e a codificação, você pode executar o programa clicando no botão “Run” (Executar) no menu superior ou pressionando a tecla F6. O NetBeans compilará o código e executará o programa, exibindo a interface gráfica que você criou. Esses são apenas os passos básicos para começar a usar o NetBeans para programação visual. O NetBeans possui muitos recursos adicionais que podem facilitar o desenvolvimento, como depuração, controle de versão integrado, suporte a frameworks e muito mais. Conforme você ganha mais experiência, pode explorar esses recursos para melhorar ainda mais seu processo de desenvolvimento.Diagramas de classe com EasyUMLO EasyUML permite criar visualmente diagramas de classes, e gerar o código em java e vice-versa.Como utilizar o EasyUMLPara criar diagramas de classes usando o plugin EasyUML no NetBeans, siga as etapas abaixo: Instale o plugin EasyUML: Visite o repositório do Github e baixe os arquivos, conforme o vídeo explicativo. Abra o NetBeans e vá para “Tools” (Ferramentas) no menu superior e selecione “Plugins” (Plugins). Na janela “Plugins”, clique na guia “Downloaded Plugins” (Plugins Baixados) e pesquise pela pasta “EasyUML” baixados anteriormente. Selecione os plugin “EasyUML” na lista de resultados e clique no botão “Install” (Instalar) para instalá-los. Siga as instruções fornecidas pelo assistente de instalação para concluir o processo. Crie um novo projeto UML com diagrama de classe: Com o plugin EasyUML instalado, você pode criar um novo diagrama de classe. Crie um novo projeto: Abra o NetBeans e clique em “File” (Arquivo) no menu superior e selecione “New Project” (Novo Projeto). Escolha a categoria “UML”, e selecione o tipo de projeto “UML Diagrams Project”. Dê um nome ao projeto e escolha o local onde deseja salvá-lo. Clique com o botão direito do mouse na pasta do projeto em que deseja criar o diagrama, vá para “New” (Novo) e selecione “Other” (outro), selecione: “UML” e, em seguida, “Class Diagram” (Diagrama de Classe). Adicione classes ao diagrama: Com o diagrama de classe aberto, você pode adicionar classes a ele. Clique com o botão direito do mouse no espaço em branco do diagrama e selecione “Add Class” (Adicionar Classe). Digite o nome da classe e pressione Enter. Repita esse processo para adicionar outras classes ao seu diagrama. Adicione relacionamentos entre classes: Com as classes adicionadas, você pode adicionar relacionamentos entre elas. Clique com o botão direito do mouse em uma classe e vá para “Add Relationship” (Adicionar Relacionamento). Selecione o tipo de relacionamento que deseja adicionar, como associação, herança, dependência, etc. Clique na classe de destino para estabelecer o relacionamento. Repita esse processo para adicionar outros relacionamentos conforme necessário. Personalize o diagrama: Você pode personalizar o diagrama de classe conforme suas preferências. Clique com o botão direito do mouse em uma classe ou relacionamento e selecione “Properties” (Propriedades) para ajustar as configurações, como nome da classe, multiplicidade do relacionamento, visibilidade dos membros, etc. Você também pode redimensionar as classes e reposicioná-las no diagrama conforme necessário. Salve o diagrama: Após concluir o diagrama de classe, salve-o clicando em “File” (Arquivo) no menu superior e selecionando “Save” (Salvar). Escolha um local e um nome para o arquivo de diagrama e clique em “Save” (Salvar). O EasyUML é um plugin útil para criar diagramas de classes no NetBeans, mas tenha em mente que ele pode ter algumas limitações e não possui todos os recursos avançados de ferramentas dedicadas para modelagem UML. Para projetos maiores e mais complexos, é recomendável considerar o uso de ferramentas específicas de modelagem UML, por exemplo o PlantUML, e o Mermaid.Gerando código JavaPara gerar código Java a partir do diagrama de classe criado no plugin EasyUML no NetBeans: Gerar código Java: Após criar o diagrama de classe no EasyUML, clique com o botão direito do mouse no diagrama no painel de projetos ou na área de trabalho do NetBeans. No menu de contexto, selecione “Generate Code” (Gerar Código). Escolha as opções de geração de código: Uma nova janela será aberta com opções de geração de código. Você pode selecionar as configurações desejadas, como o local onde deseja salvar o código gerado, o pacote de destino, as opções de importação, entre outros. Selecione as opções apropriadas para o seu projeto. Iniciar a geração de código: Após escolher as opções de geração de código, clique no botão “Generate” (Gerar). O EasyUML converterá o diagrama de classe em código Java com base nas configurações selecionadas. Revisar e ajustar o código gerado: Uma vez concluída a geração de código, você poderá revisar o código Java gerado. Abra os arquivos de código Java no NetBeans e verifique se o código atende às suas necessidades. Se necessário, você pode fazer ajustes adicionais no código gerado. Salvar e compilar o código: Após revisar e fazer os ajustes necessários no código gerado, salve os arquivos de código Java no local desejado dentro do seu projeto NetBeans. Em seguida, compile o código para garantir que não haja erros de compilação. Você pode fazer isso pressionando a tecla F9 ou clicando em “Run” (Executar) no menu superior e selecionando “Compile Project” (Compilar Projeto). Pronto! Agora você gerou o código Java a partir do diagrama de classe criado no plugin EasyUML no NetBeans. Lembre-se de que o código gerado é uma base inicial e pode exigir ajustes adicionais para atender aos requisitos específicos do seu projeto.Referências Download dos Plugins do easyUML NetBeans - Getting Help" }, { "title": "Segurança de redes", "url": "/aulas/posts/seguranca-de-rede/", "categories": "AULAS, INFRAESTRUTURA DE REDES", "tags": "infraestrutura, segurança", "date": "2023-05-04 10:40:00 -0300", "snippet": "A segurança em redes de computadores é um tema fundamental na era da informação, em que a troca de dados e o acesso a sistemas ocorrem de forma ampla e constante. Nesse contexto, é essencial compre...", "content": "A segurança em redes de computadores é um tema fundamental na era da informação, em que a troca de dados e o acesso a sistemas ocorrem de forma ampla e constante. Nesse contexto, é essencial compreender os conceitos básicos sobre segurança, diferenciar segurança física e segurança lógica, e explorar os códigos maliciosos, que representam uma grande ameaça. Além disso, é importante entender o valor da informação para as organizações e a necessidade de protegê-la adequadamente.Conceito de InformaçãoAntes de abordarmos a segurança de informação, é necessário discutir o conceito de informação em si. A informação é um dado contextualizado que carrega uma interpretação lógica natural. Do ponto de vista organizacional, a informação é um ativo de valor, e, portanto, requer proteção adequada diante das crescentes ameaças que surgem com o avanço das redes de computadores e da internet.Ativos, Ameaças e VulnerabilidadesNa segurança de informação, são utilizados diversos conceitos-chave. Um deles é o conceito de ativo, que engloba todos os recursos suscetíveis a algum tipo de ataque e que, portanto, precisam ser protegidos. Por outro lado, ameaça é uma causa potencial de um incidente indesejado que pode resultar em danos para um sistema ou organização. Já a vulnerabilidade é a fragilidade de um ativo, ou de um grupo de ativos, que pode ser explorada por uma ou mais ameaças. O risco, por sua vez, é a probabilidade de uma fonte de ameaça explorar uma vulnerabilidade, resultando em um impacto para a organização.Princípios da Segurança de InformaçãoA segurança de informação se baseia em alguns princípios fundamentais. Dentre eles, destacam-se: Confidencialidade: refere-se à manutenção das informações longe de usuários não autorizados. Autenticidade: garante a identidade do autor da informação, impedindo que ela seja falsamente negada. Disponibilidade: assegura que a informação esteja sempre acessível no momento desejado. Integridade: garante que a informação não tenha sido alterada ou violada indevidamente. Não repúdio: evita que o autor negue falsamente a autoria de uma informação.Esses princípios são essenciais para garantir a segurança e a confiabilidade das informações em um ambiente digital.Modalidades de AmeaçaExistem diferentes modalidades de ameaça que podem comprometer a segurança de informação. As principais são: Interceptação: ocorre quando informações são acessadas por entidades não autorizadas, violando a confidencialidade. Interrupção: tenta impedir o acesso à informação, interrompendo o fluxo normal das mensagens até o destino. Modificação: consiste na alteração dos dados por entidades não autorizadas, violando a integridade. Fabricação: acontece quando entidades não autorizadas produzem dados falsos que são inseridos no sistema, comprometendo a autenticidade e a confiabilidade da informação.Segurança Física e Segurança LógicaA segurança em redes de computadores pode ser dividida em dois aspectos principais: segurança física e segurança lógica.A segurança física diz respeito às medidas tomadas para proteger os equipamentos físicos e as instalações que abrigam os sistemas de rede. Isso inclui o controle de acesso físico aos ambientes, a utilização de câmeras de segurança, a proteção contra incêndios e desastres naturais, entre outras medidas. A segurança física é fundamental para prevenir o acesso não autorizado aos equipamentos e a proteção contra danos físicos que podem comprometer a disponibilidade dos sistemas.Já a segurança lógica trata das medidas de proteção que envolvem o acesso, a transmissão e o armazenamento dos dados em um ambiente digital. Isso inclui a utilização de criptografia para proteger a confidencialidade dos dados, o controle de acesso aos sistemas por meio de autenticação e autorização, o monitoramento de eventos e o uso de firewalls e sistemas de detecção de intrusões para prevenir ataques cibernéticos. A segurança lógica visa garantir a integridade, a confidencialidade e a disponibilidade das informações.Ambos os aspectos são igualmente importantes e devem ser abordados de forma integrada para garantir uma proteção efetiva das redes de computadores.Códigos MaliciososOs códigos maliciosos, também conhecidos como malware, são programas desenvolvidos com a intenção de causar danos aos sistemas e às informações. Existem diferentes tipos de malware, incluindo vírus, worms, cavalos de Troia, ransomware, spyware, entre outros.Os vírus são programas que se replicam e se espalham para outros arquivos e sistemas, causando danos à medida que se propagam. Os worms são programas autônomos que se espalham rapidamente por meio de redes, explorando vulnerabilidades em sistemas e serviços. Os cavalos de Troia são programas aparentemente inofensivos, mas que executam ações maliciosas sem o conhecimento do usuário. O ransomware é um tipo de malware que criptografa os arquivos do sistema e exige um resgate para desbloqueá-los. O spyware é projetado para monitorar e coletar informações sem o consentimento do usuário.A proteção contra malware envolve o uso de software antivírus e antimalware, a atualização regular do sistema operacional e das aplicações, o cuidado ao abrir anexos de e-mails ou clicar em links suspeitos, e a conscientização do usuário sobre as práticas seguras de navegação na internet.ConclusãoA segurança em redes de computadores é um aspecto crucial na proteção das informações e dos sistemas. Compreender os conceitos básicos de segurança, os princípios fundamentais e as modalidades de ameaça é essencial para implementar medidas efetivas de proteção. Além disso, é importante estar ciente dos códigos maliciosos e das melhores práticas para prevenir e mitigar seus impactos. A segurança física e lógica devem ser abordadas em conjunto, garantindo a proteção dos equipamentos e das informações.Referências" }, { "title": "Home office ou trabalho remoto", "url": "/aulas/posts/home-office-ou-trabalho-remoto-copy/", "categories": "AULAS, PROFISSÃO E FORMAÇÃO", "tags": "profissão", "date": "2023-05-04 10:00:00 -0300", "snippet": "O Home Office e o Trabalho Remoto têm se tornado cada vez mais comuns nas empresas. São modelos que permitem que os colaboradores trabalhem fora do ambiente da empresa, seja em casa ou em qualquer ...", "content": "O Home Office e o Trabalho Remoto têm se tornado cada vez mais comuns nas empresas. São modelos que permitem que os colaboradores trabalhem fora do ambiente da empresa, seja em casa ou em qualquer outro lugar, desde que tenham acesso à internet e a ferramentas de trabalho necessárias.O Home Office é uma modalidade em que o colaborador trabalha exclusivamente em casa, podendo estabelecer sua própria rotina e usufruindo do conforto do lar. Já o Trabalho Remoto é uma prestação de serviços que é feita a distância, ou seja, o colaborador não está nas dependências da empresa e presta serviço de onde ele se encontra.Na área de Tecnologia da Informação, o Home Office é pioneiro e é o modelo que mais emprega colaboradores em empresas do Brasil e do exterior. Segundo dados do Ibope, cerca de 20% dos profissionais brasileiros trabalham em regime de Home Office.Entre as vantagens do Home Office estão o conforto, a flexibilidade na rotina e a possibilidade de estabelecer sua própria agenda. Porém, é necessário ter uma disciplina rígida e ser produtivo como em um ambiente de trabalho convencional.Já o Trabalho Remoto está se tornando uma prática usual nas empresas, trazendo novos modos de desempenhar as tarefas. Entre as vantagens do Trabalho Remoto estão a melhor gestão de funcionários e colaboradores, a melhoria na comunicação, o controle de dados e informações, a redução dos custos e a dispensa da necessidade de um espaço físico.Em resumo, tanto o Home Office quanto o Trabalho Remoto são modelos que permitem maior flexibilidade e produtividade para os colaboradores, além de reduzir custos para as empresas. É importante lembrar que para adotar esses modelos é necessário ter disciplina, organização e comprometimento para manter a qualidade do trabalho.Tabela comparativa   Home Office Trabalho Remoto O que é? Trabalha de casa Prestação de serviços a distância, sem estar na empresa Áreas comuns TI, negócios, contabilidade, atendimento ao cliente TI, negócios, marketing, design, escrita, atendimento ao cliente Localização Casa Qualquer lugar com acesso à internet Vantagens Conforto, flexibilidade na rotina, economia Melhor gestão de funcionários, comunicação, redução de custos Desvantagens Distrações, necessidade de disciplina rigorosa Dependência de tecnologia, falta de interação pessoal Nota: As informações apresentadas na tabela acima são gerais e podem variar dependendo do contexto e das políticas de cada empresa.Referências Home office é uma das possibilidades na área de Tecnologia da Informação Qual a diferenca entre trabalho remoto e home office Trabalho remoto tudo que voce precisa saber sobre o assunto" }, { "title": "Registros em Java", "url": "/aulas/posts/registros-em-java/", "categories": "DESENVOLVIMENTO, PROGRAMADOR", "tags": "Senac, programador, programação, gui, java", "date": "2023-05-03 17:00:00 -0300", "snippet": "Imagine quanto trabalho seu amigo terá para controlar todas as fichas. Para ajudá-lo, você pode desenvolver um programa de computador. Antes, porém, deve criar um algoritmo, seguindo algumas etapas...", "content": "Imagine quanto trabalho seu amigo terá para controlar todas as fichas. Para ajudá-lo, você pode desenvolver um programa de computador. Antes, porém, deve criar um algoritmo, seguindo algumas etapas.Declare as variáveis necessárias para ler a ficha.NOME, ESTADOCIVIL, NOMECONJ, ENDERECO, BAIRRO,CIDADE, UF, EMAIL: literalIDADE, DATANASC, NUMERO, CEP, FONE1, FONE2, FONE3: numéricoSe quiser, você pode utilizar um vetor de três posições para os telefones.NOME, ESTADOCIVIL, NOMECONJ, ENDERECO, BAIRRO,CIDADE, UF, EMAIL: literalIDADE, DATANASC, NUMERO, CEP: numéricoFONE: conjunto [1..3] numéricoRegistro de fichaPara resolver o problema anterior, existe o recurso de se utilizar uma variável heterogênea, isto é, que permite armazenar vários tipos diferentes de constantes. Esse recurso chama-se Registro.Ao contrário do vetor e da matriz, o registro pode conter variáveis simples e/ou compostas. As variáveis do registro são chamadas Campos.Observe como fica a declaração das variáveis por meio do registro FICHA.Declarando as variáveis do registroFICHA: registroNOME, ESTADOCIVIL, NOMECONJ, ENDERECO, BAIRRO,CIDADE, UF, EMAIL: literalIDADE, DATANASC, NUMERO, CEP: numéricoFONE: conjunto [1..3] numéricofim-registroExemplo de Registro de alunosUtilizar a estrutura de registro para cadastrar matrículas e notas de alunos em determinada disciplina.Problema: Monte o algoritmo de cadastramento de alunos utilizando a estrutura de registros. Represente o algoritmo em pseudocódigo.Montar um algoritmo de cadastramento de alunos utilizando a estrutura de registros. Represente o algoritmo em pseudocódigo, e o código em java para fazer um formulário em uma gui swing, salvando em arquivo texto.Segue abaixo o pseudocódigo para o algoritmo de cadastramento de alunos utilizando a estrutura de registros, seguido do código em Java para criar um formulário em uma GUI Swing e salvar as informações em um arquivo de texto:Pseudocódigo: Definir a estrutura de registro para o aluno, contendo os campos nome, idade, matrícula e curso. Inicializar as variáveis de entrada nome, idade, matrícula e curso. Criar um formulário com campos de entrada para nome, idade, matrícula e curso. Ler as informações de entrada do usuário e armazená-las nas variáveis correspondentes. Criar um objeto do tipo Aluno com as informações armazenadas nas variáveis. Escrever as informações do objeto Aluno em um arquivo de texto. Exibir uma mensagem de confirmação para o usuário.Código em Java:// Definir a estrutura de registro para o alunoimport java.awt.GridLayout;import java.awt.event.ActionEvent;import java.awt.event.ActionListener;import java.io.FileWriter;import java.io.IOException;import java.io.PrintWriter;import javax.swing.JButton;import javax.swing.JFrame;import javax.swing.JLabel;import javax.swing.JOptionPane;import javax.swing.JPanel;import javax.swing.JTextField;class Aluno extends JFrame implements ActionListener{ String nome; int idade; int matricula; String curso;// Inicializar as variáveis de entradaJTextField nomeTextField, idadeTextField, matriculaTextField, cursoTextField; public Aluno() { super(\"Cadastro de Aluno\");}// Criar o formuláriopublic void CadastroAluno() { // Criar os campos de entrada para nome, idade, matrícula e curso JLabel nomeLabel = new JLabel(\"Nome:\"); nomeTextField = new JTextField(20); JLabel idadeLabel = new JLabel(\"Idade:\"); idadeTextField = new JTextField(3); JLabel matriculaLabel = new JLabel(\"Matrícula:\"); matriculaTextField = new JTextField(10); JLabel cursoLabel = new JLabel(\"Curso:\"); cursoTextField = new JTextField(20); // Criar o botão para submeter o formulário JButton cadastrarButton = new JButton(\"Cadastrar\"); cadastrarButton.addActionListener(this); // Adicionar os campos de entrada e o botão ao formulário JPanel panel = new JPanel(new GridLayout(5, 2)); panel.add(nomeLabel); panel.add(nomeTextField); panel.add(idadeLabel); panel.add(idadeTextField); panel.add(matriculaLabel); panel.add(matriculaTextField); panel.add(cursoLabel); panel.add(cursoTextField); panel.add(new JLabel(\"\")); panel.add(cadastrarButton); add(panel); // Configurar o tamanho e a visibilidade do formulário setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE); setSize(300, 200); setVisible(true);}// Ação do botão cadastrarpublic void actionPerformed(ActionEvent event) { try { // Ler as informações de entrada do usuário String nome = nomeTextField.getText(); int idade = Integer.parseInt(idadeTextField.getText()); int matricula = Integer.parseInt(matriculaTextField.getText()); String curso = cursoTextField.getText(); // Criar um objeto Aluno com as informações lidas Aluno aluno = new Aluno(); aluno.nome = nome; aluno.idade = idade; aluno.matricula = matricula; aluno.curso = curso; // Escrever as informações do objeto Aluno em um arquivo de texto FileWriter writer = new FileWriter(\"alunos.txt\", true); PrintWriter printer = new PrintWriter(writer); printer.printf(\"%s,%d,%d,%s\\\\n\", aluno.nome, aluno.idade, aluno.matricula, aluno.curso); printer.close(); // Exibir uma mensagem de confirmação para o usuário JOptionPane.showMessageDialog(this, \"Aluno cadastrado com sucesso!\"); // Limpar os campos de entrada nomeTextField.setText(\"\"); idadeTextField.setText(\"\"); matriculaTextField.setText(\"\"); cursoTextField.setText(\"\"); } catch (NumberFormatException e) { // Exibir uma mensagem de erro para o usuário caso a idade ou a matrícula não sejam números JOptionPane.showMessageDialog(this, \"A idade e a matrícula devem ser números!\"); } catch (IOException e) { // Exibir uma mensagem de erro para o usuário caso ocorra um erro ao escrever no arquivo JOptionPane.showMessageDialog(this, \"Erro ao cadastrar aluno!\"); }}// Método main para iniciar o programapublic static void main(String[] args) { Aluno Aluno = new Aluno(); Aluno.CadastroAluno();}}Este código cria uma interface gráfica para cadastro de alunos com campos para nome, idade, matrícula e curso. Quando o usuário clica no botão “Cadastrar”, o código lê as informações dos campos de entrada, cria um objeto Aluno com essas informações, escreve as informações do aluno em um arquivo de texto e exibe uma mensagem de confirmação para o usuário. Se a idade ou a matrícula não forem números, o código exibe uma mensagem de erro. Se ocorrer um erro ao escrever no arquivo, o código também exibe uma mensagem de erro.Este é apenas um exemplo que deve ser evoluído para a solução do problemas inicial.Referências Xavier, Gley Fabiano Cardoso. Lógica de programação. E-book. Disponível em: https://bibliotecadigitalsenac.com.br/?from=%3FcontentInfo%3D1306#/legacy/epub/1306 Acesso em 17/04/2023. Java Files - W3Schools Introduction to GUI Building Lesson: Learning Swing with the NetBeans IDE (The Java™ Tutorials &gt; Creating a GUI With Swing) Setting up the CelsiusConverter Project (The Java™ Tutorials &gt; Creating a GUI With Swing &gt; Learning Swing with the NetBeans IDE)" }, { "title": "Exercícios com interfaces gráfica em Java", "url": "/aulas/posts/exercicios-com-interface-grafica-em-java/", "categories": "DESENVOLVIMENTO, PROGRAMADOR", "tags": "Senac, programador, programação, gui, java", "date": "2023-05-02 17:00:00 -0300", "snippet": "Para usar interfaces gráficas em Java, podemos utilizar a biblioteca Swing, que fornece um conjunto de componentes e ferramentas para criar GUIs (Graphical User Interfaces) em Java.Exercícios propo...", "content": "Para usar interfaces gráficas em Java, podemos utilizar a biblioteca Swing, que fornece um conjunto de componentes e ferramentas para criar GUIs (Graphical User Interfaces) em Java.Exercícios propostos: Faça um algoritmo para ler dois números e imprimir o maior, o menor ou então dizer se são iguais. Faça um algoritmo para ler um número inteiro e dizer se o número lido é par ou impar. Faça um algoritmo para ler dois números A e B e dizer se A é divisível por B. Faça um algoritmo para ler dois números e imprimi-los em ordem crescente. Faça um algoritmo para ler três números e imprimir o maior.A seguir, exemplos básico de como criar uma interface gráfica com Swing em Java:1. Ler números e mostrar o maiorDesenvolver um algoritmo em java, usando gui swing, para resolver o seguinte problema: Faça um algoritmo para ler três números e imprimir o maior.Para desenvolver um algoritmo em Java usando GUI Swing para ler três números e imprimir o maior, você pode seguir os seguintes passos: Crie uma classe que estenda a classe JFrame, que será a janela principal do seu aplicativo. Vamos chamar essa classe de “MaiorNumeroGUI”. Dentro da classe MaiorNumeroGUI, crie três componentes JLabel para exibir as instruções de entrada, JTextField para o usuário inserir os números e um JButton para acionar o algoritmo de verificação. No construtor da classe MaiorNumeroGUI, configure a janela com um título e um tamanho apropriado. Em seguida, adicione os componentes JLabel, JTextField e JButton à janela, usando a classe LayoutManager apropriada para organizar os componentes. Adicione um ouvinte de eventos ao JButton para que, quando o usuário clicar no botão, o programa execute o algoritmo para encontrar o maior número. No método actionPerformed do ouvinte de eventos, leia os três números do JTextField e compare-os para encontrar o maior. Em seguida, exiba o resultado usando um JOptionPane. Compile e execute o aplicativo para testar.Segue abaixo um exemplo de código que implementa esses passos:import java.awt.BorderLayout;import java.awt.GridLayout;import javax.swing.JButton;import javax.swing.JFrame;import javax.swing.JLabel;import javax.swing.JPanel;import javax.swing.JTextField;public class MaiorNumeroGUI extends JFrame{ private JLabel label1, label2, label3, resultado; private JTextField campo1, campo2; private JButton botao; public MaiorNumeroGUI() { super(\"Encontre o maior número\"); setSize(400, 300); setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE); label1 = new JLabel(\"Insira dois números:\"); label2 = new JLabel(\"Número 1:\"); label3 = new JLabel(\"Número 2:\"); resultado = new JLabel(\" \"); campo1 = new JTextField(10); campo2 = new JTextField(10); botao = new JButton(\"Encontrar o maior\"); JPanel painel = new JPanel(); painel.setLayout(new GridLayout(4, 2, 10, 10)); painel.add(label1); painel.add(new JLabel(\"\")); painel.add(label2); painel.add(campo1); painel.add(label3); painel.add(campo2); painel.add(botao); painel.add(resultado); add(painel, BorderLayout.CENTER); //add(resultado, BorderLayout.SOUTH); botao.addActionListener(e -&gt; { int num1 = Integer.parseInt(campo1.getText()); int num2 = Integer.parseInt(campo2.getText()); int maior = num1; if (num1 &gt; maior) { maior = num1; } else { maior = num2; } resultado.setText(\"O maior número é: \" + maior); }); } public static void main(String[] args) { MaiorNumeroGUI app = new MaiorNumeroGUI(); app.setVisible(true); }}2. Faça um algoritmo para ler dois números A e B e dizer se A é divisível por BPara resolver o problema de ler dois números A e B e dizer se A é divisível por B, podemos seguir os seguintes passos: Crie uma nova classe chamada “DivisibilidadeGUI” que estende a classe JFrame. Dentro da classe DivisibilidadeGUI, crie dois componentes JLabel para exibir as instruções de entrada, dois JTextField para o usuário inserir os números e um JButton para acionar o algoritmo de verificação. No construtor da classe DivisibilidadeGUI, configure a janela com um título e um tamanho apropriado. Em seguida, adicione os componentes JLabel, JTextField e JButton à janela, usando a classe LayoutManager apropriada para organizar os componentes. Adicione um ouvinte de eventos ao JButton para que, quando o usuário clicar no botão, o programa execute o algoritmo para verificar a divisibilidade. No método actionPerformed do ouvinte de eventos, leia os dois números do JTextField e verifique se o primeiro número é divisível pelo segundo. Exiba o resultado usando um JOptionPane. Compile e execute o aplicativo para testar.Segue abaixo um exemplo de código que implementa esses passos:import javax.swing.*;import java.awt.*;import java.awt.event.*;public class DivisibilidadeGUI extends JFrame implements ActionListener { private JLabel label1, label2, resultado; private JTextField campo1, campo2; private JButton botao; public DivisibilidadeGUI() { super(\"Verificar Divisibilidade\"); setSize(300, 200); setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE); label1 = new JLabel(\"Insira dois números:\"); label2 = new JLabel(\"\"); resultado = new JLabel(\"\"); campo1 = new JTextField(10); campo2 = new JTextField(10); botao = new JButton(\"Verificar\"); botao.addActionListener(this); JPanel painel = new JPanel(); painel.setLayout(new GridLayout(4, 2, 10, 10)); painel.add(label1); painel.add(label2); painel.add(new JLabel(\"Número 1:\")); painel.add(campo1); painel.add(new JLabel(\"Número 2:\")); painel.add(campo2); painel.add(botao); painel.add(resultado); add(painel, BorderLayout.CENTER); } public void actionPerformed(ActionEvent evento) { int num1 = Integer.parseInt(campo1.getText()); int num2 = Integer.parseInt(campo2.getText()); if (num1 % num2 == 0) { resultado.setText(num1 + \" é divisível por \" + num2); } else { resultado.setText(num1 + \" não é divisível por \" + num2); } } public static void main(String[] args) { DivisibilidadeGUI app = new DivisibilidadeGUI(); app.setVisible(true); }}Nesse exemplo de código, estamos verificando a divisibilidade do primeiro número pelo segundo número usando o operador módulo (%). Se o resultado da divisão entre os dois números for zero, então o primeiro número é divisível pelo segundo número, caso contrário, o primeiro número não é divisível pelo segundo número.3. Ler dois números e imprimir o maior, o menor ou então dizer se são iguaisPara resolver o problema de ler dois números e imprimir o maior, o menor ou dizer se são iguais, podemos seguir os seguintes passos: Crie uma nova classe chamada “MaiorMenorIgualGUI” que estende a classe JFrame. Dentro da classe MaiorMenorIgualGUI, crie dois componentes JLabel para exibir as instruções de entrada, dois JTextField para o usuário inserir os números e um JButton para acionar o algoritmo de verificação. No construtor da classe MaiorMenorIgualGUI, configure a janela com um título e um tamanho apropriado. Em seguida, adicione os componentes JLabel, JTextField e JButton à janela, usando a classe LayoutManager apropriada para organizar os componentes. Adicione um ouvinte de eventos ao JButton para que, quando o usuário clicar no botão, o programa execute o algoritmo para verificar o maior, o menor ou dizer se são iguais. No método actionPerformed do ouvinte de eventos, leia os dois números do JTextField e compare-os usando operadores de comparação. Em seguida, exiba o resultado usando um JOptionPane. Compile e execute o aplicativo para testar.Segue abaixo o código atualizado que verifica se o número A é divisível pelo número B:import javax.swing.*;import java.awt.*;import java.awt.event.*;public class MaiorMenorIgualGUI extends JFrame implements ActionListener { private JLabel label1, label2, resultado; private JTextField campo1, campo2; private JButton botao; public MaiorMenorIgualGUI() { super(\"Maior, Menor ou Igual\"); setSize(600, 250); setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE); label1 = new JLabel(\"Insira dois números:\"); label2 = new JLabel(\"\"); resultado = new JLabel(\"\"); campo1 = new JTextField(10); campo2 = new JTextField(10); botao = new JButton(\"Verificar\"); botao.addActionListener(this); JPanel painel = new JPanel(); painel.setLayout(new GridLayout(4, 2, 10, 10)); painel.add(label1); painel.add(label2); painel.add(new JLabel(\"Número 1:\")); painel.add(campo1); painel.add(new JLabel(\"Número 2:\")); painel.add(campo2); painel.add(botao); painel.add(resultado); add(painel, BorderLayout.CENTER); } public void actionPerformed(ActionEvent evento) { int num1 = Integer.parseInt(campo1.getText()); int num2 = Integer.parseInt(campo2.getText()); if (num1 &gt; num2) { resultado.setText(num1 + \" é o maior número.\"); } else if (num2 &gt; num1) { resultado.setText(num2 + \" é o maior número.\"); } else { resultado.setText(\"Os números são iguais.\"); } if (num1 &lt; num2) { resultado.setText(resultado.getText() + \"\\n\" + num1 + \" é o menor número.\"); } else if (num2 &lt; num1) { resultado.setText(resultado.getText() + \"\\n\" + num2 + \" é o menor número.\"); } else { resultado.setText(resultado.getText() + \"\\n\" + \"Os números são iguais.\"); } } public static void main(String[] args) { MaiorMenorIgualGUI app = new MaiorMenorIgualGUI(); app.setVisible(true); } }Esse código é muito semelhante ao anterior, mas adiciona um novo caso de verificação na função actionPerformed. Usamos o operador de módulo (%) para verificar se num1 é divisível por num2. Se o resultado da operação de módulo for zero, num1 é divisível por num2, caso contrário, não é divisível. O resultado é então exibido na tela usando o componente JLabel.Exemplo de menu para selecionar os problemas anterioresPara criar uma janela com menu que permita ao usuário escolher qual exemplo executar, podemos usar a classe JMenuBar do Java Swing. Essa classe nos permite adicionar um menu à nossa janela, e cada item do menu pode executar uma ação específica quando é selecionado.Segue abaixo o código completo para uma janela com menu que exibe os três exemplos anteriores:import java.awt.event.ActionEvent;import java.awt.event.ActionListener;import javax.swing.JFrame;import javax.swing.JMenu;import javax.swing.JMenuBar;import javax.swing.JMenuItem;public class ExemplosGUI extends JFrame implements ActionListener { private JMenuBar menuBar; private JMenu exemplosMenu; private JMenuItem maiorMenuItem, divisibilidadeMenuItem, maiorMenorMenuItem; public ExemplosGUI() { super(\"Exemplos\"); setSize(300, 200); setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE); // Cria o menu menuBar = new JMenuBar(); exemplosMenu = new JMenu(\"Exemplos\"); // Adiciona os itens do menu maiorMenuItem = new JMenuItem(\"Maior número\"); maiorMenuItem.addActionListener(this); exemplosMenu.add(maiorMenuItem); divisibilidadeMenuItem = new JMenuItem(\"Divisibilidade\"); divisibilidadeMenuItem.addActionListener(this); exemplosMenu.add(divisibilidadeMenuItem); maiorMenorMenuItem = new JMenuItem(\"Maior, Menor ou Igual\"); maiorMenorMenuItem.addActionListener(this); exemplosMenu.add(maiorMenorMenuItem); // Adiciona o menu à barra de menu menuBar.add(exemplosMenu); // Define a barra de menu da janela setJMenuBar(menuBar); } public void actionPerformed(ActionEvent evento) { if (evento.getSource() == maiorMenuItem) { // Executa o exemplo de encontrar o maior de três números new MaiorNumeroGUI().setVisible(true); } else if (evento.getSource() == divisibilidadeMenuItem) { // Executa o exemplo de verificar divisibilidade new DivisibilidadeGUI().setVisible(true); } else if (evento.getSource() == maiorMenorMenuItem) { // Executa o exemplo de encontrar o maior, menor ou igual new MaiorMenorIgualGUI().setVisible(true); } } public static void main(String[] args) { ExemplosGUI app = new ExemplosGUI(); app.setVisible(true); }}Nesse código, criamos um objeto da classe JMenuBar e um objeto da classe JMenu. Em seguida, adicionamos os itens do menu usando a classe JMenuItem. Cada item é configurado com um nome e um ActionListener que será executado quando o item for selecionado.A seguir, adicionamos o menu à barra de menu usando o método add. Finalmente, definimos a barra de menu da janela usando o método setJMenuBar.No método actionPerformed, verificamos qual item do menu foi selecionado usando o método getSource. Dependendo do item selecionado, executamos o exemplo correspondente criando uma nova instância da classe apropriada e tornando-a visível.Dessa forma, o usuário pode escolher qual exemplo executar a partir do menu na janela.Referências Introduction to GUI Building Lesson: Learning Swing with the NetBeans IDE (The Java™ Tutorials &gt; Creating a GUI With Swing) Setting up the CelsiusConverter Project (The Java™ Tutorials &gt; Creating a GUI With Swing &gt; Learning Swing with the NetBeans IDE)" }, { "title": "Funcionamento do IP v4 e v6", "url": "/aulas/posts/funcionamento-do-ip-v4-e-v6/", "categories": "AULAS, INFRAESTRUTURA DE REDES", "tags": "infraestrutura, simulador, packet tracer", "date": "2023-05-02 10:40:00 -0300", "snippet": "O endereço IP é uma representação numérica criada para identificar uma interface específica em uma rede. Mesmo que muitas pessoas conheçam e usem esse endereço, não sabem como ele funciona por trás...", "content": "O endereço IP é uma representação numérica criada para identificar uma interface específica em uma rede. Mesmo que muitas pessoas conheçam e usem esse endereço, não sabem como ele funciona por trás das cortinas. Este artigo tem como objetivo ajudá-lo a entender como funciona o IP, desde a criação até o presente momento, contextualizando o tema para o público em geral.IPHistória do IPO desenvolvimento de tecnologias de comunicação, como os protocolos TCP e UDP e o HTTP, tornou possível a existência da Internet. O IP (Internet Protocol) foi criado para permitir que computadores se comuniquem em uma rede e é responsável por encaminhar pacotes de dados de um ponto a outro. O primeiro IP, chamado de RFC 760, foi publicado em janeiro de 1980 pela Advanced Research Project Agency Network (ARPANET) dos Estados Unidos. O protocolo IPv4 foi definido no RFC 791, em setembro de 1981.As primeiras versões do protocolo, versões 1, 2 e 3 foram experimentais, assim como a versão 5. O IPv4 foi criado em uma época em que os computadores tinham pouquíssima memória e as conexões eram muito lentas, por isso precisavam economizar em tudo, inclusive no tamanho dos endereços. O IPv4 tem apenas três quartos bytes de tamanho para economizar memória e tempo de transmissão. Já na década de 80, percebeu-se que essas limitações do IPv4 eram muito grandes para o futuro da Internet.O IP é uma parte fundamental da Internet e permite que computadores de diferentes partes do mundo se comuniquem entre si. A transição para o IPv6 é inevitável, uma vez que o IPv4 não tem mais endereços disponíveis. É importante estar ciente das mudanças e estar preparado para fazer a transição, para que a Internet continue a crescer e evoluir.IPv4Existem duas especificações para os endereços IP: o IPv4 e o IPv6. O IPv4, endereço IP mais comum, é composto por números decimais que permitem o máximo de 4294967296 endereços únicos. Embora parecesse suficiente para criar uma rede gigante na década de 80, a verdade é que o IPv4 está acabando e, há pelo menos seis anos, existe até lista de espera para conseguir um endereço IPv4.O IPv4 é um protocolo de endereçamento IP que é usado para conectar dispositivos em uma rede. Ele é usado para identificar e localizar dispositivos em uma rede, permitindo que eles se comuniquem uns com os outros. O IPv4 é composto por 32 bits, que são divididos em quatro octetos (ou bytes), cada um representado por um número decimal de 0 a 255.IPv4 descriçãoComo é representado o IP V4 em formato decimal e pontuação. O IPv4 tem 32 bits, que são divididos em quatro partes de 8 bits cada. Cada uma dessas partes é chamada de octeto e é representada em formato decimal. Mas o que é um número decimal? É um sistema de numeração que utiliza 10 dígitos, de 0 a 9. Então, para representar o IPv4 em formato decimal, precisamos converter cada um dos seus oito bits em um número decimal.Vamos pegar um exemplo de endereço IPv4: 192.168.0.1. Para converter em decimal, precisamos converter cada octeto em decimal. Então, temos 192.168.0.1 = 11000000.10101000.00000000.00000001. Agora, para converter em decimal, precisamos converter cada um desses oito bits em um número decimal, utilizando a seguinte tabela: Valor do bit Valor decimal 0 0 1 1 Utilizando essa tabela, podemos converter cada um dos oito bits em decimal. Então, temos:11000000 = 19210101000 = 16800000000 = 000000001 = 1Portanto, o endereço IPv4 192.168.0.1 pode ser representado em formato decimal como 3232235521.Mas como representamos esse endereço IPv4 para um ser humano entender e configurar em um computador? Usamos a pontuação. O endereço IPv4 é representado em formato decimal e pontuação, como 192.168.0.1. Cada um dos quatro octetos é separado por um ponto, facilitando a leitura e a configuração do endereço IPv4.Em resumo, o IPv4 é representado em formato decimal e pontuação. Cada octeto é representado em decimal e, em seguida, é separado por um ponto para formar o endereço IPv4 completo.Máscara de sub-redeA máscara de sub-rede é usada para dividir um endereço IP em uma parte de rede e uma parte de host. Ela é usada para determinar qual é o endereço de rede e qual é o endereço de host em um determinado endereço IP. A máscara de sub-rede é uma sequência de bits que é aplicada ao endereço IP para separar a parte de rede da parte de host.Classes do IPv4O IPv4 é dividido em cinco classes: A, B, C, D e E. Cada classe define um intervalo diferente de endereços IP, com diferentes quantidades de bits para a identificação da rede e do host. As classes A, B e C são as mais comuns e são usadas para identificar redes públicas e privadas. Classe Faixa de endereços IP Máscara de rede A 1.0.0.0 - 126.0.0.0 255.0.0.0 B 128.0.0.0 - 191.255.0.0 255.255.0.0 C 192.0.0.0 - 223.255.255.0 255.255.255.0 D 224.0.0.0 - 239.255.255.255 N/A E 240.0.0.0 - 255.255.255.255 N/A Observe que as classes D e E são reservadas para usos específicos e não são geralmente utilizadas para endereços de rede regulares.IPs reservadosExistem alguns endereços IP reservados que não podem ser usados como endereços IP públicos e que são usados para fins específicos, como testes em redes privadas, multicast, broadcast, entre outros. Alguns dos endereços IP reservados mais comuns incluem: 10.0.0.0 a 10.255.255.255 (Classe A) 172.16.0.0 a 172.31.255.255 (Classe B) 192.168.0.0 a 192.168.255.255 (Classe C) 127.0.0.0 a 127.255.255.255 (loopback) 169.254.0.0 a 169.254.255.255 (APIPA ou Auto-IP)Além disso, existem também endereços IP reservados para multicast, que permitem que os pacotes sejam enviados para vários destinos simultaneamente, como: 224.0.0.0 a 239.255.255.255IP v6O IPv6 foi desenvolvido em 1998 pela NSF (National Science Foundation) e ratificado como padrão em 2017. Ele é composto por 128 bits, não mais usando números decimais, mas sim hexadecimais. Isso permite o equivalente a 2 elevado a 128, ou 340 undecilhões de endereços possíveis. Para ter uma noção, se um único endereço IPv6 fosse um pedacinho de fita adesiva com um centímetro quadrado, seria possível envolver toda a superfície da Terra com 7 camadas de endereço.O IPv6 é a sexta versão do Protocolo de Internet (IP) e foi desenvolvido para substituir o IPv4, que estava ficando sem endereços IP disponíveis. O IPv6 utiliza um espaço de endereçamento muito maior do que o IPv4, permitindo um número muito maior de dispositivos conectados à Internet.Aqui está uma breve descrição de como o IPv6 funciona: Endereçamento: O IPv6 utiliza um espaço de endereçamento de 128 bits, permitindo 2^128 (aproximadamente 3,4x10^38) endereços IP possíveis. Isso é uma quantidade enorme de endereços e permite que cada dispositivo tenha um endereço IP exclusivo. Cabeçalho: O cabeçalho IPv6 é mais simplificado em relação ao IPv4 e possui um tamanho fixo de 40 bytes. Ele contém informações como o endereço de origem, o endereço de destino, informações sobre o tipo de tráfego e outras informações necessárias para roteamento e entrega de pacotes. Roteamento: O IPv6 utiliza um roteamento hierárquico, que permite que os pacotes sejam roteados de forma eficiente através da Internet. Isso é feito através do uso de endereços de rede que permitem que os pacotes sejam encaminhados em direção ao seu destino final. Transição: A transição do IPv4 para o IPv6 pode ser um desafio, já que muitos dispositivos e redes ainda utilizam o IPv4. Para facilitar a transição, existem vários mecanismos que permitem que o IPv6 e o IPv4 coexistam e se comuniquem.Essas são apenas algumas das características básicas do IPv6. Em geral, o IPv6 é uma evolução significativa em relação ao IPv4, oferecendo uma quantidade muito maior de endereços IP e outras melhorias em termos de roteamento, segurança e eficiência da rede.Características do IPv6Algumas das principais características do IPv6 são: Endereços IP maiores: o IPv6 usa endereços de 128 bits em vez dos 32 bits do IPv4, o que permite um número muito maior de endereços disponíveis. Multicast: o IPv6 usa multicast de forma mais eficiente do que o IPv4. Mobilidade: o IPv6 foi projetado para funcionar com dispositivos móveis e em redes sem fio. Segurança: o IPv6 inclui melhorias de segurança em relação ao IPv4, incluindo autenticação e criptografia. Eficiência: o cabeçalho do IPv6 é mais fácil de processar pelos roteadores do que o do IPv4, o que torna o protocolo mais eficiente em termos de processamento de pacotes.Comparação IPv4 x IPv6   IPv4 IPv6 Tamanho do endereço IP 32 bits 128 bits Número de endereços IP 4,3 bilhões 340 undecilhões (ou seja, 340 seguido de 36 zeros) Cabeçalho do pacote 20 bytes 40 bytes Endereçamento Decimais Hexadecimais Multicast Sim Sim Mobilidade Suporte limitado Projetado para dispositivos móveis Segurança Criptografia e autenticação limitadas Criptografia e autenticação incorporadas IPv6 descriçãoO IPv6 é um protocolo de internet que suporta um endereço IP de 128 bits, o que permite um número muito maior de endereços possíveis do que o seu predecessor IPv4. O IPv6 é formado por oito partes de 16 bits, que podem ser representadas em números hexadecimais.O que é um número hexadecimal?Um número hexadecimal é um sistema numérico que usa dez dígitos (0 a 9) e seis letras (A a F) para representar números. Em números hexadecimais, a letra A representa o número 10, B representa 11, C representa 12, e assim por diante, até a letra F, que representa o número 15.Conversão de IPv6 para hexadecimalPara que os seres humanos possam entender o endereço IPv6 e configurá-lo em um computador, cada uma das oito partes de 16 bits é convertida em um número hexadecimal. Por exemplo, o número hexadecimal 2001 pode ser gerado a partir dos primeiros 16 bits do endereço IPv6.Representação do IPv6 em números hexadecimaisO endereço IPv6 é representado em números hexadecimais por oito partes separadas por dois pontos. Se houver uma sequência de partes com apenas zeros, é possível simplificar a representação substituindo todas as partes de zeros por :: seguido de dois pontos. No entanto, isso só pode ser feito uma vez em todo o endereço IPv6.Questão sobre o endereço IPv6Uma questão sobre o endereço IPv6 afirma que ele é dividido em quatro grupos de 32 bits cada um, o que está incorreto. Na verdade, o endereço IPv6 é dividido em oito grupos de 16 bits cada um.Em resumo, a representação em números hexadecimais é uma forma de simplificar o endereço IPv6 para que possa ser mais facilmente entendido pelos seres humanos. E, ao contrário do que afirmava a questão mencionada, o IPv6 é dividido em oito grupos de 16 bits.ExemploUm exemplo de endereço IPv6 seria:2001:0db8:85a3:0000:0000:8a2e:0370:7334Este endereço IPv6 é composto por 8 blocos de 4 dígitos hexadecimais separados por dois pontos. Cada bloco representa 16 bits (4 dígitos hexadecimais = 4x4 = 16), resultando em um total de 128 bits para todo o endereço. Os zeros à esquerda podem ser omitidos para facilitar a leitura, mas eles são obrigatórios na representação do endereço.O exemplo acima é apenas um dos muitos endereços IPv6 possíveis. O IPv6 oferece um espaço de endereço tão grande que é improvável que dois dispositivos na mesma rede tenham endereços IP idênticos. Isso é uma grande melhoria em relação ao IPv4, que tem um espaço de endereço muito menor e pode levar a conflitos de endereço em redes maiores.Abreviando o IP v6O IPv6 pode ser abreviado utilizando algumas regras. A abreviação é permitida para reduzir a quantidade de zeros no endereço IPv6 e, assim, torná-lo mais fácil de ler e digitar. Aqui estão algumas das regras de abreviação comuns para o IPv6: Zeros à esquerda podem ser omitidos em cada bloco, exceto no primeiro bloco. Por exemplo, 2001:0db8 pode ser abreviado para 2001:db8. Se houver uma sequência contínua de blocos com valor zero, eles podem ser substituídos por dois pontos duplos (::), mas essa abreviação só pode ser usada uma vez em um endereço IPv6. Por exemplo, 2001:0db8:0000:0000:0000:0000:1428:57ab pode ser abreviado para 2001:db8::1428:57ab. Se houver apenas um bloco com valor zero, ele não pode ser abreviado usando a regra do ponto duplo. Por exemplo, 2001:0db8:0000:0000:0000:0000:0000:57ab não pode ser abreviado. A abreviação não deve afetar a clareza do endereço IPv6 e, portanto, deve ser usada com cuidado.Referências Comparando IPv6 com IPv4 (IP Tradicional) IP (Entenda finalmente como funciona o IPv4 e o IPv6) // Dicionário do Programador" }, { "title": "Home office ou trabalho remoto", "url": "/aulas/posts/home-office-ou-trabalho-remoto/", "categories": "AULAS, PLANEJAMENTO DE CARREIRA", "tags": "planejamento, carreira, graduação", "date": "2023-05-02 10:00:00 -0300", "snippet": "O Home Office e o Trabalho Remoto têm se tornado cada vez mais comuns nas empresas. São modelos que permitem que os colaboradores trabalhem fora do ambiente da empresa, seja em casa ou em qualquer ...", "content": "O Home Office e o Trabalho Remoto têm se tornado cada vez mais comuns nas empresas. São modelos que permitem que os colaboradores trabalhem fora do ambiente da empresa, seja em casa ou em qualquer outro lugar, desde que tenham acesso à internet e a ferramentas de trabalho necessárias.O Home Office é uma modalidade em que o colaborador trabalha exclusivamente em casa, podendo estabelecer sua própria rotina e usufruindo do conforto do lar. Já o Trabalho Remoto é uma prestação de serviços que é feita a distância, ou seja, o colaborador não está nas dependências da empresa e presta serviço de onde ele se encontra.Na área de Tecnologia da Informação, o Home Office é pioneiro e é o modelo que mais emprega colaboradores em empresas do Brasil e do exterior. Segundo dados do Ibope, cerca de 20% dos profissionais brasileiros trabalham em regime de Home Office.Entre as vantagens do Home Office estão o conforto, a flexibilidade na rotina e a possibilidade de estabelecer sua própria agenda. Porém, é necessário ter uma disciplina rígida e ser produtivo como em um ambiente de trabalho convencional.Já o Trabalho Remoto está se tornando uma prática usual nas empresas, trazendo novos modos de desempenhar as tarefas. Entre as vantagens do Trabalho Remoto estão a melhor gestão de funcionários e colaboradores, a melhoria na comunicação, o controle de dados e informações, a redução dos custos e a dispensa da necessidade de um espaço físico.Em resumo, tanto o Home Office quanto o Trabalho Remoto são modelos que permitem maior flexibilidade e produtividade para os colaboradores, além de reduzir custos para as empresas. É importante lembrar que para adotar esses modelos é necessário ter disciplina, organização e comprometimento para manter a qualidade do trabalho.Tabela comparativa   Home Office Trabalho Remoto O que é? Trabalha de casa Prestação de serviços a distância, sem estar na empresa Áreas comuns TI, negócios, contabilidade, atendimento ao cliente TI, negócios, marketing, design, escrita, atendimento ao cliente Localização Casa Qualquer lugar com acesso à internet Vantagens Conforto, flexibilidade na rotina, economia Melhor gestão de funcionários, comunicação, redução de custos Desvantagens Distrações, necessidade de disciplina rigorosa Dependência de tecnologia, falta de interação pessoal Nota: As informações apresentadas na tabela acima são gerais e podem variar dependendo do contexto e das políticas de cada empresa.Referências Home office é uma das possibilidades na área de Tecnologia da Informação Qual a diferenca entre trabalho remoto e home office Trabalho remoto tudo que voce precisa saber sobre o assunto" }, { "title": "Editor do Arduino", "url": "/aulas/posts/editor-do-aduino/", "categories": "AULAS, NOÇÕES DE ROBÓTICA", "tags": "arduino, robótica, simulador, eletrônica", "date": "2023-05-02 09:00:00 -0300", "snippet": "O Editor da Web para Arduino é uma ótima opção para trabalhar com sua placa Arduino, armazenando todos os seus esboços online, sem requerer a instalação de núcleos e incluindo a maioria das bibliot...", "content": "O Editor da Web para Arduino é uma ótima opção para trabalhar com sua placa Arduino, armazenando todos os seus esboços online, sem requerer a instalação de núcleos e incluindo a maioria das bibliotecas populares. Este tutorial irá orientá-lo nas etapas necessárias para usar o Web Editor com sua placa Arduino, permitindo que você: Crie uma conta para usar o Web Editor Baixe e instale o plugin de criação Certifique-se de que sua placa seja reconhecida pelo computador Carregue um exemplo simples de piscarPré-requisitosAntes de começar, certifique-se de ter o seguinte hardware e software: Editor Web do Arduino Plugin de criação instalado Placa Arduino Cabo USB (diferente dependendo da placa que você está usando)Configurando o Editor da WebA seguir, as etapas necessárias para configurar sua placa Arduino para funcionar com o Web Editor.Criando uma contaO primeiro passo é criar uma conta navegando até login.arduino.cc/login. Aqui, você pode criar manualmente uma conta ou fazer login usando sua conta do Google, por exemplo.Instalando o pluginApós criar e ativar sua conta, é preciso instalar o Create Plugin navegando até a página Create agent installation. Clique em “Iniciar” para iniciar a instalação e siga as instruções na página para baixar o Create Agent e instalá-lo localmente em sua máquina.Carregando um exemplo simplesAgora, vamos testar o Editor da Web, carregando um exemplo simples para o quadro. Primeiramente, navegue até o Editor Web, clicando no botão Editor da Web no menu no canto superior direito ou acessando este link.Quando estiver no Editor da Web, verifique se a placa que está conectada ao computador aparece na lista. Em seguida, carregue o exemplo básico do Blink navegando até Example &gt; 01.Basics &gt; Blink. Para carregá-lo, clique na seta no canto superior esquerdo do editor. Certifique-se de não desconectar a placa durante a fase de upload.Após o carregamento, uma mensagem de sucesso deve aparecer na parte inferior do editor. Se olharmos para a placa, veremos o LED integrado piscando com um intervalo de 1 segundo, indicando que o código foi carregado com sucesso.Parabéns! Agora, você pode usar o Editor da Web para carregar seus esboços para a placa Arduino de forma fácil e rápida.Referências [Getting started with the Web Editor Arduino Documentation](https://docs.arduino.cc/arduino-cloud/getting-started/getting-started-web-editor) " }, { "title": "Interfaces gráfica em Java", "url": "/aulas/posts/interface-grafica-em-java/", "categories": "DESENVOLVIMENTO, PROGRAMADOR", "tags": "Senac, programador, programação, gui, java", "date": "2023-04-24 17:00:00 -0300", "snippet": "Para usar interfaces gráficas em Java, podemos utilizar a biblioteca Swing, que fornece um conjunto de componentes e ferramentas para criar GUIs (Graphical User Interfaces) em Java.A seguir, aprese...", "content": "Para usar interfaces gráficas em Java, podemos utilizar a biblioteca Swing, que fornece um conjunto de componentes e ferramentas para criar GUIs (Graphical User Interfaces) em Java.A seguir, apresento um exemplo básico de como criar uma interface gráfica com Swing em Java:import javax.swing.*;public class ExemploGUI { public static void main(String[] args) { JFrame frame = new JFrame(\"Exemplo de GUI\"); frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE); JPanel panel = new JPanel(); JLabel label = new JLabel(\"Olá, mundo!\"); panel.add(label); frame.getContentPane().add(panel); frame.pack(); frame.setVisible(true); }}Neste exemplo, criamos uma janela JFrame com o título “Exemplo de GUI”. Em seguida, criamos um painel JPanel e adicionamos um rótulo JLabel com o texto “Olá, mundo!”. Adicionamos o painel ao conteúdo da janela e exibimos a janela.Ao executar o programa, uma janela com o rótulo “Olá, mundo!” será exibida.ComponentesExistem diversos tipos de componentes que podem compor uma janela em Java, fornecidos pela biblioteca Swing. Alguns dos componentes mais comuns incluem: JLabel: um rótulo que exibe texto ou uma imagem; JTextField: uma caixa de texto que permite a entrada de dados pelo usuário; JButton: um botão que pode ser clicado para realizar uma ação; JComboBox: uma lista suspensa que permite a seleção de um item dentre várias opções; JList: uma lista que exibe um conjunto de itens; JCheckBox: uma caixa de seleção que permite a seleção de uma ou várias opções; JRadioButton: um botão de opção que permite a seleção de uma opção dentre várias; JScrollPane: um painel com barras de rolagem que permite a visualização de conteúdo em uma área menor do que o tamanho do componente; JTable: uma tabela que exibe dados em células organizadas em colunas e linhas.JLabelJLabel label = new JLabel(\"Digite seu nome:\");panel.add(label);Nesse exemplo, criamos um rótulo JLabel com o texto “Digite seu nome:”. O rótulo é adicionado a um painel JPanel chamado panel.JTextFieldJTextField textField = new JTextField(20);panel.add(textField);Nesse exemplo, criamos uma caixa de texto JTextField com espaço para 20 caracteres. A caixa de texto é adicionada ao painel panel.JButtonJButton button = new JButton(\"Enviar\");panel.add(button);Nesse exemplo, criamos um botão JButton com o texto “Enviar”. O botão é adicionado ao painel panel.JComboBoxString[] opcoes = {\"Opção 1\", \"Opção 2\", \"Opção 3\"};JComboBox&lt;String&gt; comboBox = new JComboBox&lt;&gt;(opcoes);panel.add(comboBox);Nesse exemplo, criamos uma lista suspensa JComboBox com três opções: “Opção 1”, “Opção 2” e “Opção 3”. A lista suspensa é adicionada ao painel panel.JListString[] itens = {\"Item 1\", \"Item 2\", \"Item 3\"};JList&lt;String&gt; list = new JList&lt;&gt;(itens);panel.add(new JScrollPane(list));Nesse exemplo, criamos uma lista JList com três itens: “Item 1”, “Item 2” e “Item 3”. A lista é adicionada a um painel com barras de rolagem JScrollPane.JCheckBoxJCheckBox checkBox1 = new JCheckBox(\"Opção 1\");JCheckBox checkBox2 = new JCheckBox(\"Opção 2\");panel.add(checkBox1);panel.add(checkBox2);Nesse exemplo, criamos duas caixas de seleção JCheckBox com as opções “Opção 1” e “Opção 2”. As caixas de seleção são adicionadas ao painel panel.JRadioButtonJRadioButton radioButton1 = new JRadioButton(\"Opção 1\");JRadioButton radioButton2 = new JRadioButton(\"Opção 2\");ButtonGroup group = new ButtonGroup();group.add(radioButton1);group.add(radioButton2);panel.add(radioButton1);panel.add(radioButton2);Nesse exemplo, criamos dois botões de opção JRadioButton com as opções “Opção 1” e “Opção 2”. Os botões de opção são adicionados ao painel panel. Note que eles são adicionados a um grupo de botões ButtonGroup, para que apenas uma opção possa ser selecionada por vez.JTableString[][] dados = { {\"Item 1\", \"10\"}, {\"Item 2\", \"20\"}, {\"Item 3\", \"30\"}};String[] colunas = {\"Item\", \"Quantidade\"};JTable table = new JTable(dados, colunas);panel.add(new JScrollPane(table));Nesse exemplo, criamos uma tabela JTable com três linhas e duas colunas. Os dados da tabela são armazenados em uma matriz String[][] e as colunas são especificadas em um vetor String[]. A tabela é adicionada a um painel com barras de rolagem JScrollPane.JTextAreaJTextArea textArea = new JTextArea(5, 20);panel.add(new JScrollPane(textArea));Nesse exemplo, criamos uma área de texto JTextArea com espaço para cinco linhas e 20 colunas. A área de texto é adicionada a um painel com barras de rolagem JScrollPane.JProgressBarJProgressBar progressBar = new JProgressBar(0, 100);progressBar.setValue(50);panel.add(progressBar);Nesse exemplo, criamos uma barra de progresso JProgressBar com um valor mínimo de 0 e um valor máximo de 100. O valor atual da barra é definido como 50. A barra de progresso é adicionada ao painel panel.JFileChooserJFileChooser fileChooser = new JFileChooser();int opcao = fileChooser.showOpenDialog(panel);if (opcao == JFileChooser.APPROVE_OPTION) { File arquivo = fileChooser.getSelectedFile(); // fazer algo com o arquivo selecionado}Nesse exemplo, criamos um seletor de arquivo JFileChooser. Quando o usuário clica no botão “Abrir”, o seletor de arquivo exibe uma janela para escolher um arquivo. Se o usuário selecionar um arquivo e clicar no botão “OK”, o arquivo selecionado é armazenado em um objeto File e podemos fazer algo com ele. O seletor de arquivo é exibido dentro do painel panel.Entrada e saída básicaJOptionPane é uma classe da API Swing do Java que fornece uma maneira fácil de criar janelas de diálogo comuns em uma interface gráfica de usuário. Um desses diálogos é a entrada de dados do usuário, onde o usuário pode inserir algum texto ou valor numérico. Para usar a entrada e saída do JOptionPane, podemos seguir os seguintes passos: Importar a classe JOptionPane. Usar um dos métodos estáticos da classe JOptionPane para exibir o diálogo de entrada de dados. Por exemplo, o método showInputDialog() pode ser usado para obter uma entrada de texto do usuário. O método showInputDialog(Component parentComponent, Object message) leva dois argumentos, o primeiro é o componente pai para a janela de diálogo e o segundo é a mensagem que será exibida na janela de diálogo. O valor de retorno do método showInputDialog() é uma String que representa a entrada do usuário. Para exibir um valor de saída para o usuário, podemos usar o método showMessageDialog(), que pode exibir uma mensagem simples ou uma mensagem formatada em uma janela de diálogo.Abaixo está um exemplo simples de como usar o JOptionPane para entrada e saída de dados:import javax.swing.JOptionPane;public class EntradaSaidaJOptionPane { public static void main(String[] args) { // obtém um valor de entrada do usuário String nome = JOptionPane.showInputDialog(null, \"Digite seu nome:\"); // exibe um valor de saída para o usuário JOptionPane.showMessageDialog(null, \"Bem-vindo, \" + nome + \"!\"); }}Neste exemplo, a janela de diálogo exibe a mensagem “Digite seu nome:” e permite que o usuário insira um valor de entrada. O valor de entrada é armazenado na variável nome. Em seguida, uma mensagem de saída é exibida na janela de diálogo, usando o método showMessageDialog(). O primeiro argumento null significa que a janela de diálogo não tem componente pai, e o segundo argumento é a mensagem que será exibida. Nesse caso, exibimos uma mensagem de boas-vindas concatenando o valor inserido pelo usuário com uma string “Bem-vindo, “.ExemploCriar uma janela em que receba 3 notas e retorne a média.Para criar uma janela em Java que receba 3 notas e calcule a média, podemos utilizar vários componentes da interface gráfica, como JLabel, JTextField, JButton e JOptionPane. Abaixo segue um exemplo de implementação:import java.awt.*;import javax.swing.*;public class MediaNotas { public static void main(String[] args) { // cria uma janela JFrame frame = new JFrame(\"Cálculo de média de notas\"); // cria um painel para os componentes JPanel panel = new JPanel(new GridLayout(4, 2, 10, 10)); // cria três labels para as notas JLabel label1 = new JLabel(\"Nota 1:\"); JLabel label2 = new JLabel(\"Nota 2:\"); JLabel label3 = new JLabel(\"Nota 3:\"); // cria três campos de texto para as notas JTextField field1 = new JTextField(5); JTextField field2 = new JTextField(5); JTextField field3 = new JTextField(5); // cria um botão para calcular a média JButton button = new JButton(\"Calcular média\"); // cria um label para exibir a média JLabel labelMedia = new JLabel(\"\"); // adiciona os componentes ao painel panel.add(label1); panel.add(field1); panel.add(label2); panel.add(field2); panel.add(label3); panel.add(field3); panel.add(button); panel.add(labelMedia); // configura o tamanho do painel panel.setPreferredSize(new Dimension(300, 150)); // configura a ação do botão button.addActionListener(e -&gt; { // converte as notas de texto para número double nota1 = Double.parseDouble(field1.getText()); double nota2 = Double.parseDouble(field2.getText()); double nota3 = Double.parseDouble(field3.getText()); // calcula a média double media = (nota1 + nota2 + nota3) / 3; // exibe a média no label labelMedia.setText(\"Média: \" + media); }); // adiciona o painel à janela frame.getContentPane().add(panel); // configura o fechamento da janela frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE); // exibe a janela frame.pack(); frame.setVisible(true); }}Nesse exemplo, criamos uma janela com um painel e adicionamos três labels e três campos de texto para as notas, além de um botão para calcular a média. Quando o botão é clicado, as notas são convertidas de texto para número, a média é calculada e exibida em um JLabel vazio para exibir a média e adicionamos esse label ao painel, abaixo do botão. Quando o botão é clicado, as notas são convertidas de texto para número, a média é calculada e exibida no label. A janela é configurada para fechar quando o usuário clicar no botão de fechar e é exibida na tela. Note que para exibir corretamente os componentes, usamos o método pack() para dimensionar a janela de acordo com o tamanho necessário dos componentes.A janela é configurada para fechar quando o usuário clicar no botão de fechar e é exibida na tela.Referências Introduction to GUI Building Lesson: Learning Swing with the NetBeans IDE (The Java™ Tutorials &gt; Creating a GUI With Swing) Setting up the CelsiusConverter Project (The Java™ Tutorials &gt; Creating a GUI With Swing &gt; Learning Swing with the NetBeans IDE)" }, { "title": "IP v4 e v6", "url": "/aulas/posts/ip-v4-e-v6/", "categories": "AULAS, INFRAESTRUTURA DE REDES", "tags": "infraestrutura, simulador, packet tracer", "date": "2023-04-24 10:40:00 -0300", "snippet": "Como funciona o ip v4O IPv4 (Internet Protocol version 4) é o protocolo de endereçamento IP mais utilizado atualmente na Internet. Ele funciona atribuindo um endereço IP exclusivo de 32 bits para c...", "content": "Como funciona o ip v4O IPv4 (Internet Protocol version 4) é o protocolo de endereçamento IP mais utilizado atualmente na Internet. Ele funciona atribuindo um endereço IP exclusivo de 32 bits para cada dispositivo em uma rede IP.O endereço IPv4 é composto por quatro números separados por pontos, cada um representando um octeto de 8 bits. Por exemplo, um endereço IPv4 típico pode ser 192.168.0.1.Os endereços IP IPv4 são divididos em duas partes: a parte de rede e a parte de host. A parte de rede identifica a rede a que o dispositivo está conectado, enquanto a parte de host identifica o dispositivo individual dentro da rede.Para enviar um pacote de dados de um dispositivo para outro na rede, o remetente encapsula os dados em um pacote com o endereço IP de destino e o endereço IP de origem. O pacote é então enviado para o roteador, que usa a parte de rede do endereço IP de destino para encaminhar o pacote para a rede correta. O roteador também atualiza o endereço IP de origem antes de encaminhar o pacote.O processo de roteamento continua até que o pacote alcance o destino final, que pode ser outro dispositivo na mesma rede ou em outra rede. Quando o pacote chega ao dispositivo de destino, o dispositivo usa o endereço IP de destino para desencapsular os dados e entregar a mensagem ao aplicativo correto.Embora o IPv4 seja amplamente utilizado, ele tem algumas limitações, incluindo um número limitado de endereços IP disponíveis (cerca de 4,3 bilhões), problemas de segurança e limitações em termos de mobilidade e QoS (Qualidade de Serviço). Como resultado, o IPv6 está sendo amplamente implementado como o sucessor do IPv4.MáscaraA máscara de sub-rede é usada para definir qual parte do endereço representa a parte de rede e qual parte representa a parte de host. A máscara de sub-rede é representada como uma série de 32 bits, onde os bits que representam a parte de rede são definidos como 1 e os bits que representam a parte de host são definidos como 0. Por exemplo, a máscara de sub-rede padrão para uma rede classe C é 255.255.255.0, o que significa que os primeiros 24 bits representam a parte de rede e os últimos 8 bits representam a parte de host.ClassesOs endereços IP IPv4 são divididos em classes e a máscara de sub-rede é usada para definir qual parte do endereço representa a parte de rede e qual parte representa a parte de host.As classes de endereços IP IPv4 são definidas pelos primeiros bits do endereço IP. Existem cinco classes de endereços IP IPv4: A, B, C, D e E. Classe A: Os endereços IP classe A têm o primeiro bit definido como 0. Eles têm um espaço de endereço muito grande e são usados principalmente para grandes redes empresariais. A máscara de sub-rede padrão é 255.0.0.0. Classe B: Os endereços IP classe B têm os dois primeiros bits definidos como 10. Eles são usados principalmente para redes de tamanho médio a grande. A máscara de sub-rede padrão é 255.255.0.0. Classe C: Os endereços IP classe C têm os três primeiros bits definidos como 110. Eles são usados principalmente para redes menores. A máscara de sub-rede padrão é 255.255.255.0. Classe D: Os endereços IP classe D têm os quatro primeiros bits definidos como 1110. Eles são usados para endereços IP multicast. Classe E: Os endereços IP classe E têm os quatro primeiros bits definidos como 1111. Eles são reservados para uso futuro e não são usados atualmente.Como funciona o ip v6O IPv6 (Internet Protocol version 6) é o protocolo de endereçamento IP mais recente e foi projetado para substituir o IPv4, que tem limitações em termos de espaço de endereço e segurança. O IPv6 utiliza um endereço de 128 bits, o que permite um número muito maior de endereços possíveis em comparação com o IPv4.O endereço IPv6 é representado em oito grupos de quatro dígitos hexadecimais, separados por dois pontos. Cada grupo representa um valor de 16 bits, totalizando 128 bits no endereço. Por exemplo, um endereço IPv6 típico pode ser 2001:0db8:85a3:0000:0000:8a2e:0370:7334.Ao contrário do IPv4, o IPv6 não possui classes de endereços e a máscara de sub-rede não é necessária. O endereço IPv6 é dividido em duas partes: o identificador de sub-rede e o identificador de interface.O identificador de sub-rede é usado para identificar uma sub-rede específica, enquanto o identificador de interface é usado para identificar um dispositivo individual dentro da sub-rede. O identificador de sub-rede pode ser configurado manualmente ou automaticamente pelo roteador usando o protocolo de descoberta de prefixo sem estado (SLAAC).Para enviar um pacote de dados de um dispositivo para outro na rede IPv6, o remetente encapsula os dados em um pacote com o endereço IPv6 de destino e o endereço IPv6 de origem. O pacote é então enviado para o roteador, que usa o identificador de sub-rede para encaminhar o pacote para a sub-rede correta. O roteador também atualiza o endereço IPv6 de origem antes de encaminhar o pacote.O processo de roteamento continua até que o pacote alcance o destino final, que pode ser outro dispositivo na mesma sub-rede ou em outra sub-rede. Quando o pacote chega ao dispositivo de destino, o dispositivo usa o identificador de interface para desencapsular os dados e entregar a mensagem ao aplicativo correto.O IPv6 tem várias vantagens em relação ao IPv4, incluindo um espaço de endereço muito maior, melhor segurança, suporte para mobilidade e QoS (Qualidade de Serviço) aprimorada. No entanto, a transição do IPv4 para o IPv6 pode ser um processo complexo e requer um planejamento cuidadoso.Diferenças entre o IP v4 e v6O IPv4 é o protocolo de endereçamento IP mais utilizado atualmente na Internet. Ele usa endereços de 32 bits, que permitem um total de cerca de 4,3 bilhões de endereços únicos. No entanto, devido ao rápido crescimento da Internet e à necessidade de mais endereços, o IPv4 está se esgotando. Além disso, o IPv4 tem algumas limitações em termos de segurança, mobilidade e QoS (Quality of Service).O IPv6 é o sucessor do IPv4 e usa endereços de 128 bits, permitindo um número incrivelmente grande de endereços únicos - mais de 340 trilhões de trilhões de trilhões de endereços. Isso garante que haja endereços IP suficientes para atender às necessidades futuras da Internet. Além disso, o IPv6 tem várias melhorias em relação ao IPv4, incluindo segurança, mobilidade e QoS.Algumas das principais diferenças entre o IPv4 e o IPv6 incluem: Endereços IP: o IPv4 usa endereços de 32 bits, enquanto o IPv6 usa endereços de 128 bits. Cabeçalho do pacote: o cabeçalho do pacote IPv6 é mais simples do que o cabeçalho do pacote IPv4, o que ajuda a melhorar a eficiência do roteamento e reduzir a sobrecarga da rede. Mobilidade: o IPv6 tem suporte nativo para mobilidade, o que significa que os dispositivos podem se mover entre redes sem perder sua conexão ou endereço IP. No IPv4, isso requer o uso de protocolos adicionais, como o Mobile IP. QoS: o IPv6 tem suporte nativo para QoS, o que permite que os pacotes sejam priorizados com base na sua importância e garantir a qualidade de serviço. Segurança: o IPv6 tem suporte nativo para criptografia e autenticação, o que ajuda a garantir a segurança das comunicações. O IPv4 requer o uso de protocolos adicionais, como o IPsec, para fornecer segurança.Em resumo, o IPv6 é uma atualização importante do IPv4 que resolve muitos dos problemas associados ao IPv4, incluindo a escassez de endereços IP, a segurança, a mobilidade e a QoS. Com o aumento da demanda por endereços IP e as necessidades crescentes da Internet, o IPv6 está se tornando cada vez mais importante.Prática com Ip v6Claro, vou continuar com o exemplo de configuração de uma rede com alguns computadores e um servidor DHCP no Packet Tracer, agora mostrando a configuração de endereçamento IPv6.Para configurar endereços IPv6 em uma rede no Packet Tracer, siga os seguintes passos: Na guia “Dispositivos”, selecione “Router” e adicione à área de trabalho. Faça o mesmo para os “PCs” e o “Servidor DHCP”. Conecte os dispositivos com as conexões apropriadas. Por exemplo, conecte cada PC a uma porta LAN do roteador e conecte o servidor DHCP a uma porta LAN do roteador também. Clique duas vezes no roteador e, em seguida, clique na guia “Configuração”. Selecione a interface do roteador que está conectada à rede interna e, em seguida, selecione “Configuração IPv6”. Selecione o modo “Roteador” para habilitar o roteamento IPv6 no roteador. Digite o endereço IPv6 global para a interface do roteador que está conectada à rede interna. Certifique-se de usar um prefixo válido e um endereço único para a rede. Por exemplo, você pode usar o prefixo “2001:db8:1234::/64” e o endereço “2001:db8:1234::1/64”. Clique em “Aplicar” para salvar as configurações. Repita esses passos para configurar as interfaces dos PCs e do servidor DHCP. Selecione o servidor DHCP e clique na guia “Configuração”. Selecione “Serviços DHCP” e, em seguida, selecione “IPv6”. Digite um nome para o pool de endereços IPv6 no campo “Nome do Pool”. Digite o intervalo de endereços IPv6 que você deseja atribuir aos PCs no campo “Prefixo do Pool”. Certifique-se de usar o prefixo que você definiu para a rede. Por exemplo, você pode usar o intervalo “2001:db8:1234:1::/64” a “2001:db8:1234:1:ffff:ffff:ffff:ffff/64”. Clique em “Aplicar” para salvar as configurações.Com essas configurações, os PCs podem receber endereços IPv6 automaticamente do servidor DHCP quando se conectarem à rede. É importante lembrar que, ao configurar o IPv6, é necessário usar um prefixo válido e único para a rede para garantir que os endereços IPv6 sejam atribuídos corretamente e que a rede funcione corretamente.Referências Vídeos descrição Redes 1 - IP Redes 2 - IP, máscara de rede, gateway IPv4 e IPv6 - IP na Internet - Informática para concursos " }, { "title": "Teste Vocacional", "url": "/aulas/posts/teste-vocacional/", "categories": "AULAS, PLANEJAMENTO DE CARREIRA", "tags": "planejamento, carreira, graduação", "date": "2023-04-24 10:00:00 -0300", "snippet": "PO teste vocacional orienta a escolha da carreira profissional identificando as aptidões pessoais, com perguntas específicas para cada área de estudo.Visite o site https://www.guiadacarreira.com.br...", "content": "PO teste vocacional orienta a escolha da carreira profissional identificando as aptidões pessoais, com perguntas específicas para cada área de estudo.Visite o site https://www.guiadacarreira.com.br/teste-vocacional/Faça um teste vocacional e descubra se o resultado condiz com suas aspirações:Visite o site https://www.profissionaisti.com.br/2020/02/serie-concurseiro-iniciante-definindo-o-objetivo/ Defina qual objetivo é mais atrativo para a sua carreira profissional e o que faz o objetivo ser atrativo.Objetivo: _________a. Afinidade com quais matérias?b. Fatores mais atrativos?" }, { "title": "Função do resistor", "url": "/aulas/posts/funcao-dos-resistor/", "categories": "AULAS, NOÇÕES DE ROBÓTICA", "tags": "arduino, robótica, simulador, eletrônica", "date": "2023-04-24 09:00:00 -0300", "snippet": "Neste artigo, vamos entender o que é um resistor, para que serve e quais são os tipos disponíveis. Vamos também falar sobre a sua importância em circuitos elétricos e aprender a calcular o valor de...", "content": "Neste artigo, vamos entender o que é um resistor, para que serve e quais são os tipos disponíveis. Vamos também falar sobre a sua importância em circuitos elétricos e aprender a calcular o valor de resistência com base nas suas cores.O que é um resistor?Um resistor é um componente elétrico passivo, com a função principal de limitar o fluxo de corrente elétrica em um circuito. Ele é representado por símbolos, sendo que o da esquerda é definido pelo IEEE e o da direita pelo IEC. Podemos pensar na analogia de um cano por onde passa água, onde a água representa a corrente elétrica. Quando existe uma resistência ao fluxo de água, o fluxo é reduzido. Da mesma forma, quando a corrente elétrica passa por um resistor, a sua resistência é maior que a dos cabos e trilhas de um circuito elétrico, fazendo com que a corrente elétrica diminua e ocorra uma queda de tensão. A relação entre tensão, corrente elétrica e resistência elétrica é descrita pela Lei de Ohm, descoberta pelo cientista alemão George Ohm em 1827.Polaridade do resistorO resistor não possui polaridade, ou seja, não tem um lado positivo ou negativo quando conectado em um circuito elétrico. É possível até mesmo inverter a sua posição que a sua resistência continuará a mesma. Não há uma forma correta ou uma polaridade específica para conectar um resistor em um circuito elétrico.Uso do resistorUma aplicação comum para o resistor é para conectar um LED vermelho a uma fonte de 5V. Com 20mA de corrente, já é possível alimentar o LED, mas se o LED for conectado diretamente à fonte, sem um resistor para limitar a corrente, ele pode queimar rapidamente. Para evitar este problema, coloca-se um resistor entre a fonte de tensão e o LED. O valor do resistor deve ser suficiente para limitar a corrente em 20mA, o suficiente para acender o LED sem queimá-lo. Usando a Lei de Ohm, sabemos que a resistência é igual à tensão dividida pela corrente. A tensão sobre o resistor é 5V menos a queda de tensão de 2V no LED, resultando em 3V. Dividindo a tensão do resistor, 3V, pela corrente de 20mA, obtemos o valor de 150 ohms para o resistor. Colocando o resistor de 150 ohms em série com a fonte de tensão e o LED, a corrente é limitada e o LED pode finalmente acender sem queimar, pois o resistor limita a corrente total que passa pelo circuito.Tipos de resistoresOs resistores fixos podem ser axiais ou SMD, sendo que estes últimos são amplamente utilizados por serem pequenos e fáceis de montar por máquinas em larga escala. Já os resistores variáveis são aqueles em que é possível mudar o valor da resistência, sendo que a maioria deles é ajustado por movimento mecânico. Quando se trata de um divisor de tensão e tem três terminais, são chamados de potenciômetros.Para finalizar, é importante lembrar que os resistores são componentes essenciais em praticamente todos os circuitos eletrônicos, seja em aplicações simples como ligar um LED, ou em circuitos mais complexos como em sistemas de controle. A escolha do tipo de resistor e do valor correto da resistência é fundamental para o bom funcionamento do circuito e a segurança dos componentes envolvidos. Portanto, sempre verifique cuidadosamente as especificações dos resistores antes de utilizá-los em seus projetos.Referências Resistores Propriedades dos resistores" }, { "title": "Exercícios com classes em Java", "url": "/aulas/posts/exercicios-com-classes-em-java/", "categories": "DESENVOLVIMENTO, PROGRAMADOR", "tags": "Senac, programador, programação, exercícios, java", "date": "2023-04-20 17:00:00 -0300", "snippet": "Refatorando os seguintes problemas usando classes e Programação Orientada a Objetos:Exemplo classe animal Crie um programa com a classes animal, onde um cachorro, um gato e um passarinho herdam as...", "content": "Refatorando os seguintes problemas usando classes e Programação Orientada a Objetos:Exemplo classe animal Crie um programa com a classes animal, onde um cachorro, um gato e um passarinho herdam as características da classe animal.Para resolver o problema proposto, podemos criar uma classe Animal com os atributos e métodos comuns a todos os animais, e em seguida, criar as classes Cachorro, Gato e Passarinho que herdam da classe Animal e acrescentam as suas próprias características específicas. Aqui está um exemplo de como isso pode ser feito em Java:class Animal { private String nome; private int idade; public Animal(String nome, int idade) { this.nome = nome; this.idade = idade; } public String getNome() { return nome; } public int getIdade() { return idade; } public void emitirSom() { System.out.println(\"Animal emitindo som...\"); }}class Cachorro extends Animal { private String raca; public Cachorro(String nome, int idade, String raca) { super(nome, idade); this.raca = raca; } public String getRaca() { return raca; } public void latir() { System.out.println(\"Au au!\"); }}class Gato extends Animal { private String cor; public Gato(String nome, int idade, String cor) { super(nome, idade); this.cor = cor; } public String getCor() { return cor; } public void miar() { System.out.println(\"Miau!\"); }}class Passarinho extends Animal { private String especie; public Passarinho(String nome, int idade, String especie) { super(nome, idade); this.especie = especie; } public String getEspecie() { return especie; } public void piar() { System.out.println(\"Piu piu!\"); }}public class Programa { public static void main(String[] args) { Cachorro cachorro = new Cachorro(\"Rex\", 3, \"Labrador\"); Gato gato = new Gato(\"Bolinha\", 2, \"Preto\"); Passarinho passarinho = new Passarinho(\"Piu\", 1, \"Canário\"); System.out.println(cachorro.getNome() + \" é um cachorro da raça \" + cachorro.getRaca() + \".\"); cachorro.latir(); System.out.println(gato.getNome() + \" é um gato \" + gato.getCor() + \".\"); gato.miar(); System.out.println(passarinho.getNome() + \" é um passarinho da espécie \" + passarinho.getEspecie() + \".\"); passarinho.piar(); }}Neste exemplo, a classe Animal é criada com os atributos nome e idade, e o método emitirSom. As classes Cachorro, Gato e Passarinho herdam da classe Animal e acrescentam seus próprios atributos e métodos, como raca, cor e especie, e os métodos latir, miar e piar, respectivamente.Na classe Programa, são criados um cachorro, um gato e um passarinho com suas respectivas informações, e em seguida, são chamados os métodos latir, miar e piar. Note que cada objeto criado é uma instância de uma subclasse de Animal, e portanto, possui tanto os atributos e métodos da classe Animal quanto os atributos e métodos da subclasse específica.Ao executar o programa, a saída será:Rex é um cachorro da raça Labrador.Au au!Bolinha é um gato Preto.Miau!Piu é um passarinho da espécie Canário.Piu piu!Note que, ao chamar o método latir para o objeto cachorro, a saída é “Au au!”, que é específica para cachorros. O mesmo ocorre com os métodos miar e piar. Essa é a vantagem de usar herança em classes: podemos criar classes genéricas que podem ser estendidas por classes mais específicas, sem precisar repetir o código comum.Exemplo classes bancária Programa de conta bancária, com depósito, saque e transferência.Programação estruturadaExemplo de programa de conta bancária em Java com programação estruturada:import java.util.Scanner;public class ContaBancaria { public static void main(String[] args) { Scanner input = new Scanner(System.in); int opcao; double saldo = 0; do { System.out.println(\"Escolha uma opção:\"); System.out.println(\"1 - Depósito\"); System.out.println(\"2 - Saque\"); System.out.println(\"3 - Transferência\"); System.out.println(\"4 - Saldo\"); System.out.println(\"0 - Sair\"); opcao = input.nextInt(); switch(opcao) { case 1: System.out.print(\"Digite o valor do depósito: \"); double deposito = input.nextDouble(); saldo += deposito; break; case 2: System.out.print(\"Digite o valor do saque: \"); double saque = input.nextDouble(); if (saque &lt;= saldo) { saldo -= saque; } else { System.out.println(\"Saldo insuficiente\"); } break; case 3: System.out.print(\"Digite o valor da transferência: \"); double transferencia = input.nextDouble(); if (transferencia &lt;= saldo) { System.out.print(\"Digite o número da conta de destino: \"); int contaDestino = input.nextInt(); System.out.println(\"Transferência realizada com sucesso\"); saldo -= transferencia; } else { System.out.println(\"Saldo insuficiente\"); } break; case 4: System.out.println(\"Saldo: \" + saldo); break; case 0: System.out.println(\"Saindo...\"); break; default: System.out.println(\"Opção inválida\"); } System.out.println(); } while (opcao != 0); }}Usando funçõesSegue abaixo um exemplo de programa de conta bancária em Java com a classe principal usando funções:import java.util.Scanner;public class ContaBancaria { public static void main(String[] args) { Scanner input = new Scanner(System.in); double saldo = 0.0; int opcao; do { System.out.println(\"Escolha uma opção:\"); System.out.println(\"1 - Depósito\"); System.out.println(\"2 - Saque\"); System.out.println(\"3 - Transferência\"); System.out.println(\"4 - Saldo\"); System.out.println(\"0 - Sair\"); opcao = input.nextInt(); switch(opcao) { case 1: System.out.print(\"Digite o valor do depósito: \"); double deposito = input.nextDouble(); saldo = depositar(saldo, deposito); break; case 2: System.out.print(\"Digite o valor do saque: \"); double saque = input.nextDouble(); saldo = sacar(saldo, saque); break; case 3: System.out.print(\"Digite o valor da transferência: \"); double transferencia = input.nextDouble(); System.out.print(\"Digite o número da conta de destino: \"); int contaDestino = input.nextInt(); saldo = transferir(saldo, transferencia, contaDestino); break; case 4: System.out.println(\"Saldo: \" + saldo); break; case 0: System.out.println(\"Saindo...\"); break; default: System.out.println(\"Opção inválida\"); } System.out.println(); } while (opcao != 0); } public static double depositar(double saldo, double valor) { return saldo + valor; } public static double sacar(double saldo, double valor) { if (valor &lt;= saldo) { return saldo - valor; } else { System.out.println(\"Saldo insuficiente\"); return saldo; } } public static double transferir(double saldo, double valor, int contaDestino) { if (valor &lt;= saldo) { // Lógica para transferência return saldo - valor; } else { System.out.println(\"Saldo insuficiente\"); return saldo; } }}Neste exemplo, as operações de depósito, saque e transferência foram transformadas em funções que recebem o saldo atual e os valores necessários para realizar as operações e retornam o novo saldo após a operação. Na classe principal, as funções são chamadas dentro do switch-case correspondente a cada operação. O objeto da classe Conta não é mais necessário neste exemplo, uma vez que todas as operações são realizadas por meio das funções.usando Programação orientada a objetosimport java.util.Scanner;public class ContaBancaria { public static void main(String[] args) { Scanner input = new Scanner(System.in); Conta conta = new Conta(); int opcao; do { System.out.println(\"Escolha uma opção:\"); System.out.println(\"1 - Depósito\"); System.out.println(\"2 - Saque\"); System.out.println(\"3 - Transferência\"); System.out.println(\"4 - Saldo\"); System.out.println(\"0 - Sair\"); opcao = input.nextInt(); switch(opcao) { case 1: System.out.print(\"Digite o valor do depósito: \"); double deposito = input.nextDouble(); conta.depositar(deposito); break; case 2: System.out.print(\"Digite o valor do saque: \"); double saque = input.nextDouble(); if (conta.sacar(saque)) { System.out.println(\"Saque realizado com sucesso\"); } else { System.out.println(\"Saldo insuficiente\"); } break; case 3: System.out.print(\"Digite o valor da transferência: \"); double transferencia = input.nextDouble(); System.out.print(\"Digite o número da conta de destino: \"); int contaDestino = input.nextInt(); if (conta.transferir(transferencia, contaDestino)) { System.out.println(\"Transferência realizada com sucesso\"); } else { System.out.println(\"Saldo insuficiente\"); } break; case 4: System.out.println(\"Saldo: \" + conta.getSaldo()); break; case 0: System.out.println(\"Saindo...\"); break; default: System.out.println(\"Opção inválida\"); } System.out.println(); } while (opcao != 0); }}class Conta { private double saldo; public void depositar(double valor) { this.saldo += valor; } public boolean sacar(double valor) { if (valor &lt;= this.saldo) { this.saldo -= valor; return true; } else { return false; } } public boolean transferir(double valor, int contaDestino) { if (valor &lt;= this.saldo) { // Lógica para transferência this.saldo -= valor; return true; } else { return false; } } public double getSaldo() { return this.saldo; }}Neste exemplo, criamos uma classe Conta que possui os métodos depositar, sacar, transferir e getSaldo para realizar as operações na conta bancária. No método main, criamos um objeto da classe Conta e usamos seus métodos para realizar as operações de depósito, saque, transferência e consulta de saldo. As operações de saque e transferência verificam se há saldo suficiente na conta antes de realizar a operação e retornam um valor booleano indicando se a operação foi realizada com sucesso ou não.Referências Java OOP (Object-Oriented Programming) Criando jogo virtual pet" }, { "title": "Segurança WiFi", "url": "/aulas/posts/seguranca-wifi/", "categories": "AULAS, INFRAESTRUTURA DE REDES", "tags": "infraestrutura, simulador, packet tracer", "date": "2023-04-20 10:40:00 -0300", "snippet": "A segurança WPA2-PSK é uma das opções mais fortes para proteger a rede sem fio. Ela usa criptografia AES (Advanced Encryption Standard) de 128 bits para proteger a comunicação entre os dispositivos...", "content": "A segurança WPA2-PSK é uma das opções mais fortes para proteger a rede sem fio. Ela usa criptografia AES (Advanced Encryption Standard) de 128 bits para proteger a comunicação entre os dispositivos e o roteador WiFi.Para configurar a segurança WPA2-PSK no roteador WiFi, siga os seguintes passos: Na guia Configuração do roteador WiFi, selecione a guia Wireless. Selecione a opção “Habilitar Rede sem Fio”. Digite um nome para a rede sem fio no campo “SSID”. Este nome será exibido para os dispositivos móveis quando eles procurarem uma rede sem fio. Em “Modo de Segurança”, selecione “WPA2-PSK”. Digite uma senha forte no campo “Chave de Rede”. A senha deve ter pelo menos oito caracteres e ser uma combinação de letras maiúsculas e minúsculas, números e símbolos. Clique em “Aplicar” para salvar as configurações.Com essa configuração, os dispositivos móveis precisam inserir a senha correta para se conectar à rede sem fio. Isso impede que usuários não autorizados acessem a rede sem fio e protege a comunicação entre os dispositivos e o roteador WiFi.Além disso, é importante lembrar que a senha da rede sem fio deve ser alterada regularmente para aumentar ainda mais a segurança. Recomenda-se alterar a senha pelo menos uma vez a cada três meses ou sempre que um funcionário que tem acesso à senha deixar a empresa.Adicionando um roteador WiFiSeguindo a prática anterior, agora vamos adicionar um roteador WiFi à rede e configurá-lo para fornecer acesso à internet sem fio para os dispositivos móveis. Além disso, vamos adicionar uma camada de segurança ao acesso ao Access Point (AP), usando WPA2-PSK.Passo 1: Adicione um roteador WiFi à topologia e conecte-o ao switch.Passo 2: Configure o endereço IP e a máscara de sub-rede para o roteador WiFi, como mostrado abaixo: Roteador WiFi: 192.168.1.254/24Passo 3: Configure a rede sem fio no roteador WiFi. Para isso, siga os seguintes passos:a) Clique no roteador WiFi e selecione a guia Configuração.b) Clique na guia Wireless e habilite a rede sem fio.c) Configure o nome da rede (SSID) como “MinhaRedeWiFi”.d) Selecione o modo de segurança WPA2-PSK e defina uma senha forte.e) Clique em OK para salvar as configurações.Passo 4: Configure os dispositivos móveis para se conectarem à rede sem fio. Para isso, siga os seguintes passos:a) Ligue o Wi-Fi nos dispositivos móveis e procure a rede “MinhaRedeWiFi”.b) Insira a senha configurada no Passo 3d quando solicitado.c) Verifique se os dispositivos móveis receberam um endereço IP válido na rede.Passo 5: Verifique se a conexão com a internet está funcionando corretamente. Para isso, abra um navegador em um dos dispositivos móveis e acesse qualquer site. O site deve ser exibido corretamente no navegador.Passo 6: Verifique a segurança da rede sem fio. Para isso, tente se conectar à rede sem fio sem inserir a senha correta. A conexão não deve ser estabelecida e deve ser exibida uma mensagem de erro informando que a senha está incorreta.Pronto! Agora você configurou um roteador WiFi na rede simulada do Packet Tracer e adicionou uma camada de segurança usando WPA2-PSK para proteger o acesso ao Access Point (AP).Segurança da configuração do roteadorAlém da configuração de segurança, também é importante definir uma senha forte para o acesso à interface de administração do roteador WiFi. Isso garante que apenas usuários autorizados possam acessar e modificar as configurações do roteador WiFi.Para definir a senha de administração, siga os seguintes passos: Na guia Configuração do roteador WiFi, selecione a guia Segurança. Em “Senha de Acesso”, digite uma senha forte que contenha uma combinação de letras, números e símbolos. É recomendável que a senha tenha pelo menos oito caracteres. Clique em “Aplicar” para salvar as configurações.É importante salvar um backup das configurações do roteador WiFi regularmente. Isso permite que você restaure as configurações caso ocorra algum problema ou se precisar reconfigurar o roteador WiFi em outra ocasião.Para salvar um backup das configurações, siga os seguintes passos: Na guia Configuração do roteador WiFi, selecione a guia Administração. Clique em “Salvar Configurações”. Escolha um local para salvar o arquivo de backup e dê um nome para o arquivo. Clique em “Salvar” para salvar o arquivo de backup.Com essas configurações adicionais, você garante que o roteador WiFi está protegido tanto em termos de segurança de acesso à rede sem fio quanto em termos de acesso à interface de administração. Além disso, a criação de backups regulares das configurações permite que você restaure as configurações rapidamente em caso de problemas.Referências Simulador de redes" }, { "title": "Jovem aprendiz e estágio", "url": "/aulas/posts/jovem-aprendiz-e-estagio-copy/", "categories": "AULAS, PROFISSÃO E FORMAÇÃO", "tags": "profissão", "date": "2023-04-20 10:00:00 -0300", "snippet": "Os regimes de estagiário e Jovem Aprendiz são regulamentados pela CLT e pela Lei nº 11.788/2011, porém são diferentes entre si. Os colaboradores contratados em ambos regimes entram em uma empresa p...", "content": "Os regimes de estagiário e Jovem Aprendiz são regulamentados pela CLT e pela Lei nº 11.788/2011, porém são diferentes entre si. Os colaboradores contratados em ambos regimes entram em uma empresa para adquirir experiência profissional e devem ter suas horas de estudo respeitadas. Neste artigo mostraremos o que diz a lei e as diferenças entre as duas modalidades de contratos!O que é Estágio?De acordo com o Artigo 1º da Lei 11.788/2011, o estágio é um ato educativo escolar supervisionado, desenvolvido no ambiente de trabalho, que visa à preparação para o trabalho produtivo de educandos que estejam frequentando o ensino regular em instituições de educação superior, de educação profissional, de ensino médio, da educação especial e dos anos finais do ensino fundamental, na modalidade profissional da educação de jovens e adultos.O estágio faz parte do projeto pedagógico do curso, além de integrar o itinerário formativo do educando. O estágio visa ao aprendizado de competências próprias da atividade profissional e à contextualização curricular, objetivando o desenvolvimento do educando para a vida cidadã e para o trabalho.Vale ressaltar que o estágio pode ser obrigatório ou não-obrigatório.O que é o programa Jovem Aprendiz?Já o programa Jovem Aprendiz foi desenvolvido pelo Governo Federal a partir da Lei 10.09/00 ou Lei da Aprendizagem. O objetivo do programa é capacitar jovens e adolescentes acima de 14 anos em todo o país. As áreas de atuação de um Jovem Aprendiz não precisam estar relacionadas com seus estudos, como acontece com o estágio.Segundo a lei, há algumas funções que não podem ser executadas por Jovens Aprendizes, pois estão vinculadas à lista TIP (Piores Formas de Trabalho Infantil), previstas no Decreto nº 6481/2008, que rege a Convenção 182 da OIT (Organização Internacional do Trabalho). Algumas das atividades que não podem ser exercidas pelo menor aprendiz são: atividades relacionadas à agricultura e à pecuária, trabalho doméstico, indústria de transformação, entre outras.O trabalho doméstico, por exemplo, é proibido porque pode expor o Jovem Aprendiz a esforços intensos, abuso físico, psicológico e até sexual, longas jornadas de trabalho, e assim por diante. Isto significa que esta lista de atividades proibidas existe para proteger os menores e não submetê-los a ambientes nocivos à saúde e que possam resultar em quaisquer tipos de traumas.O que fazer para contratar um Jovem Aprendiz?Há duas opções de contratação de Jovens Aprendizes pelas empresas interessadas. A primeira é por meio de parceria com ONGs e outras instituições para intermediar o contato entre empresa e Jovem. A segunda opção é criar seu próprio programa de Jovem Aprendiz.A empresa precisa criar um programa que seja classificado como técnico-profissional.Já no contrato de jovem aprendiz, além das informações básicas, deve constar o programa de aprendizagem que será desenvolvido, com as atividades teóricas e práticas que serão realizadas, e a carga horária semanal. A duração do contrato de jovem aprendiz é de até dois anos, e durante esse período, o aprendiz terá direito a férias remuneradas, 13º salário, FGTS, entre outros direitos trabalhistas.ConclusãoEm resumo, tanto o estagiário quanto o jovem aprendiz são contratados para adquirir experiência profissional, mas existem diferenças significativas entre os dois regimes. O estágio é voltado para estudantes que buscam integrar a teoria com a prática, enquanto o programa jovem aprendiz visa capacitar jovens e adolescentes para o mercado de trabalho.Além disso, o contrato de estágio não precisa ser anotado na carteira de trabalho, enquanto o contrato de jovem aprendiz é obrigatório. As empresas que desejam contratar jovens aprendizes precisam seguir algumas normas e critérios estabelecidos pela lei, incluindo a parceria com instituições qualificadas e a elaboração de um programa técnico-profissional de complexidade progressiva.Por fim, é importante destacar que tanto o estagiário quanto o jovem aprendiz possuem direitos trabalhistas garantidos por lei, e é dever das empresas respeitar e cumprir esses direitos, proporcionando um ambiente saudável e seguro para o desenvolvimento profissional desses colaboradores.Referências Estagiário e Jovem Aprendiz: qual é a diferença? - Oitchau Principais diferenças entre contrato de aprendizagem e de estágio não obrigatório - Jusbrasil O que é e como funciona o jovem aprendiz? Quanto ganha? Tem 13º e férias?" }, { "title": "Prática com leds - Semáforo", "url": "/aulas/posts/pratica-com-leds-semaforo/", "categories": "AULAS, NOÇÕES DE ROBÓTICA", "tags": "arduino, robótica, simulador, eletrônica", "date": "2023-04-20 09:00:00 -0300", "snippet": "Como criar e simular um semáforo simples usando o Arduino e o Tinkercad. É demonstrado como fazer as conexões dos LEDs na protoboard, ligá-los a uma porta do Arduino e, em seguida, adicionar resist...", "content": "Como criar e simular um semáforo simples usando o Arduino e o Tinkercad. É demonstrado como fazer as conexões dos LEDs na protoboard, ligá-los a uma porta do Arduino e, em seguida, adicionar resistores para evitar sobrecarga de corrente. O código para o semáforo é fornecido e explicado, e o tutorial termina com a simulação do semáforo em ação.Construindo o circuitoNa área de trabalho do Tinkercad, vamos começar puxando uma placa que será nossa protoboard. Vamos selecionar um LED vermelho e conectá-lo à placa. Em seguida, escolhemos um LED amarelo e um LED verde, conectando-os também. Para cada um dos LEDs, vamos puxar um fio do negativo e conectar na protoboard.Para evitar problemas de sobrecarga de corrente nos LEDs, vamos ligar os resistores. Escolhemos um resistor de 220Ω e o conectamos ao LED vermelho. Repetimos o processo para os outros LEDs, trocando a cor e o valor do resistor.Materiais necessários Computador com acesso à internet Conta gratuita no Tinkercad Acesso à plataforma do Arduino Placa de prototipagem LEDs vermelho, amarelo e verde Resistores de 220Ω Fios para conexão ArduinoPasso a passoPasso 1: Acesso ao TinkercadAcesse a plataforma do Tinkercad através do site https://www.tinkercad.com/ e faça o login em sua conta.Passo 2: Criação do circuitoApós acessar a plataforma do Tinkercad, crie um novo circuito e adicione uma placa de prototipagem. Em seguida, adicione três LEDs (vermelho, amarelo e verde) na placa, com um espaço entre eles.Conecte o GND de sua terra à placa. Para cada um dos LEDs, conecte um fio do negativo à placa e faça a ligação do fio de cada LED com o negativo através de uma curva.Posicione os LEDs para que possam ser conectados a uma porta do Arduino. Para isso, selecione a porta 13 e faça a ligação desta porta com o LED vermelho. Repita o processo para a porta 12 e o LED amarelo, e para a porta 11 e o LED verde.Conecte resistores (utilize um resistor de 220 ohms) para evitar sobrecarga de corrente nos LEDs.Passo 3: Acesso à plataforma do ArduinoAcesse a plataforma do Arduino através do site https://create.arduino.cc/editor e faça o login em sua conta.Passo 4: Criação do códigoApós acessar a plataforma do Arduino, abra um novo sketch e adicione o seguinte código:int ledVermelho = 13;int ledAmarelo = 12;int ledVerde = 11;void setup() { pinMode(ledVermelho, OUTPUT); pinMode(ledAmarelo, OUTPUT); pinMode(ledVerde, OUTPUT);}void loop() { digitalWrite(ledVermelho, HIGH); delay(5000); digitalWrite(ledVermelho, LOW); delay(1000); digitalWrite(ledAmarelo, HIGH); delay(3000); digitalWrite(ledAmarelo, LOW); digitalWrite(ledVerde, HIGH); delay(7000); digitalWrite(ledVerde, LOW); digitalWrite(ledVermelho, HIGH);}No código acima, indicamos quais são os pinos que correspondem a cada LED. Em seguida, pedimos para o LED vermelho ligar por 5 segundos, depois desligar. Repetimos o processo para o LED amarelo, ligando por 3 segundos, e para o LED verde, ligando por 7 segundos.Por fim, dentro do loop, indicamos que o LED vermelho deve ser ligado novamente, dando continuidade à sequência.Passo 5: Execução do códigoApós criar o código, conecte o Arduino ao computador e selecione a opção “Verificar” para verificar se não há erros no código. Caso não haja erros, selecione a opção “Fazer upload” para carregar o código no Arduino.Passo 6: Teste do semáforoApós carregar o código no Arduino, o semáforo estará pronto para ser testado. Conecte o Arduino ao circuito e ligue-o.ConclusãoCom o Tinkercad e o Arduino, é possível criar projetos incríveis, como o semáforo que aprendemos neste tutorial. Espero que tenha gostado e que continue explorando as possibilidades dessa tecnologia. Até a próxima!Referência TUTORIAL TINKERCAD ARDUINO COMO CRIAR E SIMULAR UM SEMÁFORO SIMPLES" }, { "title": "Exercícios com métodos em Java", "url": "/aulas/posts/exercicios-com-metodos-em-java/", "categories": "DESENVOLVIMENTO, PROGRAMADOR", "tags": "Senac, programador, programação, exercícios, java", "date": "2023-04-19 17:00:00 -0300", "snippet": "Refatore os seguintes problemas usando classes e Programação Orientada a Objetos: Problema: Calcular a média de três notas e exibir o resultado.import java.util.Scanner;public class MediaNotas { ...", "content": "Refatore os seguintes problemas usando classes e Programação Orientada a Objetos: Problema: Calcular a média de três notas e exibir o resultado.import java.util.Scanner;public class MediaNotas { public static void main(String[] args) { Scanner input = new Scanner(System.in); double nota1, nota2, nota3, media; System.out.print(\"Digite a primeira nota: \"); nota1 = input.nextDouble(); System.out.print(\"Digite a segunda nota: \"); nota2 = input.nextDouble(); System.out.print(\"Digite a terceira nota: \"); nota3 = input.nextDouble(); media = (nota1 + nota2 + nota3) / 3; System.out.println(\"A média é: \" + media); }}Exemplo de resolução do mesmo problema em Java com métodos estáticos:Problema: Calcular a média de três notas e exibir o resultado.import java.util.Scanner;public class MediaNotas { public static void main(String[] args) { Scanner input = new Scanner(System.in); System.out.print(\"Digite a primeira nota: \"); double nota1 = input.nextDouble(); System.out.print(\"Digite a segunda nota: \"); double nota2 = input.nextDouble(); System.out.print(\"Digite a terceira nota: \"); double nota3 = input.nextDouble(); double media = calcularMedia(nota1, nota2, nota3); System.out.println(\"A média é: \" + media); } public static double calcularMedia(double nota1, double nota2, double nota3) { return (nota1 + nota2 + nota3) / 3; }}Neste exemplo, utilizamos um método estático calcularMedia que recebe as três notas como parâmetros e retorna a média. No método main, lemos as notas do usuário e chamamos o método calcularMedia passando as notas como argumentos. O método calcularMedia é declarado como static para que possa ser chamado diretamente pela classe MediaNotas, sem precisar criar um objeto da classe.Usando classes com método estáticoExemplo de resolução do mesmo problema em Java com classes que possuem métodos estáticos:Problema: Calcular a média de três notas e exibir o resultado.import java.util.Scanner;public class MediaNotas { public static void main(String[] args) { Scanner input = new Scanner(System.in); System.out.print(\"Digite a primeira nota: \"); double nota1 = input.nextDouble(); System.out.print(\"Digite a segunda nota: \"); double nota2 = input.nextDouble(); System.out.print(\"Digite a terceira nota: \"); double nota3 = input.nextDouble(); double media = Aluno.calcularMedia(nota1, nota2, nota3); System.out.println(\"A média é: \" + media); }}class Aluno { public static double calcularMedia(double nota1, double nota2, double nota3) { return (nota1 + nota2 + nota3) / 3; }}Neste exemplo, criamos uma classe Aluno que possui apenas um método estático calcularMedia, que recebe as três notas como parâmetros e retorna a média. No método main, lemos as notas do usuário e chamamos o método calcularMedia da classe Aluno passando as notas como argumentos. O método calcularMedia é declarado como static para que possa ser chamado diretamente pela classe Aluno, sem precisar criar um objeto da classe.ReferênciasJava OOP (Object-Oriented Programming)" }, { "title": "Introdução a classes em Java", "url": "/aulas/posts/introducao-classes-em-java/", "categories": "DESENVOLVIMENTO, PROGRAMADOR", "tags": "Senac, programador, programação, exercícios, java", "date": "2023-04-18 17:00:00 -0300", "snippet": "Surgida na década de 1960, a OO é um estilo de programação que enfatiza os dados em detrimento das ações, ou seja, seu foco principal está na transposição para um sistema de informação de um contex...", "content": "Surgida na década de 1960, a OO é um estilo de programação que enfatiza os dados em detrimento das ações, ou seja, seu foco principal está na transposição para um sistema de informação de um contexto específico do mundo real no qual existem objetos que interagem entre si e que possuem características, comportamentos e responsabilidades.ClassesClasses são elementos fundamentais da programação orientada a objetos em Java. Elas permitem definir novos tipos de dados com seus próprios atributos (variáveis) e métodos (funções).Para criar uma classe em Java, você precisa seguir os seguintes passos: Defina o nome da classe. O nome da classe deve ser descritivo e começar com uma letra maiúscula. Exemplo: MinhaClasse. Defina os atributos da classe. Os atributos são variáveis que armazenam dados que pertencem à classe. Eles são definidos dentro da classe, mas fora dos métodos. Exemplo: private int meuAtributo; Defina os métodos da classe. Os métodos são funções que realizam operações relacionadas à classe. Eles são definidos dentro da classe, após a definição dos atributos. Exemplo: public void meuMetodo() { // implementação aqui } Crie um objeto da classe. Para usar uma classe, você precisa criar um objeto da classe. Exemplo: MinhaClasse objeto = new MinhaClasse(); Use os métodos e atributos do objeto. Agora que você tem um objeto da classe, você pode usar os métodos e atributos do objeto. Exemplo: objeto.meuMetodo(); int resultado = objeto.meuAtributo;Aqui está um exemplo completo de uma classe em Java:public class MinhaClasse { private int meuAtributo; public void meuMetodo() { System.out.println(\"Olá, mundo!\"); } public int getMeuAtributo() { return meuAtributo; } public void setMeuAtributo(int novoValor) { meuAtributo = novoValor; }}Neste exemplo, a classe MinhaClasse tem um atributo meuAtributo, um método meuMetodo que imprime uma mensagem e dois métodos get e set para obter e definir o valor do atributo.Para usar esta classe em um programa Java, você pode criar um objeto da classe e usar seus métodos e atributos:public class Programa { public static void main(String[] args) { MinhaClasse objeto = new MinhaClasse(); objeto.meuMetodo(); // imprime \"Olá, mundo!\" objeto.setMeuAtributo(42); int valor = objeto.getMeuAtributo(); // valor é 42 }}Neste exemplo, criamos um objeto da classe MinhaClasse, usamos o método meuMetodo para imprimir uma mensagem, definimos o valor do atributo meuAtributo usando o método setMeuAtributo e obtemos o valor do atributo usando o método getMeuAtributo.Exercício Faça um algoritmo para ler dois números e imprimir o maior, o menor ou então dizer se são iguais.Para resolver esse problema usando classes em Java, você pode criar uma classe Numeros que tenha dois atributos (os números a serem comparados) e três métodos que retornam o maior número, o menor número e um booleano que indica se os números são iguais. Aqui está um exemplo de como você pode fazer isso:public class Numeros { private int numero1; private int numero2; public Numeros(int numero1, int numero2) { this.numero1 = numero1; this.numero2 = numero2; } public int getMaior() { return Math.max(numero1, numero2); } public int getMenor() { return Math.min(numero1, numero2); } public boolean saoIguais() { return numero1 == numero2; }}Nesta classe, o construtor recebe os dois números a serem comparados e armazena-os nos atributos numero1 e numero2. Os métodos getMaior e getMenor usam a classe Math para retornar o maior e o menor número, respectivamente. O método saoIguais retorna um booleano que indica se os números são iguais.Para usar esta classe em um programa Java, você pode criar um objeto da classe e chamar seus métodos para obter o maior número, o menor número e verificar se os números são iguais. Aqui está um exemplo:import java.util.Scanner;public class Programa { public static void main(String[] args) { Scanner scanner = new Scanner(System.in); System.out.print(\"Digite o primeiro número: \"); int numero1 = scanner.nextInt(); System.out.print(\"Digite o segundo número: \"); int numero2 = scanner.nextInt(); Numeros numeros = new Numeros(numero1, numero2); if (numeros.saoIguais()) { System.out.println(\"Os números são iguais.\"); } else { System.out.println(\"O maior número é \" + numeros.getMaior()); System.out.println(\"O menor número é \" + numeros.getMenor()); } }}Neste exemplo, o programa lê dois números do usuário, cria um objeto da classe Numeros com esses números e usa os métodos getMaior, getMenor e saoIguais para imprimir o resultado. Se os números forem iguais, o programa imprime uma mensagem informando isso. Caso contrário, ele imprime o maior e o menor número.Usando métodos estáticosPara usar métodos estáticos no exemplo anterior, você pode modificar a classe Numeros para ter somente métodos estáticos e, em seguida, chamar esses métodos diretamente na classe Programa. Aqui está como o exemplo anterior pode ser reescrito usando métodos estáticos:import java.util.Scanner;public class Programa { public static void main(String[] args) { Scanner scanner = new Scanner(System.in); System.out.print(\"Digite o primeiro número: \"); int numero1 = scanner.nextInt(); System.out.print(\"Digite o segundo número: \"); int numero2 = scanner.nextInt(); if (Numeros.saoIguais(numero1, numero2)) { System.out.println(\"Os números são iguais.\"); } else { System.out.println(\"O maior número é \" + Numeros.getMaior(numero1, numero2)); System.out.println(\"O menor número é \" + Numeros.getMenor(numero1, numero2)); } }}class Numeros { public static int getMaior(int numero1, int numero2) { return Math.max(numero1, numero2); } public static int getMenor(int numero1, int numero2) { return Math.min(numero1, numero2); } public static boolean saoIguais(int numero1, int numero2) { return numero1 == numero2; }}Neste exemplo, os métodos getMaior, getMenor e saoIguais foram transformados em métodos estáticos. Isso significa que eles podem ser chamados diretamente na classe Numeros, sem a necessidade de criar um objeto da classe.No método main da classe Programa, os métodos estáticos são chamados diretamente na classe Numeros, passando os dois números como argumentos. A lógica é a mesma do exemplo anterior, mas agora não é necessário criar um objeto da classe Numeros.Note que a classe Numeros e a classe Programa foram colocadas em arquivos separados, com o nome da classe principal sendo o mesmo que o nome do arquivo. Isso é uma boa prática em Java. Se você quiser manter tudo em um arquivo, basta colocar a classe Numeros antes da classe Programa.ReferênciasXavier, Gley Fabiano CardosoLógica de programaçãoE-book. Disponível em: https://bibliotecadigitalsenac.com.br/?from=%3FcontentInfo%3D1306#/legacy/epub/1306 cap. 10Acesso em 18/04/2023 Variáveis Primitivas e Controle de Fluxo - Alura Cursos Online Orientação a Objetos Básica - Alura Cursos Online Java OOP (Object-Oriented Programming)" }, { "title": "Prática Montando uma rede local com servidores", "url": "/aulas/posts/pratica-montando-uma-rede-local-com-servidor/", "categories": "AULAS, INFRAESTRUTURA DE REDES", "tags": "infraestrutura, simulador, packet tracer", "date": "2023-04-18 10:40:00 -0300", "snippet": "Para realizar uma prática de configuração de uma rede com alguns computadores, um servidor DNS, DHCP e HTTP no simulador Packet Tracer, você pode seguir os seguintes passos:Passo 1: Abra o Packet T...", "content": "Para realizar uma prática de configuração de uma rede com alguns computadores, um servidor DNS, DHCP e HTTP no simulador Packet Tracer, você pode seguir os seguintes passos:Passo 1: Abra o Packet Tracer e crie uma nova topologia.Passo 2: Adicione os seguintes dispositivos: 1 switch, 1 roteador, 1 servidor DNS, 1 servidor DHCP e 3 computadores.Passo 3: Conecte os dispositivos conforme a imagem abaixo:Passo 4: Configure o endereço IP e a máscara de sub-rede para cada dispositivo, como mostrado abaixo: Roteador: 192.168.1.1/24 Servidor DNS: 192.168.1.10/24 Servidor DHCP: 192.168.1.20/24 Computador 1: 192.168.1.100/24 Computador 2: 192.168.1.101/24 Computador 3: 192.168.1.102/24Passo 5: Configure o servidor DHCP com o pool de endereços IP e o gateway padrão. Para isso, siga os seguintes passos:a) Clique no servidor DHCP e selecione a guia Configuração.b) Clique no botão Adicionar para criar um novo pool de endereços IP.c) Digite as informações abaixo: Nome do Pool: Pool_DHCP Endereço Inicial: 192.168.1.100 Endereço Final: 192.168.1.200 Máscara de Sub-Rede: 255.255.255.0 Gateway Padrão: 192.168.1.1d) Clique em OK para salvar as configurações.Passo 6: Configure o servidor DNS com o nome de domínio e o endereço IP. Para isso, siga os seguintes passos:a) Clique no servidor DNS e selecione a guia Configuração.b) Digite as informações abaixo: Nome de Domínio: empresa.local Endereço IP: 192.168.1.10c) Clique em OK para salvar as configurações.Passo 7: Configure os computadores com o endereço IP, a máscara de sub-rede, o gateway padrão, o servidor DNS e o servidor HTTP. Para isso, siga os seguintes passos:a) Clique em cada computador e selecione a guia Configuração.b) Digite as informações abaixo: Endereço IP: 192.168.1.100 (para o Computador 1), 192.168.1.101 (para o Computador 2) e 192.168.1.102 (para o Computador 3). Máscara de Sub-Rede: 255.255.255.0 Gateway Padrão: 192.168.1.1 Servidor DNS: 192.168.1.10 Servidor HTTP: 192.168.1.20c) Clique em OK para salvar as configurações.Passo 8: Verifique se as configurações estão corretas. Para isso, abra o prompt de comando em cada computador e execute o comando “ipconfig /a”Passo 8: Verifique se as configurações estão corretas. Para isso, abra o prompt de comando em cada computador e execute o comando “ipconfig /all”. Isso mostrará todas as informações de rede do computador, incluindo o endereço IP, a máscara de sub-rede, o gateway padrão, o servidor DNS e o servidor HTTP.Passo 9: Configure o servidor HTTP para hospedar um site simples. Para isso, siga os seguintes passos:a) Clique no servidor HTTP e selecione a guia Configuração.b) Clique no botão Adicionar para criar um novo site.c) Digite as informações abaixo: Nome do Site: MeuSite Diretório Raiz: C:\\MeuSited) Clique em OK para salvar as configurações.e) Crie um arquivo index.html dentro da pasta C:\\MeuSite com algum conteúdo.Passo 10: Verifique se o site está funcionando corretamente. Para isso, abra um navegador em um dos computadores e digite o endereço IP do servidor HTTP na barra de endereço (por exemplo, http://192.168.1.20/MeuSite). O site deve ser exibido corretamente no navegador.Pronto! Agora você configurou uma rede com alguns computadores, um servidor DNS, DHCP e HTTP no simulador Packet Tracer e verificou que tudo está funcionando corretamente.Referências Simulador de redes" }, { "title": "Programa Avance", "url": "/aulas/posts/programa-avance/", "categories": "AULAS, PLANEJAMENTO DE CARREIRA", "tags": "planejamento, carreira, graduação", "date": "2023-04-18 10:00:00 -0300", "snippet": "O Governo do Estado do Ceará promoveu o Programa AvanCE - Bolsa Universitário. O programa ofereceu auxílio financeiro no valor mensal de R$ 468,50 para 2 mil ex-alunos da rede estadual que ingressa...", "content": "O Governo do Estado do Ceará promoveu o Programa AvanCE - Bolsa Universitário. O programa ofereceu auxílio financeiro no valor mensal de R$ 468,50 para 2 mil ex-alunos da rede estadual que ingressaram no ensino superior no segundo semestre de 2019 e no primeiro semestre de 2020.Os interessados devem ter cursado todo o Ensino Médio em escola pública da rede estadual do Ceará, obtido média geral igual ou superior a 560 pontos no Enem e estar matriculado em no mínimo 12 créditos no primeiro ano de um curso de graduação em uma Instituição de Ensino Superior credenciada pelo MEC, além de apresentar o registro atualizado no Cadastro Único para Programas Sociais do Governo Federal (CadUnico). 20% das bolsas serão destinadas a estudantes negros, índios, quilombolas e com deficiência. O resultado final da seleção será divulgado no site da Seduc no dia 19 de maio de 2020. A Secretaria da Educação é a responsável pela seleção dos bolsistas, enquanto a concessão da bolsa ficará a cargo da Fundação Cearense de Apoio ao Desenvolvimento Científico e Tecnológico (Funcap). Desde o seu lançamento em 2017, o programa já beneficiou 3 mil estudantes.ReferênciasAvanCEAbertas inscrições para seleção de bolsistas do Programa AvanCE - Governo do Estado do Ceará" }, { "title": "Prática com leds", "url": "/aulas/posts/pratica-com-leds/", "categories": "AULAS, NOÇÕES DE ROBÓTICA", "tags": "arduino, robótica, simulador, eletrônica", "date": "2023-04-18 09:00:00 -0300", "snippet": "Prática de pisca-pisca com LED, onde é necessário usar um resistor entre o pino de saída do Arduíno e o LED para limitar a corrente elétrica e evitar o excesso de tensão, que pode ser prejudicial a...", "content": "Prática de pisca-pisca com LED, onde é necessário usar um resistor entre o pino de saída do Arduíno e o LED para limitar a corrente elétrica e evitar o excesso de tensão, que pode ser prejudicial ao LED.Se você nunca utilizou um LED, saiba que ele é diferente de uma pequena lâmpada, pois possui polaridade. Ou seja, ao ligá-lo, é necessário ter atenção em colocar o polo positivo da pilha, por exemplo, no polo positivo do LED, que também é chamado de ânodo, e o polo negativo da pilha no polo negativo do LED, também conhecido como cátodo. Se cada polaridade não for obedecida, o LED simplesmente não irá acender. Normalmente, em projetos eletrônicos, é utilizada essa simbologia para representar o diodo LED, onde podemos ver também a polaridade de seus terminais, representados pelo ânodo e cátodo.É importante prestar atenção à polaridade do LED, pois ele possui polaridade positiva (ânodo) e negativa (cátodo) e, se a polaridade não for obedecida, o LED não acenderá. O circuito é montado no software online Tinkercad, onde é possível explorar e alterar os componentes e criar o programa em linguagem C, utilizando os comandos digitais para configurar o pino digital como entrada ou saída e escrever ou ler informações.O programa para o pisca-pisca com LED começa com a declaração da variável LED pin, associada ao pino 10 do Arduíno, e a configuração do mesmo como saída, utilizando a função pin mode no void setup. No void loop, é iniciado o programa do pisca-pisca com LED utilizando a função digitalWrite para acender e apagar o LED.Materiais necessários Arduino Uno; LEDs; Resistores de 470 ohms; Cabos de conexão.Passo a passo Acesse o site do Tinkercad e faça login com seu e-mail e senha; Clique em “Circuitos” e depois em “Criar um novo circuito”; No ambiente, selecione o Arduino Uno e o resistor. Gire-os conforme sua necessidade; Altere o valor do resistor para 470 ohms; Pegue o LED e observe a indicação do polo anodo positivo e do polo catodo negativo; Conecte a saída do pino 10 do Arduino passando pelo resistor ligado ao anodo do LED; Conecte o negativo diretamente ao catodo do LED; Clique em “Código” e selecione a opção “Texto”; Inicie o programa em linguagem C, utilizando a estrutura básica de um programa para o Arduino; Utilize os comandos digitais, como o “pinMode” para configurar o pino digital como uma entrada ou saída, “digitalWrite” para escrever uma informação na saída do pino digital e “digitalRead” para ler uma informação na entrada digital; Elabore o programa para a prática pisca LED, declarando a variável “ledPin” associada ao pino 10 do Arduino e, em seguida, utilize as funções “pinMode” e “digitalWrite” para fazer o LED piscar.Montagem do circuito no Tinkercad Acesse a página do Tinkercad e faça login com seu e-mail e senha. Vá em “Circuitos” e clique em “Criar um novo circuito”. Nesta aba, temos acesso a todos os componentes disponíveis para explorar. Podemos também alterar o nome do arquivo. Pegue o Arduino Uno e gire-o, se assim desejar. Os componentes aos terminais ficam do lado. Pegue o resistor e gire-o, se necessário. Altere o valor dele para 470 ohms. Este valor é recomendável para a aplicação com LED de 2 volts. Pegue o LED e observe a indicação do polo ânodo positivo e do polo cátodo negativo. Ligue agora a saída do pino 10 no Arduino, passando pelo resistor, ligado ao ânodo. O negativo, que é o GND, vamos ligar direto no cátodo do LED.Programação No início, aparece a lógica em blocos, similar ao software “Scratch”. Vamos mudar para texto e iniciar o programa em linguagem C. Temos a estrutura básica de um programa para o Arduino. O comando #include é utilizado para incluir algumas bibliotecas em aplicações específicas em alguns programas. Quando utilizamos variáveis no programa em linguagem C, é necessário declará-las. Neste caso, foi declarada uma variável int, como variável inteira. Os dois comandos essenciais para o programa são void setup e void loop. Sem eles, fatalmente você terá um erro na hora de fazer a compilação. O void setup é uma função de inicialização, ou seja, realiza as funçõesEscrevendo o programa em linguagem C para fazer o LED piscar. Para fazer isso, usamos o comando digital write para enviar um sinal para o pino do LED e fazê-lo acender e apagar em um determinado intervalo de tempo. Aqui está o código completo:// Declaração da variável para o pino do LEDint ledPin = 10;void setup() { // Configura o pino do LED como saída pinMode(ledPin, OUTPUT);}void loop() { // Liga o LED digitalWrite(ledPin, HIGH); delay(1000); // Aguarda 1 segundo // Desliga o LED digitalWrite(ledPin, LOW); delay(1000); // Aguarda 1 segundo}Esse programa é bastante simples. Na função setup, configuramos o pino do LED como uma saída usando o comando pinMode. Em seguida, na função loop, usamos o comando digitalWrite para acender e apagar o LED em um intervalo de tempo de um segundo (1000 milissegundos).Agora que escrevemos o programa, podemos fazer a simulação no Tinkercad. Basta clicar no botão “Iniciar Simulação” na parte superior da tela e aguardar a simulação começar. Você deve ver o LED piscando a uma taxa de uma vez por segundo.Com essa prática, aprendemos como montar um circuito com um LED e um resistor, como programar o Arduino usando a linguagem C e como simular o circuito no Tinkercad. Esses são os fundamentos para a criação de projetos mais avançados com o Arduino.Referência" }, { "title": "Funções em Java", "url": "/aulas/posts/funcoes-em-java/", "categories": "DESENVOLVIMENTO, PROGRAMADOR", "tags": "Senac, programador, programação, exercícios, java", "date": "2023-04-17 17:00:00 -0300", "snippet": "Em Java, as funções são chamadas de métodos e são definidas dentro de uma classe. Um método é um bloco de código que executa uma tarefa específica e pode ser chamado várias vezes ao longo do progra...", "content": "Em Java, as funções são chamadas de métodos e são definidas dentro de uma classe. Um método é um bloco de código que executa uma tarefa específica e pode ser chamado várias vezes ao longo do programa.Aqui está um exemplo simples de um método em Java:public class ExemploMetodo { public static void main(String[] args) { int resultado = somar(3, 4); System.out.println(resultado); } public static int somar(int a, int b) { int resultado = a + b; return resultado; }}Neste exemplo, criamos um método chamado “somar” que recebe dois argumentos inteiros e retorna sua soma. O método é definido com o modificador “public” (que significa que ele pode ser acessado de fora da classe), o tipo de retorno (que é int neste caso), o nome do método e os parâmetros que ele recebe entre parênteses.O método “somar” é chamado dentro do método “main” e o resultado é armazenado na variável “resultado”, que é então exibida no console.Além disso, os métodos podem ser sobrecarregados, o que significa que podemos ter dois ou mais métodos com o mesmo nome, mas diferentes tipos ou números de parâmetros. Isso é útil quando queremos executar a mesma tarefa com diferentes tipos de entrada.public class ExemploSobrecarga { public static void main(String[] args) { int resultadoInteiro = somar(3, 4); double resultadoDouble = somar(3.5, 4.5); System.out.println(resultadoInteiro); System.out.println(resultadoDouble); } public static int somar(int a, int b) { int resultado = a + b; return resultado; } public static double somar(double a, double b) { double resultado = a + b; return resultado; }}Neste exemplo, temos dois métodos “somar” com os mesmos nomes, mas diferentes tipos de entrada (int e double). Quando chamamos o método “somar” com inteiros, o método com inteiros como parâmetros é chamado e retorna um inteiro. Quando chamamos o método “somar” com doubles, o método com doubles como parâmetros é chamado e retorna um double.Exercícios Faça um algoritmo para ler dois números e imprimir o maior, o menor ou então dizer se são iguais. Faça um algoritmo para ler um número inteiro e dizer se o número lido é par ou impar. Faça um algoritmo para ler dois números A e B e dizer se A é divisível por B. Faça um algoritmo para ler dois números e imprimi-los em ordem crescente. Faça um algoritmo para ler três números e imprimir o maior.Resolução com Java1. Comparar númerosPara resolver este problema em Java, podemos usar a classe Scanner para ler os dois números digitados pelo usuário e compará-los utilizando estruturas condicionais.import java.util.Scanner;public class Main { public static void main(String[] args) { Scanner scanner = new Scanner(System.in); System.out.print(\"Digite o primeiro número: \"); int num1 = scanner.nextInt(); System.out.print(\"Digite o segundo número: \"); int num2 = scanner.nextInt(); if(num1 == num2) { System.out.println(\"Os números são iguais\"); } else if(num1 &gt; num2) { System.out.println(\"O maior número é \" + num1); System.out.println(\"O menor número é \" + num2); } else { System.out.println(\"O maior número é \" + num2); System.out.println(\"O menor número é \" + num1); } }}Exemplo de como resolver esse problema usando funções em Java.import java.util.Scanner;public class ComparadorNumeros { public static void main(String[] args) { Scanner scanner = new Scanner(System.in); System.out.print(\"Digite o primeiro número: \"); int numero1 = scanner.nextInt(); System.out.print(\"Digite o segundo número: \"); int numero2 = scanner.nextInt(); if (ehIgual(numero1, numero2)) { System.out.println(\"Os números são iguais\"); } else { int maior = getMaior(numero1, numero2); int menor = getMenor(numero1, numero2); System.out.println(\"O maior número é: \" + maior); System.out.println(\"O menor número é: \" + menor); } } public static boolean ehIgual(int numero1, int numero2) { return numero1 == numero2; } public static int getMaior(int numero1, int numero2) { return Math.max(numero1, numero2); } public static int getMenor(int numero1, int numero2) { return Math.min(numero1, numero2); }}Aqui, estamos definindo três funções: ehIgual, getMaior e getMenor.A função ehIgual simplesmente compara os dois números e retorna true se eles forem iguais e false caso contrário.As funções getMaior e getMenor usam a classe Math do Java para determinar o maior e o menor número entre os dois dados.No método main, lemos os dois números do usuário e usamos uma declaração condicional para imprimir o resultado correto com base em se os números são iguais ou diferentes.2. par ou ímparPara verificar se um número é par ou ímpar em Java, podemos utilizar o operador de módulo para verificar se o resto da divisão por 2 é igual a zero.import java.util.Scanner;public class Main { public static void main(String[] args) { Scanner scanner = new Scanner(System.in); System.out.print(\"Digite um número: \"); int num = scanner.nextInt(); if(num % 2 == 0) { System.out.println(\"O número \" + num + \" é par\"); } else { System.out.println(\"O número \" + num + \" é ímpar\"); } }}Exemplo de como resolver esse problema usando funções em Java.import java.util.Scanner;public class ParImpar { public static void main(String[] args) { Scanner scanner = new Scanner(System.in); System.out.print(\"Digite um número inteiro: \"); int numero = scanner.nextInt(); if (ehPar(numero)) { System.out.println(\"O número \" + numero + \" é par\"); } else { System.out.println(\"O número \" + numero + \" é ímpar\"); } } public static boolean ehPar(int numero) { return numero % 2 == 0; }}Aqui, estamos definindo uma função ehPar que verifica se um número é par ou não. A função retorna true se o número é par e false se o número é ímpar.No método main, lemos o número do usuário e usamos a função ehPar para determinar se o número é par ou ímpar. Em seguida, imprimimos a mensagem apropriada com base no resultado da função.3. Verificar se é divisívelPara verificar se um número é divisível por outro em Java, podemos utilizar o operador de módulo novamente para verificar se o resto da divisão é igual a zero.import java.util.Scanner;public class Main { public static void main(String[] args) { Scanner scanner = new Scanner(System.in); System.out.print(\"Digite o primeiro número: \"); int num1 = scanner.nextInt(); System.out.print(\"Digite o segundo número: \"); int num2 = scanner.nextInt(); if(num1 % num2 == 0) { System.out.println(num1 + \" é divisível por \" + num2); } else { System.out.println(num1 + \" não é divisível por \" + num2); } }}Exemplo de como resolver esse problema usando funções em Java.import java.util.Scanner;public class Divisivel { public static void main(String[] args) { Scanner scanner = new Scanner(System.in); System.out.print(\"Digite um número A: \"); int a = scanner.nextInt(); System.out.print(\"Digite um número B: \"); int b = scanner.nextInt(); if (ehDivisivel(a, b)) { System.out.println(a + \" é divisível por \" + b); } else { System.out.println(a + \" não é divisível por \" + b); } } public static boolean ehDivisivel(int a, int b) { return a % b == 0; }}Aqui, estamos definindo uma função ehDivisivel que verifica se o número A é divisível por B ou não. A função retorna true se A for divisível por B e false caso contrário.No método main, lemos os dois números A e B do usuário e usamos a função ehDivisivel para determinar se A é divisível por B ou não. Em seguida, imprimimos a mensagem apropriada com base no resultado da função.4. Ordenar númerosPara imprimir dois números em ordem crescente, podemos utilizar a classe Arrays e o método sort.import java.util.Arrays;import java.util.Scanner;public class Main { public static void main(String[] args) { Scanner scanner = new Scanner(System.in); System.out.print(\"Digite o primeiro número: \"); int num1 = scanner.nextInt(); System.out.print(\"Digite o segundo número: \"); int num2 = scanner.nextInt(); int[] numeros = {num1, num2}; Arrays.sort(numeros); System.out.println(\"Os números em ordem crescente são: \" + numeros[0] + \" e \" + numeros[1]); }}5. Encontrar o maiorPara encontrar o maior número entre três, podemos utilizar estruturas condicionais para compará-los.import java.util.Scanner;public class ComparadorNumeros { public static void main(String[] args) { Scanner scanner = new Scanner(System.in); System.out.print(\"Digite o primeiro número: \"); int numero1 = scanner.nextInt(); System.out.print(\"Digite o segundo número: \"); int numero2 = scanner.nextInt(); if (ehIgual(numero1, numero2)) { System.out.println(\"Os números são iguais\"); } else { int maior = getMaior(numero1, numero2); int menor = getMenor(numero1, numero2); System.out.println(\"O maior número é: \" + maior); System.out.println(\"O menor número é: \" + menor); } } public static boolean ehIgual(int numero1, int numero2) { return numero1 == numero2; } public static int getMaior(int numero1, int numero2) { return Math.max(numero1, numero2); } public static int getMenor(int numero1, int numero2) { return Math.min(numero1, numero2); }}Aqui, estamos definindo três funções: ehIgual, getMaior e getMenor.A função ehIgual simplesmente compara os dois números e retorna true se eles forem iguais e false caso contrário.As funções getMaior e getMenor usam a classe Math do Java para determinar o maior e o menor número entre os dois dados.No método main, lemos os dois números do usuário e usamos uma declaração condicional para imprimir o resultado correto com base em se os números são iguais ou diferentes.Referências Apostilas - Alura Cursos Online Learn Java - Dev.java O que é Java - Alura Cursos Online Java Methods" }, { "title": "Prática Montando uma rede local com servidor de DHCP", "url": "/aulas/posts/pratica-montando-uma-rede-local-com-dhcp/", "categories": "AULAS, INFRAESTRUTURA DE REDES", "tags": "infraestrutura, simulador, packet tracer", "date": "2023-04-17 10:40:00 -0300", "snippet": "O servidor DHCP é responsável por atribuir endereços IP automaticamente aos dispositivos na rede, em vez de exigir que o usuário configure manualmente cada dispositivo. Isso é particularmente útil ...", "content": "O servidor DHCP é responsável por atribuir endereços IP automaticamente aos dispositivos na rede, em vez de exigir que o usuário configure manualmente cada dispositivo. Isso é particularmente útil em redes maiores, onde a atribuição manual de endereços IP pode ser um processo demorado e propenso a erros.No nosso exemplo, o servidor DHCP está configurado para atribuir endereços IP na faixa de 192.168.1.100 a 192.168.1.200. Isso significa que, quando um novo dispositivo é conectado à rede, o servidor DHCP atribuirá automaticamente um endereço IP dentro dessa faixa ao dispositivo. Além disso, o servidor DHCP também está configurado para atribuir um endereço IP para o gateway padrão (o roteador Wi-Fi) e para o servidor DNS.Desta forma, quando um novo dispositivo é conectado à rede, ele receberá automaticamente um endereço IP, um gateway padrão e um servidor DNS. Isso torna a configuração da rede muito mais fácil e reduz o risco de erros de configuração.PráticaExemplo de como configurar uma rede local usando um roteador Wi-Fi e alguns computadores no Packet Tracer: Abra o Packet Tracer e crie uma nova topologia. Adicione um roteador e quatro computadores à topologia. Conecte os computadores ao roteador usando cabos Ethernet. Adicione um módulo sem fio ao roteador e conecte-o à antena. No modo de configuração do roteador, configure as seguintes informações: Nome da rede (SSID) Senha da rede Tipo de criptografia sem fio (WPA2, por exemplo) Configure o endereço IP do roteador, o endereço IP padrão da rede local e o gateway padrão. Por exemplo: Endereço IP do roteador: 192.168.1.1 Endereço IP padrão da rede local: 192.168.1.0/24 Gateway padrão: 192.168.1.1 Para configurar o servidor DHCP, siga estes passos: Selecione o servidor DHCP e vá para a guia “Configuração”. Clique em “Pool DHCP” e adicione um novo pool com o seguinte: Nome do pool: pool1 Endereço de rede: 192.168.1.0 Máscara de sub-rede: 255.255.255.0 Gateway padrão: 192.168.1.1 DNS: 192.168.1.10 Clique em “OK” para salvar o pool DHCP. Configure as informações de rede em cada um dos quatro computadores da rede para receberem a configuração por DHCP. Verifique se as configurações estão corretas e salve a topologia. Execute a simulação e teste a conexão de rede entre os computadores e o roteador Wi-Fi.Referências Simulador de redes" }, { "title": "Jovem aprendiz e estágio", "url": "/aulas/posts/jovem-aprendiz-e-estagio/", "categories": "AULAS, PLANEJAMENTO DE CARREIRA", "tags": "planejamento, carreira, graduação", "date": "2023-04-17 10:00:00 -0300", "snippet": "Os regimes de estagiário e Jovem Aprendiz são regulamentados pela CLT e pela Lei nº 11.788/2011, porém são diferentes entre si. Os colaboradores contratados em ambos regimes entram em uma empresa p...", "content": "Os regimes de estagiário e Jovem Aprendiz são regulamentados pela CLT e pela Lei nº 11.788/2011, porém são diferentes entre si. Os colaboradores contratados em ambos regimes entram em uma empresa para adquirir experiência profissional e devem ter suas horas de estudo respeitadas. Neste artigo mostraremos o que diz a lei e as diferenças entre as duas modalidades de contratos!O que é Estágio?De acordo com o Artigo 1º da Lei 11.788/2011, o estágio é um ato educativo escolar supervisionado, desenvolvido no ambiente de trabalho, que visa à preparação para o trabalho produtivo de educandos que estejam frequentando o ensino regular em instituições de educação superior, de educação profissional, de ensino médio, da educação especial e dos anos finais do ensino fundamental, na modalidade profissional da educação de jovens e adultos.O estágio faz parte do projeto pedagógico do curso, além de integrar o itinerário formativo do educando. O estágio visa ao aprendizado de competências próprias da atividade profissional e à contextualização curricular, objetivando o desenvolvimento do educando para a vida cidadã e para o trabalho.Vale ressaltar que o estágio pode ser obrigatório ou não-obrigatório.O que é o programa Jovem Aprendiz?Já o programa Jovem Aprendiz foi desenvolvido pelo Governo Federal a partir da Lei 10.09/00 ou Lei da Aprendizagem. O objetivo do programa é capacitar jovens e adolescentes acima de 14 anos em todo o país. As áreas de atuação de um Jovem Aprendiz não precisam estar relacionadas com seus estudos, como acontece com o estágio.Segundo a lei, há algumas funções que não podem ser executadas por Jovens Aprendizes, pois estão vinculadas à lista TIP (Piores Formas de Trabalho Infantil), previstas no Decreto nº 6481/2008, que rege a Convenção 182 da OIT (Organização Internacional do Trabalho). Algumas das atividades que não podem ser exercidas pelo menor aprendiz são: atividades relacionadas à agricultura e à pecuária, trabalho doméstico, indústria de transformação, entre outras.O trabalho doméstico, por exemplo, é proibido porque pode expor o Jovem Aprendiz a esforços intensos, abuso físico, psicológico e até sexual, longas jornadas de trabalho, e assim por diante. Isto significa que esta lista de atividades proibidas existe para proteger os menores e não submetê-los a ambientes nocivos à saúde e que possam resultar em quaisquer tipos de traumas.O que fazer para contratar um Jovem Aprendiz?Há duas opções de contratação de Jovens Aprendizes pelas empresas interessadas. A primeira é por meio de parceria com ONGs e outras instituições para intermediar o contato entre empresa e Jovem. A segunda opção é criar seu próprio programa de Jovem Aprendiz.A empresa precisa criar um programa que seja classificado como técnico-profissional.Já no contrato de jovem aprendiz, além das informações básicas, deve constar o programa de aprendizagem que será desenvolvido, com as atividades teóricas e práticas que serão realizadas, e a carga horária semanal. A duração do contrato de jovem aprendiz é de até dois anos, e durante esse período, o aprendiz terá direito a férias remuneradas, 13º salário, FGTS, entre outros direitos trabalhistas.ConclusãoEm resumo, tanto o estagiário quanto o jovem aprendiz são contratados para adquirir experiência profissional, mas existem diferenças significativas entre os dois regimes. O estágio é voltado para estudantes que buscam integrar a teoria com a prática, enquanto o programa jovem aprendiz visa capacitar jovens e adolescentes para o mercado de trabalho.Além disso, o contrato de estágio não precisa ser anotado na carteira de trabalho, enquanto o contrato de jovem aprendiz é obrigatório. As empresas que desejam contratar jovens aprendizes precisam seguir algumas normas e critérios estabelecidos pela lei, incluindo a parceria com instituições qualificadas e a elaboração de um programa técnico-profissional de complexidade progressiva.Por fim, é importante destacar que tanto o estagiário quanto o jovem aprendiz possuem direitos trabalhistas garantidos por lei, e é dever das empresas respeitar e cumprir esses direitos, proporcionando um ambiente saudável e seguro para o desenvolvimento profissional desses colaboradores.Referências Estagiário e Jovem Aprendiz: qual é a diferença? - Oitchau Principais diferenças entre contrato de aprendizagem e de estágio não obrigatório - Jusbrasil O que é e como funciona o jovem aprendiz? Quanto ganha? Tem 13º e férias?" }, { "title": "Componente Led", "url": "/aulas/posts/componente-led/", "categories": "AULAS, NOÇÕES DE ROBÓTICA", "tags": "arduino, robótica, curso, eletrônica", "date": "2023-04-17 09:00:00 -0300", "snippet": "O LED (Light Emitting Diode ou Diodo Emissor de Luz) é um componente eletrônico que emite luz quando uma corrente elétrica passa por ele. Algumas características do LED são: Eficiência energética:...", "content": "O LED (Light Emitting Diode ou Diodo Emissor de Luz) é um componente eletrônico que emite luz quando uma corrente elétrica passa por ele. Algumas características do LED são: Eficiência energética: O LED é mais eficiente energeticamente do que outras fontes de luz, como lâmpadas incandescentes ou fluorescentes. Isso significa que ele produz mais luz por watt de energia consumida, o que o torna uma opção mais sustentável e econômica. Vida útil longa: O LED tem uma vida útil muito longa em comparação com outras fontes de luz. Eles podem durar até 50.000 horas ou mais, o que significa que precisam ser substituídos com menos frequência. Tamanho compacto: O LED é muito pequeno e pode ser utilizado em diversos tipos de aplicações, desde iluminação de ambientes até displays de aparelhos eletrônicos. Resistência a choques e vibrações: O LED é mais resistente a choques e vibrações do que outras fontes de luz, como lâmpadas incandescentes ou fluorescentes. Cores variadas: O LED pode emitir luz em diversas cores, como vermelho, verde, azul, amarelo, entre outras. Isso o torna uma opção versátil para diferentes aplicações. Baixa tensão: O LED funciona com baixa tensão, o que o torna seguro e fácil de usar em circuitos eletrônicos.Composição do ledComponente eletrônico ledO LED (Light Emitting Diode ou Diodo Emissor de Luz) é composto por camadas de materiais semicondutores, que são dopados (ou seja, têm impurezas adicionadas) para criar uma junção p-n. A junção p-n é a interface entre duas camadas de semicondutores com polaridades opostas, ou seja, uma camada é carregada positivamente (p) e a outra é carregada negativamente (n).Quando uma tensão elétrica é aplicada à junção p-n do LED, os elétrons na camada n são atraídos para a camada p, onde eles preenchem lacunas na estrutura atômica do material. Essa recombinação entre elétrons e lacunas produz fótons de luz, que são emitidos pelo LED.O material semicondutor utilizado na camada p é geralmente uma liga de gálio, alumínio e índio (AlGaInP), que produz luz nas cores vermelha, laranja e amarela. Já o material semicondutor utilizado na camada n é geralmente nitreto de gálio (GaN), que produz luz nas cores azul, verde e branca.O tamanho e a composição dos materiais semicondutores utilizados no LED podem ser ajustados para produzir diferentes cores de luz. Além disso, o LED pode ser encapsulado em plástico ou vidro para proteger os materiais semicondutores e direcionar a emissão de luz em uma determinada direção.Exemplo de práticaUm exemplo de prática com resistores e leds no Tinkercad seria a montagem de um circuito simples para acender um LED. Para isso, pode-se utilizar um resistor de 220 ohms e um LED.O circuito seria montado da seguinte forma: o resistor seria conectado em série com o LED, e essa combinação seria conectada em série com uma fonte de energia, como uma bateria de 9V. A perna mais longa do LED, que é o anodo, seria conectada ao terminal positivo da fonte, enquanto a perna mais curta, que é o catodo, seria conectada ao resistor.Ao simular o circuito no Tinkercad, pode-se observar que o LED acende com intensidade adequada, graças à resistência oferecida pelo resistor, que protege o LED de uma corrente elétrica excessiva. É possível também variar o valor do resistor para ajustar a intensidade da luz do LED.Outra prática com resistores e leds seria a montagem de um circuito com vários LEDs, utilizando resistores de valores diferentes para cada LED, de modo a obter uma distribuição uniforme da corrente elétrica entre os componentes. Essa prática é útil para a criação de efeitos de luz em projetos de eletrônica e pode ser facilmente simulada no Tinkercad.Referências Mundo da elétrica: Led, o que é e como utilizar Apostila de Robótica Tinkercad - simulador" }, { "title": "Introdução a linguagem Java", "url": "/aulas/posts/introducao-a-linguagem-java/", "categories": "DESENVOLVIMENTO, PROGRAMADOR", "tags": "Senac, lógica, programador, programação, exercícios, java", "date": "2023-04-14 17:00:00 -0300", "snippet": "Java é uma linguagem de programação moderna e profissional que atualmente está na 17ª versão.CaracterísticasMultiplataforma Java é uma linguagem que pode ser executada virtualmente em várias plata...", "content": "Java é uma linguagem de programação moderna e profissional que atualmente está na 17ª versão.CaracterísticasMultiplataforma Java é uma linguagem que pode ser executada virtualmente em várias plataformas, tornando-a atraente para o mercado. A capacidade de processamento em cliente (browser) é um aspecto importante da linguagem. Programadores não precisam se preocupar em saber em qual máquina o programa será executado, pois um mesmo programa pode ser usado em vários tipos de equipamento.Integração com outras linguagens Java pode ser usado em conjunto com outras linguagens, como HTML, para criar aplicações que podem ser embutidas em documentos HTML e transmitidas na internet. Os programas escritos em Java podem ser executados como um acessório em um computador do usuário que é transferido do servidor web para a máquina do usuário no momento do acesso. Exemplos de aplicações incluem compra de veículos e consulta de extrato bancário.Similaridade com C++ e Programação Orientada a Objetos Java tem uma sintaxe semelhante à linguagem C++ e é orientada a objetos. A programação orientada a objetos é universalmente adotada como padrão de mercado.Frameworks Devido ao sucesso e aceitação no mercado, foram desenvolvidos muitos frameworks para facilitar e automatizar o processo de desenvolvimento de software. Um framework pode ser entendido como um ambiente de trabalho que torna transparente o processo de desenvolvimento, reduzindo a preocupação do desenvolvedor em como as coisas funcionam e como elas se integram umas com as outras.HistóricoA linguagem Java foi criada por James Gosling e sua equipe na Sun Microsystems na década de 1990. O objetivo inicial era criar uma linguagem que permitisse a programação em diversas plataformas, além de ser mais segura e confiável do que outras linguagens disponíveis na época.Em 1995, a Sun Microsystems lançou oficialmente a primeira versão do Java, que incluía o Java Development Kit (JDK) e o Java Runtime Environment (JRE). A linguagem Java rapidamente ganhou popularidade, especialmente na área de desenvolvimento web, devido à sua capacidade de ser executada em diferentes plataformas e dispositivos.Em 2009, a Sun Microsystems foi adquirida pela Oracle Corporation, que passou a ser a proprietária da linguagem Java. Desde então, a Oracle tem lançado diversas versões e atualizações do Java, introduzindo novos recursos e melhorias na linguagem.Hoje, a linguagem Java é uma das mais utilizadas em todo o mundo, com milhões de desenvolvedores trabalhando com ela em projetos de todos os tipos, desde aplicativos móveis até sistemas de gerenciamento de bancos de dados e de transações financeiras.Entrada de dados pelo usuárioEm Java, a entrada pelo teclado pode ser feita através da classe Scanner, que permite que o usuário insira dados pelo prompt de comando. Para isso, é necessário importar a classe Scanner no início do arquivo Java, e depois criar um objeto da classe para ler a entrada do usuário.Exemplo:import java.util.Scanner;public class EntradaTeclado { public static void main(String[] args) { Scanner scanner = new Scanner(System.in); System.out.print(\"Digite um número: \"); int numero = scanner.nextInt(); System.out.println(\"O número digitado foi: \" + numero); }}No exemplo acima, o usuário é solicitado a digitar um número pelo prompt de comando, e o número é armazenado na variável numero após ser lido pelo objeto scanner.Já a entrada por janela pode ser feita utilizando uma biblioteca gráfica, como a Swing ou a JavaFX. Nessas bibliotecas, é possível criar interfaces gráficas que permitem que o usuário insira dados em campos de texto, botões, caixas de seleção, entre outros elementos. Exemplo:import javax.swing.JOptionPane;public class EntradaJanela { public static void main(String[] args) { String nome = JOptionPane.showInputDialog(\"Qual é o seu nome?\"); JOptionPane.showMessageDialog(null, \"Olá, \" + nome + \"!\"); }}No exemplo acima, é exibida uma janela de diálogo que solicita que o usuário digite seu nome. O nome digitado é armazenado na variável nome, e depois é exibida outra janela de diálogo com uma mensagem de boas-vindas ao usuário.Saída de dadosEm relação à saída de dados, no prompt de comando é possível utilizar o método System.out.println() para exibir informações na tela. Exemplo:public class SaidaPrompt { public static void main(String[] args) { System.out.println(\"Olá, mundo!\"); }}No exemplo acima, a mensagem “Olá, mundo!” é exibida no prompt de comando.Já na saída por janela, é possível utilizar novamente bibliotecas gráficas como a Swing ou a JavaFX. Exemplo:import javax.swing.JOptionPane;public class SaidaJanela { public static void main(String[] args) { JOptionPane.showMessageDialog(null, \"Olá, mundo!\"); }}No exemplo acima, é exibida uma janela de diálogo com a mensagem “Olá, mundo!”.CondicionaisEm Java, as condicionais são expressas através dos comandos “if”, “else if” e “else”.A estrutura básica da condicional “if” é a seguinte:if (condicao) { // bloco de codigo a ser executado se a condicao for verdadeira}A condicional “else if” permite adicionar mais uma condição para ser avaliada, caso a primeira condição do “if” seja falsa:if (condicao1) { // bloco de codigo a ser executado se a condicao1 for verdadeira} else if (condicao2) { // bloco de codigo a ser executado se a condicao2 for verdadeira e a condicao1 for falsa}Por fim, o “else” é executado caso todas as condições anteriores sejam falsas:if (condicao1) { // bloco de codigo a ser executado se a condicao1 for verdadeira} else if (condicao2) { // bloco de codigo a ser executado se a condicao2 for verdadeira e a condicao1 for falsa} else { // bloco de codigo a ser executado se todas as condicoes anteriores forem falsas} As condições podem ser expressas usando operadores de comparação, como “==”, “!=”, “&lt;”, “&lt;=”, “&gt;” e “&gt;=”. Também é possível usar operadores lógicos como “&amp;&amp;” (and), “   ” (or) e “!” (not) para combinar várias condições. Expressões opcionaiso “switch case” em Java é usado como uma estrutura de controle de fluxo que permite executar diferentes blocos de código com base no valor de uma expressão.A sintaxe básica do “switch case” em Java é a seguinte:switch(expressão) { case valor1: // código a ser executado se expressão for igual a valor1 break; case valor2: // código a ser executado se expressão for igual a valor2 break; ... default: // código a ser executado se nenhum dos valores correspondentes forem encontrados}Aqui, a expressão é avaliada e comparada aos valores especificados em cada caso (case). Se a expressão for igual a um dos valores especificados, o bloco de código correspondente será executado. O comando “break” é usado para sair do switch case depois que um bloco de código é executado. O bloco de código “default” é executado se nenhum dos valores correspondentes for encontrado nos casos anteriores. Esta é uma parte opcional do switch case e pode ser omitida se não houver código a ser executado em tal cenário.RepetiçõesAs repetições em Java são realizadas usando estruturas de controle de fluxo chamadas de loops. Existem três tipos principais de loops em Java: while, do-while e for.Loop while:O loop while é usado quando queremos executar um bloco de código enquanto uma condição é verdadeira. A sintaxe do loop while é a seguinte:while (condição) { // código a ser executado enquanto a condição for verdadeira}Loop do-while:O loop do-while é similar ao loop while, mas a diferença é que o bloco de código é executado pelo menos uma vez, mesmo que a condição seja falsa. A sintaxe do loop do-while é a seguinte:do { // código a ser executado} while (condição);Loop for:O loop for é usado quando queremos executar um bloco de código um número específico de vezes. Ele tem uma sintaxe mais complexa que os loops while e do-while, mas também é mais poderoso. A sintaxe do loop for é a seguinte:for (inicialização; condição; atualização) { // código a ser executado}Na inicialização, podemos declarar e/ou atribuir valores às variáveis usadas no loop. A condição é verificada a cada iteração do loop e se for falsa, o loop é interrompido. A atualização é executada no final de cada iteração e é geralmente usada para atualizar o valor da variável de controle do loop. Esses loops podem ser aninhados para criar estruturas de repetição mais complexas. Além disso, a palavra-chave “break” pode ser usada para interromper um loop e a palavra-chave “continue” pode ser usada para pular uma iteração do loop.ListasEm Java, as listas são uma estrutura de dados que permite armazenar um conjunto de elementos em uma sequência ordenada e dinamicamente redimensionável. A lista mais comumente usada em Java é a ArrayList, mas existem outras, como LinkedList e Vector.A ArrayList é implementada como uma matriz dinâmica, que significa que sua capacidade é automaticamente aumentada ou diminuída conforme os elementos são adicionados ou removidos. A ArrayList é uma classe genérica, o que significa que podemos especificar o tipo de elementos que ela conterá. Por exemplo, podemos criar uma ArrayList que contenha apenas strings, ou apenas inteiros, etc.Para usar a ArrayList em Java, primeiro precisamos importar a classe java.util.ArrayList. Em seguida, podemos criar uma nova ArrayList especificando o tipo de elemento que ela conterá. Aqui está um exemplo simples:import java.util.ArrayList;public class ExemploArrayList { public static void main(String[] args) { // criar uma nova ArrayList de strings ArrayList&lt;String&gt; lista = new ArrayList&lt;String&gt;(); // adicionar elementos à lista lista.add(\"elemento 1\"); lista.add(\"elemento 2\"); lista.add(\"elemento 3\"); // percorrer a lista e exibir seus elementos for (String elemento : lista) { System.out.println(elemento); } }}Neste exemplo, criamos uma nova ArrayList de strings, adicionamos alguns elementos a ela e, em seguida, usamos um loop for-each para percorrer a lista e exibir seus elementos. Existem muitos métodos úteis disponíveis para trabalhar com ArrayLists, como adicionar ou remover elementos, obter o tamanho da lista e acessar elementos individuais por índice. Também podemos usar o método “contains” para verificar se a lista contém um determinado elemento.Exercícios Faça um algoritmo para ler dois números e imprimir o maior, o menor ou então dizer se são iguais. Faça um algoritmo para ler um número inteiro e dizer se o número lido é par ou impar. Faça um algoritmo para ler dois números A e B e dizer se A é divisível por B.Resolução com Java1. Comparar númerosPara resolver este problema em Java, podemos usar a classe Scanner para ler os dois números digitados pelo usuário e compará-los utilizando estruturas condicionais.import java.util.Scanner;public class Main { public static void main(String[] args) { Scanner scanner = new Scanner(System.in); System.out.print(\"Digite o primeiro número: \"); int num1 = scanner.nextInt(); System.out.print(\"Digite o segundo número: \"); int num2 = scanner.nextInt(); if(num1 == num2) { System.out.println(\"Os números são iguais\"); } else if(num1 &gt; num2) { System.out.println(\"O maior número é \" + num1); System.out.println(\"O menor número é \" + num2); } else { System.out.println(\"O maior número é \" + num2); System.out.println(\"O menor número é \" + num1); } }}2. par ou ímparPara verificar se um número é par ou ímpar em Java, podemos utilizar o operador de módulo para verificar se o resto da divisão por 2 é igual a zero.import java.util.Scanner;public class Main { public static void main(String[] args) { Scanner scanner = new Scanner(System.in); System.out.print(\"Digite um número: \"); int num = scanner.nextInt(); if(num % 2 == 0) { System.out.println(\"O número \" + num + \" é par\"); } else { System.out.println(\"O número \" + num + \" é ímpar\"); } }}3. Verificar se é divisívelPara verificar se um número é divisível por outro em Java, podemos utilizar o operador de módulo novamente para verificar se o resto da divisão é igual a zero.import java.util.Scanner;public class Main { public static void main(String[] args) { Scanner scanner = new Scanner(System.in); System.out.print(\"Digite o primeiro número: \"); int num1 = scanner.nextInt(); System.out.print(\"Digite o segundo número: \"); int num2 = scanner.nextInt(); if(num1 % num2 == 0) { System.out.println(num1 + \" é divisível por \" + num2); } else { System.out.println(num1 + \" não é divisível por \" + num2); } }}Referências O que é Java e por onde começar? - Zup Java Tutorial Qual a diferença entre JDK, JRE e JVM Estruturas condicionais e de repetição If, else java e operador ternário: como usar? Declarações if-else em java - Javatpoint Java array: como declarar, usar e manipular arrays em Java? Apostilas - Alura Cursos Online Learn Java - Dev.java" }, { "title": "Introdução a funções em Python", "url": "/aulas/posts/intoducao-a-funcoes/", "categories": "DESENVOLVIMENTO, PROGRAMADOR", "tags": "Senac, lógica, programador, programação, exercícios, python", "date": "2023-04-13 18:30:00 -0300", "snippet": "Conhecidas pelo nome de sub-rotina, as funções possuem um nome e, como sua própria denominação sugere, realizam uma função específica. No entanto, uma função pode ser comparada a um programa comple...", "content": "Conhecidas pelo nome de sub-rotina, as funções possuem um nome e, como sua própria denominação sugere, realizam uma função específica. No entanto, uma função pode ser comparada a um programa completo. Como vimos anteriormente, um programa contém entrada, processamento e saída, e o mesmo pode ocorrer com uma função. Por exemplo, uma função pode receber uma frase, realizar um processamento interno para a contagem de vogais e retornar a quantidade de vogais existentes nessa frase.FuncionamentoEm Python, uma função é definida usando a palavra-chave “def” seguida do nome da função e seus parâmetros. A definição da função é seguida por um bloco de código indentado que define as instruções que a função executará.Por exemplo, vamos criar uma função simples que adiciona dois números e retorna o resultado:def add_numbers(a, b): result = a + b return resultNeste exemplo, a função add_numbers recebe dois parâmetros a e b. O bloco de código da função adiciona esses dois parâmetros e armazena o resultado na variável result, que é então retornada pela função.Podemos chamar a função add_numbers passando dois argumentos:x = add_numbers(3, 5)print(x)Neste exemplo, estamos passando os valores 3 e 5 para a função add_numbers. A função executa a operação de adição e retorna o resultado 8, que é armazenado na variável x. Em seguida, usamos a função print() para exibir o valor armazenado em x.Além de receber parâmetros e retornar valores, as funções em Python também podem ter variáveis locais e globais. Variáveis locais são definidas dentro do escopo da função e só podem ser acessadas dentro da função, enquanto as variáveis globais são definidas fora da função e podem ser acessadas de qualquer lugar no código.Por exemplo, vamos modificar nossa função add_numbers para usar uma variável global:global_var = 10def add_numbers(a, b): local_var = 5 result = a + b + global_var + local_var return resultNeste exemplo, estamos definindo uma variável global global_var fora da função add_numbers. Dentro da função, também estamos definindo uma variável local local_var. O bloco de código da função adiciona os parâmetros a e b, a variável global global_var e a variável local local_var e retorna o resultado.Podemos chamar a função add_numbers da mesma forma que fizemos anteriormente:x = add_numbers(3, 5)print(x)Neste exemplo, a função add_numbers adiciona os valores 3 e 5 aos valores das variáveis global e local (10 e 5, respectivamente) e retorna o resultado 23, que é armazenado na variável x e, em seguida, exibido com a função print().Em resumo, funções em Python permitem encapsular blocos de código em unidades reutilizáveis que recebem parâmetros e retornam valores. Essa funcionalidade é muito útil para reduzir a complexidade do código, tornando-o mais modular e fácil de ler e manter.Exercícios Criar uma função que calcule o fatorial de um número inteiro. Criar uma função que receba uma lista de números e retorne a soma de todos os números pares. Criar uma função que receba uma string e retorne a mesma string invertida. Criar uma função que receba uma lista de números e retorne o maior e o menor número da lista. Criar uma função que receba uma lista de strings e retorne uma nova lista com todas as strings maiúsculas. Cria um menu de opções para acessar cada função anterior.Resolução1. fatorial de um número inteirodef fatorial(n): if n == 0: return 1 else: return n * fatorial(n-1)2. soma de todos os números paresdef soma_pares(lista): total = 0 for numero in lista: if numero % 2 == 0: total += numero return total3. texto invertidodef inverte_string(string): return string[::-1]4. maior e o menor númerodef maior_menor(lista): maior = lista[0] menor = lista[0] for numero in lista: if numero &gt; maior: maior = numero if numero &lt; menor: menor = numero return maior, menor5. retornar texto em maiúsculodef maiusculas(lista): nova_lista = [] for string in lista: nova_lista.append(string.upper()) return nova_lista6. menu de opções para as funçõeswhile True: print(\"Selecione uma opção:\") print(\"1. Calcular o fatorial de um número\") print(\"2. Calcular a soma de números pares em uma lista\") print(\"3. Inverter uma string\") print(\"4. Encontrar o maior e o menor número em uma lista\") print(\"5. Transformar uma lista de strings em maiúsculas\") print(\"0. Sair\") opcao = int(input(\"Opção selecionada: \")) if opcao == 1: numero = int(input(\"Digite um número: \")) resultado = fatorial(numero) print(\"O fatorial de {} é {}\".format(numero, resultado)) elif opcao == 2: lista = input(\"Digite uma lista de números separados por vírgula: \").split(\",\") lista = [int(numero) for numero in lista] resultado = soma_pares(lista) print(\"A soma dos números pares na lista é {}\".format(resultado)) elif opcao == 3: string = input(\"Digite uma string: \") resultado = inverte_string(string) print(\"A string invertida é: {}\".format(resultado)) elif opcao == 4: lista = input(\"Digite uma lista de números separados por vírgula: \").split(\",\") lista = [int(numero) for numero in lista] maior, menor = maior_menor(lista) print(\"O maior número na lista é {} e o menor é {}\".format(maior, menor)) elif opcao == 5: lista = input(\"Digite uma lista de strings separadas por vírgula: \").split(\",\") resultado = maiusculas(lista) print(\"A lista de strings em maiúsculas é: {}\".format(resultado)) elif opcao == 0: break else: print(\"Opção inválida. Tente novamente.\")ReferênciaFurgeri, SérgioIntrodução à programação em Python - cap. 6E-book. Disponível em: https://bibliotecadigitalsenac.com.br/?from=%3FcontentInfo%3D3011#/legacy/epub/3011Acesso em 14/04/2023" }, { "title": "Prática Montando uma rede local WiFi", "url": "/aulas/posts/pratica-montando-uma-rede-local-wifi/", "categories": "AULAS, INFRAESTRUTURA DE REDES", "tags": "infraestrutura, WiFi, simulador, packet tracer", "date": "2023-04-13 10:40:00 -0300", "snippet": "Exemplo de como configurar uma rede local usando um roteador Wi-Fi e alguns computadores no Packet Tracer: Abra o Packet Tracer e crie uma nova topologia. Adicione um roteador e quatro computador...", "content": "Exemplo de como configurar uma rede local usando um roteador Wi-Fi e alguns computadores no Packet Tracer: Abra o Packet Tracer e crie uma nova topologia. Adicione um roteador e quatro computadores à topologia. Conecte os computadores ao roteador usando cabos Ethernet. Adicione um módulo sem fio ao roteador e conecte-o à antena. No modo de configuração do roteador, configure as seguintes informações: Nome da rede (SSID) Senha da rede Tipo de criptografia sem fio (WPA2, por exemplo) Configure o endereço IP do roteador, o endereço IP padrão da rede local e o gateway padrão. Por exemplo: Endereço IP do roteador: 192.168.1.1 Endereço IP padrão da rede local: 192.168.1.0/24 Gateway padrão: 192.168.1.1 Configure as informações de rede em cada um dos quatro computadores da rede, incluindo o endereço IP, a máscara de sub-rede e o gateway padrão. Por exemplo: Computador 1:Endereço IP: 192.168.1.2Máscara de sub-rede: 255.255.255.0Gateway padrão: 192.168.1.1 Computador 2:Endereço IP: 192.168.1.3Máscara de sub-rede: 255.255.255.0Gateway padrão: 192.168.1.1 Computador 3:Endereço IP: 192.168.1.4Máscara de sub-rede: 255.255.255.0Gateway padrão: 192.168.1.1 Computador 4:Endereço IP: 192.168.1.5Máscara de sub-rede: 255.255.255.0Gateway padrão: 192.168.1.1 Verifique se as configurações estão corretas e salve a topologia. Execute a simulação e teste a conexão de rede entre os computadores e o roteador Wi-Fi.Referências Simulador de redes 3 Formas de Configurar seu PC para uma Rede Local" }, { "title": "Áreas de atuação em TI: desenvolvedor web", "url": "/aulas/posts/desenvolvedor-web-copy/", "categories": "AULAS, PLANEJAMENTO DE CARREIRA", "tags": "profissão", "date": "2023-04-13 10:00:00 -0300", "snippet": "Principais áreas para um profissional de TI trabalhar como desenvolvedor web.Desenvolvedor Web Full-Stack: Front-End e Back End Como se Tornar um Desenvolvedor Web: Guia Completo Desenv...", "content": "Principais áreas para um profissional de TI trabalhar como desenvolvedor web.Desenvolvedor Web Full-Stack: Front-End e Back End Como se Tornar um Desenvolvedor Web: Guia Completo Desenvolvedor Full Stack: entenda o que faz e como se tornar um! O que é Full Stack: entenda o que faz um desenvolvedor full stack Desenvolvedor Web - Matteus Barbosa - Desenvolvedor Web desenvolvedor-web-ja-pensou-em-seguir-esta-carreira Desenvolvedor Júnior, Pleno e Sênior: O que define um desenvolvedor como júnior, pleno ou sênior? Desenvolvedor Júnior, Pleno ou Sênior: saiba tudo sobre! Desenvolvedor júnior, pleno e sênior: saiba qual contratar " }, { "title": "Uso da IDE VScode", "url": "/aulas/posts/uso-da-ide-vscode/", "categories": "DESENVOLVIMENTO, PROGRAMADOR", "tags": "Senac, programador, programação, vscode, ide", "date": "2023-04-12 18:30:00 -0300", "snippet": "O VScode (Visual Studio Code) é uma IDE (Integrated Development Environment) de código aberto e gratuita, desenvolvida pela Microsoft, que oferece suporte para várias linguagens de programação, inc...", "content": "O VScode (Visual Studio Code) é uma IDE (Integrated Development Environment) de código aberto e gratuita, desenvolvida pela Microsoft, que oferece suporte para várias linguagens de programação, incluindo Python e Java. Algumas das principais características do VScode para edição de código nessas linguagens são: Intellisense: o VScode oferece recursos avançados de autocompletar, sugestões de código e correção de erros em tempo real, que ajudam a escrever código de forma mais rápida e precisa. Debugging: o VScode possui um depurador integrado que permite executar o código passo a passo, inspecionar variáveis, definir pontos de interrupção e corrigir erros mais facilmente. Extensões: o VScode possui uma vasta biblioteca de extensões que podem ser instaladas para adicionar novos recursos e suporte para outras linguagens de programação. Terminal integrado: o VScode possui um terminal integrado que permite executar comandos diretamente da IDE, sem precisar alternar para outra janela. Controle de versão: o VScode oferece suporte nativo para integração com sistemas de controle de versão, como Git, permitindo gerenciar o código-fonte diretamente da IDE. Personalização: o VScode permite personalizar a aparência e o comportamento da IDE de acordo com as preferências do usuário, com temas, atalhos de teclado, configurações e outros recursos.IntelliSenseIntelliSense é um recurso presente em várias IDEs, incluindo o VScode, que fornece sugestões de código enquanto você digita. Ele ajuda a economizar tempo e evita erros de digitação, permitindo que você veja as opções disponíveis para completar o código.Para usar o IntelliSense no VScode, você pode seguir os seguintes passos: Abra o VScode e crie um novo arquivo ou abra um arquivo existente. Comece a digitar o código na janela do editor. O IntelliSense deve aparecer automaticamente com sugestões de código que correspondem ao que você está digitando. Use as setas para cima e para baixo para navegar pelas opções de código sugeridas pelo IntelliSense. Selecione a opção de código que deseja usar e pressione Enter para adicioná-lo ao seu código.Além disso, o IntelliSense também pode ajudar a mostrar informações sobre as variáveis e funções, como seus parâmetros e descrições. Para ver essas informações, você pode posicionar o cursor sobre a variável ou função e pressionar Ctrl e Espaço para abrir a lista de opções disponíveis.O IntelliSense pode ser personalizado e configurado para atender às suas necessidades. Você pode acessar as configurações do IntelliSense clicando em “Arquivo” no menu do VScode e selecionando “Preferências” e “Configurações”. Lá, você pode ajustar as configurações do IntelliSense para que ele se adapte melhor às suas preferências de codificação.DebuggingO debugging é uma técnica essencial para identificar e corrigir erros em programas de computador. Com o uso de uma ferramenta de debugging, é possível analisar o comportamento do código em tempo de execução, identificar pontos de falha e corrigir problemas de lógica.No VScode, a ferramenta de debugging é muito completa e permite depurar programas em várias linguagens, como Python, Java, C++, entre outras. Para utilizar o debugging no VScode, é necessário definir um arquivo de configuração que especifique como o programa deve ser executado e como deve ser feita a depuração.Para configurar o arquivo de depuração no VScode, é necessário criar um arquivo launch.json. Esse arquivo contém informações como o tipo de programa a ser depurado (Python, Java, etc.), o caminho para o arquivo executável, as opções de linha de comando, entre outras.Após configurar o arquivo de depuração, é possível iniciar a depuração no VScode clicando no botão “Start Debugging” ou utilizando um atalho de teclado. Quando o programa é executado em modo de depuração, o VScode permite inspecionar variáveis, definir pontos de interrupção, executar o código passo a passo e analisar o fluxo de execução.Durante a depuração, é possível identificar onde o código está falhando, quais variáveis estão com valores incorretos e como o programa está se comportando em tempo de execução. Com essas informações, é possível corrigir os erros e melhorar a qualidade do código.Em resumo, o debugging é uma técnica fundamental para identificar e corrigir erros em programas de computador. O VScode oferece uma ferramenta de depuração completa e fácil de usar, que permite analisar o comportamento do código em tempo de execução e corrigir problemas de lógica de forma eficiente.ExtensõesAs extensões são um recurso importante no VSCode para adicionar funcionalidades extras à IDE. Existem milhares de extensões disponíveis na loja de extensões do VSCode, que podem ser instaladas com apenas alguns cliques.Algumas extensões populares para desenvolvimento em Python e Java incluem: Python: “Python” (oferece recursos avançados de depuração e IntelliSense), “Code Runner” (permite executar códigos Python diretamente no editor), “Jupyter” (suporte a notebooks Jupyter), entre outras. Java: “Java Extension Pack” (um pacote com várias extensões úteis para o desenvolvimento em Java), “Debugger for Java” (suporte a depuração em Java), “Java Test Runner” (suporte a testes unitários), entre outras.Além disso, muitas outras extensões estão disponíveis para ajudar no desenvolvimento em outras linguagens, como C++, JavaScript, HTML, CSS, entre outras.As extensões também podem ser personalizadas de acordo com as necessidades do desenvolvedor, permitindo a instalação de temas, atalhos de teclado, integrações com outras ferramentas, entre outras possibilidades.Algumas das extensões mais populares para o VSCode incluem: Python: Fornece recursos para desenvolvimento em Python, incluindo depuração, sugestões de código, formatação automática e muito mais. Java Extension Pack: Uma coleção de extensões que adiciona suporte para desenvolvimento em Java, incluindo sugestões de código, depuração, suporte para Maven e muito mais. Live Server: Permite que você veja instantaneamente as alterações no seu código HTML, CSS e JavaScript em um servidor local. Muito útil para desenvolvimento web. GitLens: Melhora a funcionalidade do Git no VSCode, permitindo que você veja facilmente quem fez alterações em um arquivo, quando foram feitas e muito mais. Bracket Pair Colorizer: Permite que você veja claramente as correspondências de parênteses, colchetes e chaves no seu código, o que pode ajudar a evitar erros de sintaxe. Code Runner: Permite que você execute rapidamente seu código diretamente do VSCode, sem precisar alternar para outro terminal. Prettier: Formata automaticamente seu código para que ele siga as convenções de estilo apropriadas, economizando tempo e garantindo que seu código seja legível e consistente.Essas são apenas algumas das muitas extensões disponíveis para o VSCode. É importante escolher as extensões que melhor se adequam às suas necessidades e estilo de programação.Controle de versãoO controle de versão é uma prática essencial no desenvolvimento de software, pois permite que várias pessoas trabalhem no mesmo código de forma colaborativa e organizada. Ele consiste em gerenciar as diferentes versões do código-fonte, permitindo que os desenvolvedores possam compartilhar seu trabalho com outras pessoas, além de controlar as alterações feitas em cada versão do código.Existem várias ferramentas de controle de versão disponíveis no mercado, sendo o Git uma das mais populares. Ele é uma ferramenta distribuída de controle de versão de código-fonte que permite que várias pessoas trabalhem em um mesmo projeto de forma simultânea. O Git tem como principais características a facilidade de uso, a velocidade e a segurança.Uma das principais vantagens de usar o Git é a possibilidade de trabalhar com diferentes branches, que são diferentes ramificações do código-fonte principal. Cada branch pode ser usada para implementar uma nova funcionalidade ou corrigir um erro específico, sem afetar o código-fonte principal. Ao finalizar o trabalho em uma branch, é possível fazer um merge com a branch principal para incorporar as alterações ao código.Além do Git, existem outras ferramentas de controle de versão como o Subversion (SVN), Mercurial e CVS. Cada uma delas tem suas próprias características e vantagens, por isso é importante avaliar qual delas é a mais adequada para o seu projeto.É importante ressaltar que o controle de versão não se trata apenas de uma ferramenta, mas sim de uma prática que deve ser adotada pelos desenvolvedores. Uma boa prática é sempre manter um repositório remoto, como o GitHub ou o GitLab, para que outras pessoas possam contribuir com o projeto e para que o código-fonte esteja sempre seguro e acessível.Integração com o githubA integração do VS Code com o GitHub é muito útil para gerenciar projetos de software que são armazenados no GitHub. O VS Code oferece uma integração nativa com o GitHub, permitindo que você faça o controle de versão, a colaboração e o gerenciamento do projeto diretamente da interface do VS Code.Para começar, você precisa ter uma conta no GitHub e ter instalado o Git no seu sistema. Com o Git instalado, você pode clonar um repositório diretamente do GitHub para o seu computador e começar a trabalhar nele.Uma vez que você tem o código no seu computador, você pode usá-lo para criar um novo projeto no VS Code, que automaticamente cria um repositório Git local e permite que você trabalhe com o Git dentro do VS Code.Com o repositório Git local criado, você pode fazer o controle de versão do seu código, criando commits, criando e alternando branches, e trabalhando em equipe em diferentes branches. O VS Code também oferece uma visão geral das alterações que você fez em um arquivo, facilitando a revisão de alterações antes de fazer o commit.Para fazer o push das alterações para o repositório remoto do GitHub, você pode usar a funcionalidade de push do VS Code, que envia as alterações para o GitHub e sincroniza o repositório local com o remoto. O VS Code também oferece uma visão geral dos pull requests abertos e das revisões pendentes, permitindo que você revise e colabore com os seus colegas de equipe no GitHub.Em resumo, a integração do VS Code com o GitHub torna o gerenciamento de projetos de software muito mais fácil e eficiente, permitindo que você faça o controle de versão, colabore com colegas de equipe e gerencie o projeto diretamente do VS Code.Integração com inteligência artificialO Tabnine é uma extensão de inteligência artificial que utiliza aprendizado de máquina para oferecer sugestões de código enquanto você digita. Ele utiliza dados de milhões de linhas de código para prever o que você deseja escrever e oferecer sugestões relevantes. É compatível com várias linguagens de programação, incluindo Python, JavaScript, Java, PHP, C++, entre outras.O Copilot é uma extensão mais recente desenvolvida pela GitHub em parceria com a OpenAI, que utiliza um modelo de linguagem natural GPT-3 para gerar trechos de código em resposta a comentários em linguagem natural do usuário. O modelo é treinado com uma enorme quantidade de código-fonte e é capaz de entender o contexto e fornecer sugestões precisas e úteis.Já o ChatGPT é uma extensão que permite que você converse com uma IA treinada em linguagem natural e obtenha respostas em tempo real enquanto escreve seu código. Ele é baseado na mesma arquitetura GPT-3 usada pelo Copilot, mas em vez de gerar código, ele fornece suporte e dicas para ajudá-lo a resolver problemas ou entender conceitos específicos da linguagem de programação.Todas essas extensões de IA são ferramentas poderosas para ajudar os desenvolvedores a escrever código mais rápido e eficientemente, além de oferecer suporte e sugestões úteis para aprimorar suas habilidades de programação. É importante lembrar, no entanto, que elas não substituem a compreensão e o conhecimento da linguagem de programação e a habilidade de pensar criticamente sobre o que se está codificando.Referênciasvisualstudio.com/docsvisualstudio.com/docs/java/java-tutorialvisualstudio.com/docs/python/python-tutorial" }, { "title": "Pesquisas em listas com Python", "url": "/aulas/posts/pesquisas-em-listas/", "categories": "DESENVOLVIMENTO, PROGRAMADOR", "tags": "Senac, lógica, programador, programação, exercícios, python", "date": "2023-04-11 18:30:00 -0300", "snippet": "Pesquisando em vetoresPesquisa linear ou sequencialDepois que você ordena os valores de um vetor, a pesquisa para localizá-los fica bem menos trabalhosa. Existem vários métodos de pesquisa em vetor...", "content": "Pesquisando em vetoresPesquisa linear ou sequencialDepois que você ordena os valores de um vetor, a pesquisa para localizá-los fica bem menos trabalhosa. Existem vários métodos de pesquisa em vetor; para a maioria, é pré-requisito que o vetor esteja ordenado, em ordem crescente ou decrescente. Você vai conhecer os métodos de pesquisa sequencial e binária.O método de pesquisa sequencial é o mais simples: um valor é lido e, em seguida, pesquisado em um vetor até que seja encontrado ou que o vetor termine.Esse método é mais eficaz em vetores com valores desordenados, mas também é o método mais lento de pesquisa, pois, se não localizar o valor pesquisado, percorre todo o vetor e não somente uma parte dele, como nos outros métodos. O desempenho desse método pode melhorar se ele for aplicado em um vetor ordenado; mesmo assim, ainda será inferior aos outros métodos.Exemplo:Problema:Em um vetor numérico de 20 posições, crie um algoritmo para encontrar a posição exata em que está armazenado um valor indicado pelo usuário.# Criar um vetor numérico de 20 posiçõesvetor = [5, 7, 2, 3, 8, 1, 10, 4, 6, 9, 11, 13, 14, 12, 15, 17, 16, 19, 18, 20]# Receber o valor que o usuário deseja encontrar a posiçãovalor_procurado = int(input(\"Digite o valor que deseja encontrar: \"))# Percorrer o vetor para encontrar a posição do valor procuradoposicao = Nonefor i in range(len(vetor)): if vetor[i] == valor_procurado: posicao = i break# Verificar se o valor foi encontrado ou nãoif posicao is not None: print(\"O valor\", valor_procurado, \"foi encontrado na posição\", posicao)else: print(\"O valor\", valor_procurado, \"não foi encontrado no vetor\")Explicando o código: Na primeira linha, criamos um vetor numérico de 20 posições. Na segunda linha, solicitamos ao usuário que insira o valor que deseja encontrar a posição. Em seguida, usamos um loop for para percorrer o vetor e verificar se cada elemento é igual ao valor procurado. Se encontrarmos o valor, armazenamos a posição em que ele está no vetor na variável posicao e encerramos o loop usando o comando break. Finalmente, verificamos se a variável posicao foi preenchida com um valor (ou seja, se o valor foi encontrado) e exibimos a mensagem apropriada para o usuário.Pesquisa bináriaEsse método é mais rápido que o sequencial, pois pesquisa um número menor de dados. A cada teste, é pesquisada somente a parte do vetor que contém valores que satisfaçam a condição da pesquisa (ser o valor maior ou menor que o número lido). Para que essa pesquisa seja feita, é imprescindível que o vetor esteja ordenado.Exemplo:Problema:Em um vetor numérico de 20 posições em ordem crescente, faça um algoritmo para encontrar a posição exata em que está armazenado um valor indicado pelo usuário. Represente o algoritmo em pseudocódigo.Solucionando o problema:O método de pesquisa binária consiste basicamente em encontrar a posição central do vetor, ou a mais próxima do centro. De acordo com o valor armazenado na posição equivalente ao meio, é visto se o número armazenado é maior ou menor que o número desejado.De acordo com o valor armazenado na posição equivalente ao meio, é visto se o número armazenado é maior ou menor que o número desejado. Dependendo da resposta, escolhe-se uma das metades e novamente divide-se ao meio. Isso é feito sucessivamente até que seja encontrado o número ou seja verificado a não existência dele no vetor.# Criar um vetor numérico de 20 posições em ordem crescentevetor = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]# Receber o valor que o usuário deseja encontrar a posiçãovalor_procurado = int(input(\"Digite o valor que deseja encontrar: \"))# Inicializar as variáveis de limite esquerdo e direitoesquerdo = 0direito = len(vetor) - 1# Realizar a pesquisa bináriawhile esquerdo &lt;= direito: meio = (esquerdo + direito) // 2 if vetor[meio] == valor_procurado: print(\"O valor\", valor_procurado, \"foi encontrado na posição\", meio) break elif vetor[meio] &lt; valor_procurado: esquerdo = meio + 1 else: direito = meio - 1else: print(\"O valor\", valor_procurado, \"não foi encontrado no vetor\")Explicando o código: Na primeira linha, criamos um vetor numérico de 20 posições em ordem crescente. Na segunda linha, solicitamos ao usuário que insira o valor que deseja encontrar a posição. Em seguida, inicializamos as variáveis esquerdo e direito, que representam os índices do vetor que delimitam a área em que o valor procurado pode estar. Então, iniciamos um loop while que se repete enquanto a área de busca ainda tiver tamanho. Dentro do loop, calculamos o índice do elemento do meio da área de busca usando a fórmula (esquerdo + direito) // 2. Em seguida, comparamos o valor do elemento do meio com o valor procurado. Se forem iguais, encontramos o valor e imprimimos sua posição. Caso contrário, ajustamos os limites esquerdo ou direito da área de busca conforme o valor do elemento do meio ser menor ou maior do que o valor procurado. Se o loop terminar e não tivermos encontrado o valor procurado, imprimimos uma mensagem informando que o valor não foi encontrado no vetor.Tipos de pesquisa com PythonEm Python, é possível fazer diversos tipos de pesquisa em listas. Abaixo, descrevo alguns dos tipos mais comuns: Pesquisa linear: consiste em percorrer todos os elementos da lista até encontrar o elemento desejado. Esse tipo de pesquisa é relativamente simples e pode ser implementado com um loop for.Exemplo:def linear_search(arr, x): for i in range(len(arr)): if arr[i] == x: return i return -11. Pesquisa bináriaFunciona apenas para listas ordenadas. A cada passo, o algoritmo divide a lista em duas partes e compara o valor procurado com o valor do elemento do meio da lista. Com base nessa comparação, o algoritmo descarta uma das metades da lista e continua a busca na metade restante. Esse tipo de pesquisa é mais eficiente que a pesquisa linear, especialmente para listas grandes, pois reduz o número de elementos a serem comparados a cada passo.Exemplo:def binary_search(arr, x): low = 0 high = len(arr) - 1 while low &lt;= high: mid = (low + high) // 2 if arr[mid] &lt; x: low = mid + 1 elif arr[mid] &gt; x: high = mid - 1 else: return mid return -12. Pesquisa por interpolaçãoSemelhante à pesquisa binária, mas utiliza uma estimativa da posição do elemento desejado com base nos valores dos elementos do início e do fim da lista. A cada passo, o algoritmo calcula uma nova estimativa da posição do elemento desejado e a utiliza para determinar em qual metade da lista continuar a busca. Esse tipo de pesquisa é mais eficiente que a pesquisa binária para listas em que os elementos estão distribuídos de forma uniforme.Exemplo:def interpolation_search(arr, x): low = 0 high = len(arr) - 1 while low &lt;= high and arr[low] &lt;= x &lt;= arr[high]: mid = low + (x - arr[low]) * (high - low) // (arr[high] - arr[low]) if arr[mid] &lt; x: low = mid + 1 elif arr[mid] &gt; x: high = mid - 1 else: return mid return -13. Pesquisa por hashUtiliza uma função hash para mapear cada valor da lista para uma posição em uma tabela de hash. Ao procurar um valor na lista, basta aplicar a função hash ao valor procurado e verificar se o elemento correspondente na tabela de hash contém o valor procurado. Esse tipo de pesquisa é muito rápido, mas requer a definição de uma função hash adequada e pode consumir muita memória caso a lista seja grande.Exemplo:def hash_search(arr, x): hash_table = {} for i in range(len(arr)): hash_table[arr[i]] = i if x in hash_table: return hash_table[x] else: return -14. Pesquisa por árvoreEnvolve a construção de uma árvore de busca binária a partir dos elementos da lista. Cada nó da árvore contém um elemento e dois sub-nós, que correspondem aos elementos menores e maiores do que o elemento atual. Ao procurar um valor na lista, basta percorrer a árvore a partir da raiz, comparando o valor procurado com o valor de cada nó e escolhendo a sub-árvore adequada para continuar a busca. Esse tipo de pesquisa é útil para listas que precisam ser mantidas ordenadas e suporta várias operações além da pesquisa, como inserção e remoção de elementos.Exemplo:class Node: def __init__(self, val=None): self.val = val self.left = None self.right = Noneclass BinaryTree: def __init__(self): self.root = None def insert(self, val): if not self.root: self.root = Node(val) else: self._insert(val, self.root) def _insert(self, val, cur_node): if val &lt; cur_node.val: if not cur_node.left: cur_node.left = Node(val) else: self._insert(val, cur_node.left) else: if not cur_node.right: cur_node.right = Node(val) else: self._insert(val, cur_node.right) def search(self, val): if not self.root: return -1 else: return self._search(val, self.root) def _search(self, val, cur_node): if not cur_node: return -1 elif cur_node.val == val: return val elif val &lt; cur_node.val: return self._search(val, cur_node.left) else: return self._search(val, cur_node.right)Exercícios com pesquisa de vetores Encontrar o valor máximo em uma lista. Encontrar o valor mínimo em uma lista Encontrar a média dos valores em uma lista Contar quantas vezes um valor aparece em uma lista Encontrar o índice de um valor em uma listaResolução dos exercícios1. Encontrar o valor máximolista = [1, 5, 2, 8, 3, 9]maximo = lista[0]for numero in lista:if numero &gt; maximo:maximo = numeroprint(maximo)2. Encontrar o valor mínimolista = [1, 5, 2, 8, 3, 9]minimo = lista[0]for numero in lista: if numero &lt; minimo: minimo = numeroprint(minimo)3. Encontrar a médialista = [1, 5, 2, 8, 3, 9]soma = 0for numero in lista: soma += numeromedia = soma / len(lista)print(media)4. Contar repetiçõeslista = [1, 5, 2, 8, 3, 9, 5, 5]valor = 5contador = 0for numero in lista: if numero == valor: contador += 1print(contador)5. Encontrar o índicelista = [1, 5, 2, 8, 3, 9]valor = 8indice = Nonefor i in range(len(lista)): if lista[i] == valor: indice = i breakprint(indice)ReferênciasXavier, Gley Fabiano CardosoLógica de programaçãoE-book. Disponível em: https://bibliotecadigitalsenac.com.br/?from=busca%3FcontentInfo%3D1306%26term%3Dlogica#/legacy/epub/1306Acesso em 11/04/2023Coleções no Python: Listas, Tuplas e DicionáriosPython - List MethodsBiblioteca SenacIntrodução à programação em Python - Sérgio FurgeriReferências W3schools Python reference Colab - Introdução a programação com a linguagem Python Livro na Biblioteca Virtual - Introdução à programação em Python - Sérgio Furgeri" }, { "title": "Prática Montando uma rede local", "url": "/aulas/posts/pratica-montando-uma-rede-local/", "categories": "AULAS, INFRAESTRUTURA DE REDES", "tags": "infraestrutura, cabeamento, simulador, packet tracer", "date": "2023-04-11 10:40:00 -0300", "snippet": "Exemplo de prática de configuração de uma rede local usando o simulador Packet Tracer, vamos incluir mais dispositivos. Neste cenário, teremos 4 computadores, 1 impressora, 1 switch e 1 roteador. ...", "content": "Exemplo de prática de configuração de uma rede local usando o simulador Packet Tracer, vamos incluir mais dispositivos. Neste cenário, teremos 4 computadores, 1 impressora, 1 switch e 1 roteador. Abra o Packet Tracer e selecione o ícone “Switch” na barra de ferramentas à esquerda. Arraste o ícone para a área de trabalho. Selecione o ícone “Computador” e arraste 4 instâncias do ícone para a área de trabalho. Selecione o ícone “Impressora” e arraste-o para a área de trabalho. Selecione o ícone “Router” e arraste-o para a área de trabalho. Conecte os computadores e a impressora ao switch arrastando uma linha de conexão de cada dispositivo para o switch. Conecte o switch ao roteador arrastando uma linha de conexão do switch para o roteador. Clique duas vezes no switch para abrir a janela de configuração do dispositivo. Na guia “Configuração”, renomeie o switch para “Switch1”. Clique duas vezes no roteador para abrir a janela de configuração do dispositivo. Na guia “Configuração”, renomeie o roteador para “Roteador1”. Clique duas vezes em cada um dos computadores e na impressora para abrir a janela de configuração do dispositivo. Na guia “Configuração”, insira um nome para cada dispositivo, como “PC1”, “PC2”, “PC3”, “PC4” e “Impressora1”. Na guia “Configuração” do roteador, insira um nome para a interface “FastEthernet0/0”, como “Switch1”. Na guia “Configuração” do roteador, insira um endereço IP e uma máscara de sub-rede para a interface “FastEthernet0/0”. Use um endereço IP que esteja na mesma faixa que os endereços IP dos computadores e da impressora. Por exemplo, se os endereços IP dos computadores e da impressora forem 192.168.1.1 a 192.168.1.4, use o endereço IP 192.168.1.5 e a máscara de sub-rede 255.255.255.0. Na guia “Configuração” do switch, selecione a opção “Configurar VLAN” e crie duas VLANs: uma para os computadores e outra para a impressora. Na guia “Configuração” do switch, atribua a porta 1 à VLAN dos computadores e a porta 2 à VLAN da impressora. Na guia “Configuração” do roteador, configure a interface “FastEthernet0/0” para ser a porta de entrada da rede local. Na guia “Configuração” do roteador, configure a interface “Serial0/0/0” para ser a porta de saída da rede WAN (internet). Você precisará inserir as informações fornecidas pelo seu provedor de internet para configurar essa interface corretamente. Salve as configurações de todos os dispositivos.Agora, a rede local está configurada e pronta para ser usada. Os computadores e a impressora estão conectados ao switch.ReferênciasSimulador de redes" }, { "title": "Áreas de atuação em TI: desenvolvedor web", "url": "/aulas/posts/desenvolvedor-web/", "categories": "AULAS, PLANEJAMENTO DE CARREIRA", "tags": "planejamento, carreira, graduação", "date": "2023-04-11 10:00:00 -0300", "snippet": "Principais áreas para um profissional de TI trabalhar como desenvolvedor web.Desenvolvedor Web Full-Stack: Front-End e Back End Como se Tornar um Desenvolvedor Web: Guia Completo Desenv...", "content": "Principais áreas para um profissional de TI trabalhar como desenvolvedor web.Desenvolvedor Web Full-Stack: Front-End e Back End Como se Tornar um Desenvolvedor Web: Guia Completo Desenvolvedor Full Stack: entenda o que faz e como se tornar um! O que é Full Stack: entenda o que faz um desenvolvedor full stack Desenvolvedor Web - Matteus Barbosa - Desenvolvedor Web desenvolvedor-web-ja-pensou-em-seguir-esta-carreira Desenvolvedor Júnior, Pleno e Sênior: O que define um desenvolvedor como júnior, pleno ou sênior? Desenvolvedor Júnior, Pleno ou Sênior: saiba tudo sobre! Desenvolvedor júnior, pleno e sênior: saiba qual contratar " }, { "title": "Componente Resistor propriedades", "url": "/aulas/posts/resistores-propriedades/", "categories": "AULAS, NOÇÕES DE ROBÓTICA", "tags": "arduino, robótica, curso, eletrônica", "date": "2023-04-11 09:00:00 -0300", "snippet": "O resistor é um dos componentes mais comuns e importantes da eletrônica. Ele está presente em quase todos os circuitos eletroeletrônicos, dos mais simples aos mais complexos, sua funcionalidade é l...", "content": "O resistor é um dos componentes mais comuns e importantes da eletrônica. Ele está presente em quase todos os circuitos eletroeletrônicos, dos mais simples aos mais complexos, sua funcionalidade é limitar a corrente elétrica para evitar a queima de componentes.PropriedadesOs resistores podem ser identificados por meio de suas características físicas e marcações. As principais características dos resistores são: Valor nominal de resistência: é o valor de resistência que o resistor deve apresentar. Este valor é expresso em ohms (Ω) e pode variar de algumas frações de ohms até milhões de ohms. Tolerância: é a variação permitida em relação ao valor nominal de resistência. Geralmente, os resistores têm uma tolerância de 5% ou 10%. Potência nominal: é a quantidade de energia que o resistor é capaz de dissipar sem sofrer danos. A potência nominal é expressa em watts (W) e pode variar de alguns décimos de watt até vários watts.Os resistores têm marcações coloridas que indicam o seu valor nominal de resistência e tolerância. Para identificar o valor nominal de resistência de um resistor, é preciso identificar as faixas coloridas que estão presentes no corpo do componente. Cada faixa corresponde a um dígito e sua posição indica o seu valor significativo. A tabela abaixo mostra as cores e valores dos dígitos:Por exemplo, um resistor com as faixas de cores marrom, preto, vermelho e ouro terá o valor nominal de resistência de 1.000 ohms (marrom = 1, preto = 0, vermelho = multiplicador de 100 e ouro = tolerância de 5%). É importante observar que a tolerância é representada pela quarta faixa e pode ser ouro (5%), prata (10%) ou sem faixa (20%).Para identificar a potência nominal de um resistor, basta verificar a sua dimensão e/ou o tamanho da faixa de cor que indica a sua potência. Resistores de potência baixa (até 0,25W) costumam ser pequenos e têm apenas uma faixa de cor indicando a sua potência. Já os resistores de potência mais alta (acima de 0,5W) costumam ter dimensões maiores e uma ou duas faixas de cor indicando a sua potência.Além das marcações de cores, alguns resistores também têm o seu valor nominal de resistência e tolerância impressos em sua superfície. De qualquer forma, é importante sempre verificar as marcações para ter certeza do valor nominal de resistência, tolerância e potência nominal do resistor.Tabela de identificaçãoIdentificação de cores do resistor Cor 1º dígito 2º dígito 3º dígito Multiplicador Tolerância Preto 0 0 0 1 - Marrom 1 1 1 10 ±1% Vermelho 2 2 2 100 ±2% Laranja 3 3 3 1.000 - Amarelo 4 4 4 10.000 - Verde 5 5 5 100.000 ±0,5% Azul 6 6 6 1.000.000 ±0,25% Violeta 7 7 7 10.000.000 ±0,1% Cinza 8 8 8 - ±0,05% Branco 9 9 9 - - Ouro - - - 0,1 ±5% Prata - - - 0,01 ±10% A tabela acima mostra as cores utilizadas na identificação do valor nominal de resistência dos resistores. A primeira coluna apresenta a cor da faixa, a segunda, terceira e quarta colunas indicam o primeiro, segundo e terceiro dígito do valor nominal de resistência, respectivamente. A quinta coluna indica o fator de multiplicação do valor nominal de resistência e a sexta coluna indica a tolerância do valor nominal de resistência.Associações de resistoresAs associações de resistores podem ser classificadas em duas categorias: associações em série e associações em paralelo.Associação em série: Os resistores são conectados em uma sequência, um após o outro; A corrente elétrica é a mesma em todos os resistores; A tensão elétrica é dividida entre os resistores, de acordo com suas resistências; A resistência total da associação é a soma das resistências de cada resistor; Quanto maior a resistência total, menor a corrente elétrica.Associação em paralelo: Os resistores são conectados em paralelo uns aos outros, ou seja, com as mesmas extremidades conectadas; A tensão elétrica é a mesma em todos os resistores; A corrente elétrica é dividida entre os resistores, de acordo com suas resistências; A resistência total da associação é calculada utilizando a Lei de Ohm, que diz que a resistência total é igual ao inverso da soma dos inversos das resistências de cada resistor; Quanto menor a resistência total, maior a corrente elétrica.Além dessas duas associações básicas, existem outras combinações possíveis, como associações mistas, que são combinações de associações em série e paralelo. Nessas combinações, os conceitos e fórmulas das associações em série e paralelo são aplicados de forma combinada.Divisor de tensãoO divisor de tensão é um circuito simples que é usado para reduzir a tensão de um sinal. É composto por dois resistores em série, onde a tensão total é dividida entre eles. A razão entre a resistência de cada resistor determina a proporção em que a tensão é dividida.Na prática, o divisor de tensão é muito utilizado para reduzir a tensão de uma fonte para níveis que possam ser lidos por microcontroladores, sensores e outros dispositivos eletrônicos. O valor da tensão na saída do divisor de tensão é calculado a partir da equação:Vout = Vin * R2 / (R1 + R2)Onde: Vout é a tensão na saída do divisor de tensão; Vin é a tensão na entrada do divisor de tensão; R1 e R2 são as resistências dos dois resistores. O valor de R1 é o resistor que está ligado na entrada do divisor de tensão e o valor de R2 é o resistor que está ligado na saída do divisor de tensão.Por exemplo, suponha que desejamos reduzir a tensão de 5V para 2V, utilizando um divisor de tensão com resistores de 10kΩ e 20kΩ. Neste caso, temos:Vout = 5 * 20 / (10 + 20) = 3,33 VPortanto, a tensão na saída do divisor de tensão será de 3,33V, que é a metade da tensão de entrada.O divisor de tensão é um circuito muito útil para interfacear sinais analógicos com microcontroladores, sensores e outros dispositivos eletrônicos. No entanto, é importante levar em conta que o uso do divisor de tensão pode alterar a impedância do circuito, o que pode afetar a precisão da medição. Além disso, é importante escolher resistores com valores adequados para evitar que a corrente circulando no circuito seja muito alta, o que pode levar a erros de medição ou até mesmo danificar os componentes.Exemplo de práticaSegue abaixo um exemplo utilizando Arduino e o simulador Tinkercad com resistores e voltímetro para medir a resistência: Leitura de tensão em um divisor de tensão: Conectar dois resistores em série (exemplo: 10kΩ e 20kΩ); Conectar um dos extremos do divisor de tensão ao 5V do Arduino e o outro extremo ao GND; Conectar um dos pontos médios do divisor de tensão a uma entrada analógica do Arduino; Utilizar o código para ler o valor da entrada analógica e calcular a tensão no ponto médio do divisor de tensão (utilizando a fórmula de divisor de tensão); Exibir o valor da tensão lida no monitor serial. Referências Introdução ao Resistor Apostila de Robótica [Tinkercad From mind to design in minutes](https://www.tinkercad.com/) " }, { "title": "Listas em Python", "url": "/aulas/posts/listas-em-python/", "categories": "DESENVOLVIMENTO, PROGRAMADOR", "tags": "Senac, lógica, programador, programação, exercícios, python", "date": "2023-04-10 18:30:00 -0300", "snippet": "Em Python, listas e vetores são tipos de dados que permitem armazenar uma coleção de elementos, como números, strings, objetos, entre outros.Uma lista é uma sequência ordenada e mutável de elemento...", "content": "Em Python, listas e vetores são tipos de dados que permitem armazenar uma coleção de elementos, como números, strings, objetos, entre outros.Uma lista é uma sequência ordenada e mutável de elementos, onde cada elemento é identificado por um índice. É possível adicionar, remover e alterar elementos da lista. Para criar uma lista em Python, basta colocar os elementos entre colchetes, separados por vírgulas:minha_lista = [1, 2, 3, 4, 5]Um vetor é um tipo especial de lista, que possui elementos todos do mesmo tipo e pode ser acessado diretamente por seu índice. Em Python, a biblioteca NumPy fornece suporte para vetores e operações numéricas em arrays. Para criar um vetor em NumPy, é necessário importar a biblioteca e utilizar a função array():import numpy as npmeu_vetor = np.array([1, 2, 3, 4, 5])Diferentemente das listas comuns, os vetores em NumPy são otimizados para operações numéricas e matemáticas, além de serem mais eficientes em termos de memória. Além disso, os vetores podem ter mais de uma dimensão, possibilitando o armazenamento de matrizes e tensores.ExemplosCriando uma lista e acessando elementos:lista = ['maçã', 'banana', 'laranja']print(lista[0]) # imprime 'maçã'print(lista[1]) # imprime 'banana'print(lista[2]) # imprime 'laranja'Adicionando elementos a uma lista:lista = ['maçã', 'banana', 'laranja']lista.append('uva')print(lista) # imprime ['maçã', 'banana', 'laranja', 'uva']Removendo elementos de uma lista:lista = ['maçã', 'banana', 'laranja']lista.remove('banana')print(lista) # imprime ['maçã', 'laranja']Iterando sobre uma lista:lista = ['maçã', 'banana', 'laranja']for fruta in lista: print(fruta) # imprime 'maçã', 'banana', 'laranja' em linhas separadasOrdenando uma lista:lista = [3, 6, 1, 8, 2, 10]lista.sort()print(lista) # imprime [1, 2, 3, 6, 8, 10]Exercícios Crie um programa que receba uma lista de números e retorne o maior valor dessa lista. Crie um programa que receba uma lista de números e retorne a soma de todos os valores. Crie um programa que receba duas listas e retorne uma terceira lista com a interseção dos elementos das duas listas. Crie um programa que receba uma lista de números e retorne uma lista com os números pares dessa lista. Crie um programa que receba uma lista de nomes e retorne uma nova lista com os nomes em ordem alfabética. Crie um programa que receba uma lista de números e retorne uma nova lista contendo apenas os números positivos. Crie um programa que receba uma lista de nomes e retorne uma nova lista contendo apenas os nomes que começam com a letra ‘A’. Crie um programa que receba uma lista de números e retorne o segundo maior número da lista. Crie um programa que receba uma lista de nomes e retorne o nome mais longo da lista. Crie um programa que receba uma lista de números e retorne o número que aparece com maior frequência na lista.Solução Crie um programa que receba uma lista de números e retorne o maior valor dessa lista.lista = [3, 7, 1, 9, 5]maior = lista[0]for numero in lista: if numero &gt; maior: maior = numeroprint(f\"O maior número da lista é {maior}\") Crie um programa que receba uma lista de números e retorne a soma de todos os valores.lista = [3, 7, 1, 9, 5]soma = 0for numero in lista: soma += numeroprint(f\"A soma dos valores da lista é {soma}\") Crie um programa que receba duas listas e retorne uma terceira lista com a interseção dos elementos das duas listas.lista1 = [1, 2, 3, 4, 5]lista2 = [3, 5, 7, 9, 11]intersecao = []for elemento in lista1: if elemento in lista2: intersecao.append(elemento)print(f\"A interseção das duas listas é {intersecao}\") Crie um programa que receba uma lista de números e retorne uma lista com os números pares dessa lista.lista = [3, 7, 1, 9, 5, 2, 8, 4]pares = []for numero in lista: if numero % 2 == 0: pares.append(numero)print(f\"Os números pares da lista são {pares}\") Crie um programa que receba uma lista de nomes e retorne uma nova lista com os nomes em ordem alfabética.lista = ['João', 'Ana', 'Pedro', 'Maria', 'Mariana']lista_ordenada = sorted(lista)print(f\"A lista em ordem alfabética é {lista_ordenada}\") Crie um programa que receba uma lista de números e retorne uma nova lista contendo apenas os números positivos.lista = [-2, 4, -5, 7, 0, 2, -1]lista_positivos = []for numero in lista: if numero &gt; 0: lista_positivos.append(numero)print(f\"A lista de números positivos é {lista_positivos}\") Crie um programa que receba uma lista de nomes e retorne uma nova lista contendo apenas os nomes que começam com a letra ‘A’.lista = ['Ana', 'João', 'André', 'Mariana', 'Felipe']lista_A = []for nome in lista: if nome[0] == 'A': lista_A.append(nome)print(f\"A lista de nomes que começam com 'A' é {lista_A}\") Crie um programa que receba uma lista de números e retorne o segundo maior número da lista.lista = [5, 2, 9, 1, 7, 3]maior = max(lista)segundo_maior = lista[0]for numero in lista: if numero != maior and numero &gt; segundo_maior: segundo_maior = numeroprint(f\"O segundo maior número da lista é {segundo_maior}\") Crie um programa que receba uma lista de nomes e retorne o nome mais longo da lista.lista = ['Ana', 'João', 'André', 'Mariana', 'Felipe']maior_nome = lista[0]for nome in lista: if len(nome) &gt; len(maior_nome): maior_nome = nomeprint(f\"O maior nome da lista é {maior_nome}\") Crie um programa que receba uma lista de números e retorne o número que aparece com maior frequência na lista.lista = [3, 2, 5, 3, 7, 3, 5, 2, 5, 5]frequencias = {}for numero in lista: if numero in frequencias: frequencias[numero] += 1 else: frequencias[numero] = 1mais_frequente = lista[0]for numero, frequencia in frequencias.items(): if frequencia &gt; frequencias[mais_frequente]: mais_frequente = numeroprint(f\"O número mais frequente na lista é {mais_frequente}\")ReferênciasXavier, Gley Fabiano CardosoLógica de programaçãoE-book. Disponível em: https://bibliotecadigitalsenac.com.br/?from=busca%3FcontentInfo%3D1306%26term%3Dlogica#/legacy/epub/1306Acesso em 10/04/2023Coleções no Python: Listas, Tuplas e DicionáriosPython Lists" }, { "title": "Montando uma rede local", "url": "/aulas/posts/montando-uma-rede-local/", "categories": "AULAS, INFRAESTRUTURA DE REDES", "tags": "infraestrutura, cabeamento, simulador, packet tracer", "date": "2023-04-10 10:40:00 -0300", "snippet": "Uma rede local é uma forma de conectar dois ou mais dispositivos, podendo eles serem ou não conectados à internet. Esse tipo de configuração é mais comum para residências que possuem dois ou mais c...", "content": "Uma rede local é uma forma de conectar dois ou mais dispositivos, podendo eles serem ou não conectados à internet. Esse tipo de configuração é mais comum para residências que possuem dois ou mais computadores que necessitem de compartilhamento de arquivos, ou mesmo pequenas empresas. Neste artigo, vamos mostrar como configurar uma rede local em cinco passos simples.O Que É Rede Local?Em termos mais simples, uma rede local é uma rede de conexão entre dispositivos em uma mesma localização, podendo ou não usar fios de conexão. A rede local LAN é configurada através de um modem ou switch e um cabo de conexão Ethernet. Este modelo de rede cabeada comporta tanto modens tradicionais com fio de fibra óptica como também rede sem fio com modem wi-fi. Com uma rede local, pode-se conectar outros dispositivos, como impressoras.Principais Vantagens De Se Ter Uma Rede Doméstica Em Sua Casa Ou Pequena EmpresaTer uma rede de computadores hoje em dia é mais do que essencial para a sua casa ou empresa. Através da rede de transmissão, é possível acessar a internet de forma simples, como ler e-mails e realizar conferências. Também é possível acessar localmente outros dispositivos, basta para isso conectar um roteador com um cabo de rede. Para transmissão de dados mais complexos, serão necessários outros equipamentos, mesmo quando a rede for sem fio.Passo A Passo Para Configurar Uma Rede LocalAntes de começar a configurar sua rede, verifique a necessidade de utilização para analisar o material que será adquirido. Conte quantos computadores serão interligados à rede para saber a quantidade de portas do roteador. Caso sejam necessários mais de quatro computadores, será necessário utilizar um switch, porém os switches não permitem conexões de rede sem fio. Os switches também podem auxiliar no complemento do tamanho dos cabos, que não poderão ultrapassar 10m.1. Reúna Todo O Equipamento Necessário Para Configurar Uma Rede Switch de rede Roteador, preferencialmente sem fio, e deixe-o próximo do modem. O roteador oferece automaticamente um endereço IP para cada dispositivo conectado. Caso a sua rede não possua conexão com a internet, não será necessário ligar a porta WAN.2. Configure A Sua RedeO ideal é escolher uma rede padrão para todos os dispositivos, preferencialmente N, e os cabos Ethernet de melhor desempenho, os Cat5e ou superiores, que são ideais para transferência de arquivos multimídia ou streaming.3. Teste A RedeDepois de conectar todos os fios, faça a conexão nos seus computadores. O endereço IP de cada um se conectará automaticamente. Configure o compartilhamento de arquivos e impressoras. Adicione arquivos e comece a acessar. Ao compartilhar, você poderá compartilhar somente leitura, como também leitura e modificação. Não se esqueça de criar uma senha forte.4. Gerencie Grupos Domésticos E ServidoresNo Windows 10, opção painel de controle&gt;rede e internet&gt;escolher grupos domésticos&gt;opçõesPrática no simuladorPara ilustrar melhor os passos para configurar uma rede local, podemos utilizar o simulador Packet Tracer da Cisco. Esse software é uma ferramenta útil para simular redes de computadores e realizar testes de configuração.Para montar uma rede local básica no Packet Tracer, precisamos seguir alguns passos: Primeiramente, vamos adicionar os dispositivos necessários para a rede, como um roteador, um switch e dois computadores. Para isso, basta selecionar os dispositivos na barra lateral esquerda e arrastá-los para a tela principal do simulador. Em seguida, vamos conectar o roteador e o switch com um cabo de rede. Para fazer isso, basta selecionar o cabo de rede na barra lateral esquerda e clicar no roteador e no switch para criar a conexão. Agora, vamos configurar o roteador para que ele possa atribuir endereços IP aos computadores da rede. Para fazer isso, basta clicar no roteador e abrir a janela de configurações. Na aba “Configuração de interface”, podemos atribuir um endereço IP à interface do roteador que está conectada ao switch. Por exemplo, podemos atribuir o endereço IP 192.168.1.1/24 à interface. Em seguida, vamos configurar os computadores para que eles possam se conectar à rede. Para isso, basta clicar em um dos computadores e abrir a janela de configurações de rede. Na aba “Configuração de interface”, podemos selecionar a opção “Obter um endereço IP automaticamente” para que o computador receba um endereço IP do roteador. Por fim, vamos testar a conexão entre os computadores da rede. Para isso, podemos abrir um prompt de comando em um dos computadores e executar o comando “ping” seguido do endereço IP do outro computador. Se a conexão estiver funcionando corretamente, devemos receber uma resposta do outro computador. É importante ressaltar que essa é uma configuração básica de rede local e que existem muitas outras possibilidades de configuração e dispositivos que podem ser adicionados à rede. Além disso, é sempre importante seguir boas práticas de segurança, como utilizar senhas fortes e manter os dispositivos da rede atualizados.ReferênciasComo Configurar Uma Rede Local Em 5 Passos Simples Vídeos descrição ] COMO CRIAR UMA REDE SIMPLES ENTRE 2 COMPUTADORES ] Webinar Packet Tracer - Parte 1 - Configurando uma Rede Local (LAN) " }, { "title": "Áreas de atuação em TI: Segurança da informação", "url": "/aulas/posts/seguranca-da-informacao/", "categories": "AULAS, PLANEJAMENTO DE CARREIRA", "tags": "planejamento, carreira, graduação", "date": "2023-04-10 10:00:00 -0300", "snippet": "Referências sobre áreas para um profissional de TI para trabalhar com segurança.Descubra o que faz o profissional de Segurança da Informação**Profissional de Segurança da Informação: entenda mais s...", "content": "Referências sobre áreas para um profissional de TI para trabalhar com segurança.Descubra o que faz o profissional de Segurança da Informação**Profissional de Segurança da Informação: entenda mais sobre essa carreira!****Segurança da informação: entenda a alta demanda por profissionais de cibersegurança**" }, { "title": "Componente Resistor", "url": "/aulas/posts/resistores/", "categories": "AULAS, NOÇÕES DE ROBÓTICA", "tags": "arduino, robótica, curso, eletrônica", "date": "2023-04-10 09:00:00 -0300", "snippet": "O resistor é um dos componentes mais comuns e importantes da eletrônica. Ele está presente em quase todos os circuitos eletroeletrônicos, dos mais simples aos mais complexos, sua funcionalidade é l...", "content": "O resistor é um dos componentes mais comuns e importantes da eletrônica. Ele está presente em quase todos os circuitos eletroeletrônicos, dos mais simples aos mais complexos, sua funcionalidade é limitar a corrente elétrica para evitar a queima de componentes.Principais características Resistência elétrica: é a oposição que o resistor oferece à passagem de corrente elétrica. É medida em ohms (Ω). Tolerância: é a variação permitida na resistência nominal do resistor. É expressa em porcentagem e indica a margem de erro permitida para a resistência nominal do resistor. Por exemplo, um resistor com tolerância de 5% pode ter uma variação de ±5% em relação à sua resistência nominal. Potência nominal: é a quantidade máxima de energia que o resistor pode dissipar sem se danificar. É medida em watts (W) e depende do tamanho e do material do resistor. Coeficiente de temperatura: é a variação da resistência do resistor em função da temperatura ambiente. É expresso em partes por milhão por grau Celsius (ppm/°C) e indica quanto a resistência do resistor varia para cada grau Celsius de variação na temperatura ambiente. Capacidade de dissipação de calor: é a capacidade do resistor de dissipar o calor gerado pela passagem de corrente elétrica. Resistor com maior potência nominal geralmente possui uma capacidade de dissipação de calor maior. Faixa de resistência: é a variação de resistência disponível para um determinado tipo de resistor. Por exemplo, um resistor de 1kΩ pode ter uma faixa de resistência nominal de 990Ω a 1010Ω.Utilidade práticaOs resistores têm várias utilidades práticas no circuito elétrico, incluindo: Limitação de corrente: Os resistores são usados para limitar a corrente elétrica que flui por um circuito, evitando que os componentes sejam danificados por correntes muito altas. Divisor de tensão: Os resistores podem ser usados como divisor de tensão para reduzir a tensão elétrica em um determinado ponto do circuito. Proteção de LEDs: Quando um LED é conectado diretamente a uma fonte de alimentação, ele pode queimar devido a uma corrente muito alta. Um resistor pode ser usado para limitar a corrente que flui pelo LED, protegendo-o de danos. Controle de velocidade de motores: Resistores podem ser usados para controlar a velocidade de motores elétricos, limitando a corrente elétrica que flui por eles. Conversão de corrente: Resistores podem ser usados como parte de um circuito conversor de corrente, que converte uma corrente alternada em uma corrente contínua. Circuitos de áudio: Resistores são amplamente usados em circuitos de áudio para ajustar a impedância do circuito e para fornecer um ganho preciso.Esses são apenas alguns exemplos das muitas aplicações dos resistores no circuito elétrico. Eles são componentes versáteis que são amplamente usados em todos os tipos de eletrônicos, desde simples circuitos até dispositivos complexos e sofisticados.Tipos de resistoresExistem vários tipos de resistores, entre eles: Resistor de filme de carbono: é o tipo mais comum e barato de resistor, geralmente com uma faixa de tolerância de ±5% ou ±10%. Possui um revestimento de carbono em um cilindro de cerâmica com fios de chumbo em cada extremidade. Resistor de filme metálico: é semelhante ao resistor de filme de carbono, mas usa um revestimento de metal em vez de carbono. Geralmente possui uma faixa de tolerância de ±1% ou ±2%. Resistor de filme de óxido metálico: possui um revestimento de óxido metálico em um cilindro de cerâmica. Tem uma alta precisão e estabilidade em relação à temperatura. Possui uma faixa de tolerância de ±1% ou ±5%. Resistor de fio enrolado: consiste em um fio enrolado em torno de um núcleo de cerâmica ou de vidro. Possui uma alta tolerância de potência e é capaz de suportar altas temperaturas. Resistor de película fina: utiliza um material de película fina, como níquel-cromo ou tántalo, depositado em um substrato de cerâmica ou vidro. Possui alta precisão, estabilidade em relação à temperatura e é capaz de suportar altas frequências. Resistor SMD: é um resistor montado em superfície, que é soldado diretamente na placa de circuito impresso. Possui um tamanho reduzido e é usado em placas eletrônicas com alta densidade de componentes.Referências Introdução ao Resistor Apostila de Robótica [Tinkercad From mind to design in minutes](https://www.tinkercad.com/) " }, { "title": "Estruturas de Repetições em Python", "url": "/aulas/posts/repeticioes-em-python/", "categories": "DESENVOLVIMENTO, PROGRAMADOR", "tags": "Senac, lógica, programador, programação, exercícios, python", "date": "2023-04-05 13:00:00 -0300", "snippet": "Em Python, há três formas principais de repetição: O loop for, que é usado para iterar sobre uma sequência de valores. O loop while, que é usado para repetir um bloco de código enquanto uma condi...", "content": "Em Python, há três formas principais de repetição: O loop for, que é usado para iterar sobre uma sequência de valores. O loop while, que é usado para repetir um bloco de código enquanto uma condição é verdadeira. O iterador, que é usado para acessar os elementos de uma sequência um a um.A escolha de qual forma de repetição utilizar depende do problema que você está tentando resolver.Loop com forEm geral, o loop for é mais utilizado quando você sabe exatamente quantas vezes deseja repetir um bloco de código.Exemplo:Usando o loop for com a função range para repetir um número fixo de vezes:for i in range(5): print(i)Escreva um programa em Python que imprima todos os números pares de 0 a 100.for i in range(0, 101, 2): print(i)Nesse algoritmo, usamos a função range() para criar uma sequência de números de 0 a 100 com um passo de 2 (para que apenas os números pares sejam incluídos). Em seguida, usamos um loop for para percorrer essa sequência e imprimir cada número.Loop com whileO loop while é mais utilizado quando você precisa repetir um bloco de código enquanto uma condição é verdadeira.Usando o loop while para repetir um bloco de código enquanto uma condição for verdadeira:Exemplo:# Usando o loop while para repetir um bloco de códigoi = 0while i &lt; 5: print(i) i += 1Iterator de loopO iterador é utilizado quando você precisa acessar os elementos de uma sequência de forma individual.Exemplos:# Iterando sobre uma lista usando o loop fornumbers = [1, 2, 3, 4, 5]for num in numbers: print(num)Escreva um programa em Python que calcule a média aritmética de uma lista de números.numeros = [3, 5, 8, 12, 15]soma = 0for numero in numeros: soma += numeromedia = soma / len(numeros)print(\"A média é:\", media)Nesse algoritmo, definimos uma lista de números e usamos um loop for para percorrer a lista e somar todos os números. Em seguida, dividimos essa soma pelo número de elementos na lista (usando a função len()) para calcular a média. Por fim, exibimos a média usando a função print(). Lembre-se que repetição é uma parte fundamental da programação e é útil para tarefas como cálculos, filtragem de dados, busca, entre outros.Saindo do loopAlgumas vezes necessitamos sair do loop, para isso podemos usar o comando break:Usando a instrução break para sair de um loop prematuramente:# Usando a instrução break para sair de um loop prematuramentenumbers = [1, 2, 3, 4, 5]for num in numbers: if num == 3: break print(num)Pulando a iteraçãoUsando a instrução continue para pular para a próxima iteração do loop:numbers = [1, 2, 3, 4, 5]for num in numbers: if num == 3: continue print(num)Lista de exercícios com repetições Escreva um programa que imprima todos os números pares de 0 a 20. Escreva um programa que peça ao usuário para digitar um número inteiro positivo e calcule a soma de todos os números ímpares de 1 até esse número. Escreva um programa que peça ao usuário para digitar uma frase e conte quantas vogais (a, e, i, o, u) ela possui. Escreva um programa que peça ao usuário para digitar uma lista de números e imprima o maior número da lista. Escreva um programa que peça ao usuário para digitar uma palavra e imprima a palavra invertida. Escreva um programa que calcule a média aritmética de uma lista de números. Escreva um programa que peça ao usuário para digitar um número inteiro e verifique se ele é um número primo. Escreva um programa que peça ao usuário para digitar uma palavra e verifique se ela é um palíndromo (ou seja, se a palavra é igual quando lida de trás para frente).Solução em Python1. números paresEscreva um programa que imprima todos os números pares de 0 a 20.for i in range(0, 21, 2): print(i)2. cálculos com númerosEscreva um programa que peça ao usuário para digitar um número inteiro positivo e calcule a soma de todos os números ímpares de 1 até esse número.n = int(input(\"Digite um número inteiro positivo: \"))soma = 0for i in range(1, n+1, 2): soma += iprint(\"A soma dos números ímpares de 1 a\", n, \"é\", soma)3. contando as vogaisEscreva um programa que peça ao usuário para digitar uma frase e conte quantas vogais (a, e, i, o, u) ela possui.frase = input(\"Digite uma frase: \")vogais = \"aeiou\"contagem = 0for letra in frase: if letra.lower() in vogais: contagem += 1print(\"A frase digitada possui\", contagem, \"vogais.\")4. o maior númeroEscreva um programa que peça ao usuário para digitar uma lista de números e imprima o maior número da lista.numeros = input(\"Digite uma lista de números separados por vírgulas: \")numeros = numeros.split(\",\")maior = int(numeros[0])for numero in numeros: if int(numero) &gt; maior: maior = int(numero)print(\"O maior número da lista é\", maior)5. palavra invertidaEscreva um programa que peça ao usuário para digitar uma palavra e imprima a palavra invertida.palavra = input(\"Digite uma palavra: \")inversa = \"\"for letra in palavra: inversa = letra + inversaprint(\"A palavra invertida é\", inversa)6. calculando a médiaEscreva um programa que calcule a média aritmética de uma lista de números.palavra = input(\"Digite uma palavra: \")inversa = \"\"for letra in palavra: inversa = letra + inversaprint(\"A palavra invertida é\", inversa)7. número primoEscreva um programa que peça ao usuário para digitar um número inteiro e verifique se ele é um número primo.numero = int(input(\"Digite um número inteiro: \"))primo = Truefor i in range(2, numero): if numero % i == 0: primo = False breakif primo: print(numero, \"é um número primo.\")else: print(numero, \"não é um número primo.\")8. palíndromoEscreva um programa que peça ao usuário para digitar uma palavra e verifique se ela é um palíndromo (ou seja, se a palavra é igual quando lida de trás para frente).palavra = input(\"Digite uma palavra: \")inversa = \"\"for letra in palavra: inversa = letra + inversaif palavra == inversa: print(\"A palavra é um palíndromo.\")else: print(\"A palavra não é um palíndromo.\")Referências W3schools Python reference Colab - Introdução a programação com a linguagem Python Livro na Biblioteca Virtual - Introdução à programação em Python - Sérgio Furgeri" }, { "title": "Condicionais em Python", "url": "/aulas/posts/condicionais-em-python/", "categories": "DESENVOLVIMENTO, PROGRAMADOR", "tags": "Senac, lógica, programador, programação, exercícios, python", "date": "2023-04-04 17:00:00 -0300", "snippet": "Em Python, existem duas formas principais de expressar condicionais: a estrutura if/elif/else e a expressão ternária.Estrutura if/elseA estrutura if/else permite executar um bloco de código se a co...", "content": "Em Python, existem duas formas principais de expressar condicionais: a estrutura if/elif/else e a expressão ternária.Estrutura if/elseA estrutura if/else permite executar um bloco de código se a condição for verdadeira, ou outro se for falsa. A sintaxe é a seguinte:if condicao: # bloco de código a ser executado se a condição for verdadeiraelse: # bloco de código a ser executado se a condição anteriores for falsaExemplos: Usando a estrutura if-else para fazer escolhas:x = 10if x &gt; 0: print(\"x é positivo\")else: print(\"x é negativo ou zero\")Escreva um programa em Python que peça ao usuário para digitar uma palavra e verifique se a palavra é um palíndromo (ou seja, se ela é igual quando lida de trás para frente).palavra = input(\"Digite uma palavra: \")if palavra == palavra[::-1]: print(\"A palavra é um palíndromo.\")else: print(\"A palavra não é um palíndromo.\")Nesse algoritmo, usamos a função input() para pedir que o usuário digite uma palavra. Em seguida, usamos um condicional if para verificar se a palavra é igual a ela mesma quando lida de trás para frente (usando a técnica de slicing com a notação [::-1]). Se a palavra for um palíndromo, exibimos uma mensagem indicando isso. Caso contrário, exibimos uma mensagem indicando que a palavra não é um palíndromo.Condicional aninhada if/elif/elseSão condicionais seguidas ou dentro de outras condicionais. A estrutura if/elif/else permite executar diferentes blocos de código dependendo de uma ou mais condições. A sintaxe é a seguinte:if condicao1: # bloco de código a ser executado se a condicao1 for verdadeiraelif condicao2: # bloco de código a ser executado se a condicao1 for falsa e a condicao2 for verdadeiraelse: # bloco de código a ser executado se todas as condições anteriores forem falsas# Fazendo escolhas múltiplas usando a estrutura if-elif-elsex = 10if x &lt; 0: print(\"x é negativo\")elif x == 0: print(\"x é zero\")else: print(\"x é positivo\")Exemplo: Elabore um algoritmo para checar se uma pessoa pode dirigir:idade = 18tem_carteira = Trueif idade &gt;= 18: if tem_carteira: print(\"Pode dirigir\") else: print(\"Não pode dirigir, pois não tem carteira de motorista\")else: print(\"Não pode dirigir, pois é menor de idade\")Nesse exemplo, temos duas condições aninhadas: a primeira checa se a pessoa é maior de idade, e a segunda checa se ela tem carteira de motorista. Se ambas as condições forem verdadeiras, o programa imprime a mensagem “Pode dirigir”. Caso contrário, o programa imprime uma mensagem diferente. Note que condicionais aninhadas podem ser úteis quando precisamos checar várias condições em sequência. No entanto, elas podem tornar o código mais difícil de ler e entender, especialmente se tivermos muitas condições aninhadas. Por isso, é importante avaliar cuidadosamente se essa é a melhor abordagem para o problema em questão.Expressão ternáriaA expressão ternária é uma forma concisa de escrever uma condicional em uma única linha de código. A sintaxe é a seguinte:valor_se_verdadeiro if condicao else valor_se_falsoExemplos:# Usando o operador condicional para simplificar o códigox = 10result = \"x é positivo\" if x &gt; 0 else \"x é negativo ou zero\"print(result)Exemplo: uma função que retorna a maior idade.idade = 18status = \"maior de idade\" if idade &gt;= 18 else \"menor de idade\"print(status)Nesse exemplo, a expressão idade &gt;= 18 é avaliada primeiro. Se for verdadeira, a variável status receberá o valor “maior de idade”. Caso contrário, status receberá o valor “menor de idade”. O resultado impresso no console será “maior de idade”, já que a idade é igual a 18, e portanto maior ou igual a 18. Note que a expressão ternária pode ser muito útil para simplificar o código em casos onde a condição é simples e não é necessário executar um grande bloco de código em cada caso. No entanto, em casos onde a condição é mais complexa ou é necessário executar várias instruções em cada caso, a estrutura if/elif/else é geralmente mais adequada.ExceçõesPodemos fazer testes para evitar erros, e assim permitir que o programa se recupere e continue executando mesmo em situações inesperadas.Por exemplo, o programa tenta ler dois números do usuário e realizar uma divisão entre eles. No entanto, como podemos ter vários tipos de erros nessa operação (o usuário pode digitar um valor que não é um número inteiro, ou pode tentar dividir por zero), utilizamos a estrutura try/except para capturar e tratar esses erros. Confira no seguinte código em Python:try: x = int(input(\"Digite um número: \")) y = int(input(\"Digite outro número: \")) resultado = x / y print(\"O resultado da divisão é:\", resultado)except ValueError: print(\"Erro: um dos valores digitados não é um número inteiro\")except ZeroDivisionError: print(\"Erro: divisão por zero\")except Exception as e: print(\"Ocorreu um erro inesperado:\", e)Neste exemplo, dentro do bloco try, tentamos ler os valores e realizar a divisão. Se algum erro ocorrer, o programa pula para o bloco except correspondente. Nesse caso, temos três blocos except: um para tratar erros de ValueError (que ocorre quando o usuário digita um valor que não é um número inteiro), um para tratar erros de ZeroDivisionError (que ocorre quando o usuário tenta dividir por zero) e um último bloco para tratar erros genéricos (usando a classe Exception). Se nenhum erro ocorrer durante a execução do bloco try, o programa segue em frente e imprime o resultado da divisão. Caso contrário, o programa imprime uma mensagem de erro apropriada para o tipo de erro capturado.Exercícios Escreva um programa que peça ao usuário para digitar a sua idade e informe se ele é maior ou menor de idade. Escreva um programa que peça ao usuário para digitar dois números e informe qual é o maior. Escreva um programa que peça ao usuário para digitar uma letra e informe se ela é uma vogal ou uma consoante. Escreva um programa que peça ao usuário para digitar um número e informe se ele é positivo, negativo ou zero. Escreva um programa que peça ao usuário para digitar o seu salário e informe qual é o seu imposto de renda de acordo com a tabela abaixo: Até R$ 1.903,98: isento De R$ 1.903,99 até R$ 2.826,65: 7,5% De R$ 2.826,66 até R$ 3.751,05: 15% De R$ 3.751,06 até R$ 4.664,68: 22,5% Acima de R$ 4.664,68: 27,5% Escreva um programa que peça ao usuário para digitar a sua altura e o seu peso e informe se ele está abaixo do peso, no peso ideal ou acima do peso. Para isso, utilize o índice de massa corporal (IMC), que é calculado pela fórmula: Para homens: peso ideal = (72.7 x altura) - 58 Para mulheres: peso ideal = (62.1 x altura) - 44.7 Resolução dos exercícios1. maior de idadeEscreva um programa que peça ao usuário para digitar a sua idade e informe se ele é maior ou menor de idade.idade = int(input(\"Digite a sua idade: \"))if idade &gt;= 18: print(\"Você é maior de idade.\")else: print(\"Você é menor de idade.\")2. número maiorEscreva um programa que peça ao usuário para digitar dois números e informe qual é o maior.num1 = int(input(\"Digite o primeiro número: \"))num2 = int(input(\"Digite o segundo número: \"))if num1 &gt; num2: print(\"O primeiro número é maior.\")elif num2 &gt; num1: print(\"O segundo número é maior.\")else: print(\"Os números são iguais.\")3. vogal ou consoanteEscreva um programa que peça ao usuário para digitar uma letra e informe se ela é uma vogal ou uma consoante.letra = input(\"Digite uma letra: \")vogais = \"aeiou\"if letra.lower() in vogais: print(\"A letra é uma vogal.\")else: print(\"A letra é uma consoante.\")4. número positivo ou negativoEscreva um programa que peça ao usuário para digitar um número e informe se ele é positivo, negativo ou zero.numero = int(input(\"Digite um número: \"))if numero &gt; 0: print(\"O número é positivo.\")elif numero &lt; 0: print(\"O número é negativo.\")else: print(\"O número é zero.\")5. imposto de rendaEscreva um programa que peça ao usuário para digitar o seu salário e informe qual é o seu imposto de renda de acordo com a tabela abaixo: Até R$ 1.903,98: isento De R$ 1.903,99 até R$ 2.826,65: 7,5% De R$ 2.826,66 até R$ 3.751,05: 15% De R$ 3.751,06 até R$ 4.664,68: 22,5% Acima de R$ 4.664,68: 27,5%salario = float(input(\"Digite o seu salário: \"))if salario &lt;= 1903.98: imposto = 0elif salario &lt;= 2826.65: imposto = salario * 0.075elif salario &lt;= 3751.05: imposto = salario * 0.15elif salario &lt;= 4664.68: imposto = salario * 0.225else: imposto = salario * 0.275print(\"O imposto de renda a ser pago é R$\", imposto)6. peso idealEscreva um programa que peça ao usuário para digitar a sua altura e o seu peso e informe se ele está abaixo do peso, no peso ideal ou acima do peso. Para isso, utilize o índice de massa corporal (IMC), que é calculado pela fórmula: Para homens: peso ideal = (72.7 x altura) - 58 Para mulheres: peso ideal = (62.1 x altura) - 44.7altura = float(input(\"Digite sua altura em metros: \"))sexo = input(\"Digite seu sexo (M ou F): \")if sexo.upper() == \"M\": peso_ideal = (72.7 * altura) - 58 print(\"Seu peso ideal é:\", peso_ideal)elif sexo.upper() == \"F\": peso_ideal = (62.1 * altura) - 44.7 print(\"Seu peso ideal é:\", peso_ideal)else: print(\"Sexo inválido. Por favor, digite M ou F.\")Nesse código, pedimos ao usuário para digitar sua altura em metros e seu sexo. Depois, usamos um if/elif/else para calcular o peso ideal com base na fórmula correspondente ao sexo. Note que usamos o método upper() para converter a string do sexo em letras maiúsculas, o que torna a comparação mais robusta (pois não depende do usuário digitar exatamente as letras maiúsculas ou minúsculas corretas).Esse código pode ser facilmente modificado para aceitar outros tipos de unidades (como centímetros) ou para permitir que o usuário digite sua idade ou outros fatores relevantes para o cálculo do peso ideal.Referências W3schools Python reference Colab - Introdução a programação com a linguagem Python Livro na Biblioteca Virtual - Introdução à programação em Python - Sérgio Furgeri" }, { "title": "Introdução a Linguagem Python", "url": "/aulas/posts/introducao-ao-python/", "categories": "DESENVOLVIMENTO, PROGRAMADOR", "tags": "Senac, lógica, programador, programação, exercícios, python", "date": "2023-04-03 17:00:00 -0300", "snippet": "Aprender lógica usando Python no Google Colab pode ser uma ótima maneira de obter uma compreensão mais profunda dos conceitos lógicos enquanto se aprende a programar em Python.Usando o Google Colab...", "content": "Aprender lógica usando Python no Google Colab pode ser uma ótima maneira de obter uma compreensão mais profunda dos conceitos lógicos enquanto se aprende a programar em Python.Usando o Google ColabO Google Colab é uma plataforma gratuita baseada em nuvem que permite aos usuários escrever e executar código Python diretamente em um navegador da web, sem a necessidade de instalar o Python no computador local. Além disso, o Colab oferece recursos para compartilhamento e colaboração em tempo real com outras pessoas.Para aprender lógica usando Python no Google Colab, é possível começar com conceitos básicos de lógica, como proposições, conectivos lógicos, tabelas verdade e argumentos válidos e inválidos. Em seguida, pode-se usar o Python para implementar esses conceitos e escrever programas que manipulam e testam proposições e argumentos lógicos.Existem várias bibliotecas Python disponíveis no Google Colab que podem ajudar a aprender lógica. Por exemplo, a biblioteca “sympy” pode ser usada para criar objetos matemáticos simbólicos, incluindo proposições lógicas e conectivos. A biblioteca “logic” fornece funções para criar tabelas verdade e verificar a validade de argumentos.Além disso, é possível usar o Google Colab para acessar recursos educacionais, como tutoriais, vídeos e exercícios interativos, que podem ajudar a aprender lógica e Python. Existem muitos recursos disponíveis gratuitamente na web para aprender lógica usando Python, e o Colab pode ser um ótimo lugar para começar a experimentar esses recursos e criar projetos próprios.Usando o ColabAqui estão algumas dicas para começar a aprender a programação em Python usando o Google Colab: Crie uma conta no Google: Se você ainda não tem uma conta no Google, crie uma. Você precisará de uma conta do Google para acessar o Google Colab. Acesse o Google Colab: Depois de criar sua conta do Google, acesse o Google Colab em https://colab.research.google.com/. Crie um novo notebook: Clique em “Novo notebook” para criar um novo notebook Python. Isso abrirá um novo documento que você pode usar para escrever e executar código Python. Comece a escrever código Python: Agora você pode começar a escrever código Python no notebook. Experimente com diferentes tipos de dados, variáveis, operadores e comandos de controle de fluxo (como if, else e for). Execute o código: Para executar o código no notebook, basta clicar no botão “Executar” na parte superior do documento ou usar o atalho “Shift+Enter”. O Google Colab irá executar o código e exibir o resultado abaixo do bloco de código. Experimente com bibliotecas Python: O Google Colab permite que você use bibliotecas Python populares, como NumPy, Pandas e Matplotlib. Você pode importar essas bibliotecas usando o comando import e experimentar com as funções e métodos que elas oferecem. Colabore com outras pessoas: O Google Colab permite que você compartilhe notebooks com outras pessoas e trabalhe em equipe em tempo real. Você pode colaborar com colegas de classe ou amigos para resolver problemas de programação juntos. Aprenda com exemplos e tutoriais: O Google Colab oferece uma grande quantidade de exemplos e tutoriais de programação em Python. Você pode pesquisar e explorar esses recursos para aprender novos conceitos de programação e técnicas de resolução de problemas. Pratique muito: A melhor maneira de aprender a programação em Python é praticar muito. Experimente diferentes desafios de programação e projetos para aplicar seus conhecimentos e melhorar suas habilidades de programação.ExemplosProposições lógicasimport sympy# Criando proposições lógicasp = sympy.Symbol('p')q = sympy.Symbol('q')r = sympy.Symbol('r')# Criando uma proposição lógica complexaprop = (p &amp; q) | (~r)# Imprimindo a proposiçãoprint(prop)# Negando a proposiçãoneg_prop = ~propprint(neg_prop)# Simplificando a proposiçãosimp_prop = sympy.simplify(prop)print(simp_prop)Tabelas verdadefrom logic import TruthTable# Criando uma tabela verdade para uma proposição simplestable = TruthTable(['p'], ['p &amp; True', 'p &amp; False', 'p | True', 'p | False'])table.display()# Criando uma tabela verdade para uma proposição complexatable2 = TruthTable(['p', 'q'], ['p &amp; q', '~p', '(p &amp; ~q) | (~p &amp; q)', 'p &lt;-&gt; q'])table2.display()Verificando a validade de argumentosfrom logic import valid, substitute# Criando uma proposição lógica para um argumentopremise1 = sympy.Symbol('p')premise2 = sympy.Symbol('q')conclusion = sympy.Symbol('r')argument = (premise1 &amp; premise2) &gt;&gt; conclusion# Verificando a validade do argumentoprint(valid(argument))# Substituindo proposições lógicas em um argumentopremise1_value = Truepremise2_value = Falseconclusion_value = Trueargument_sub = substitute(argument, [(premise1, premise1_value), (premise2, premise2_value), (conclusion, conclusion_value)])print(argument_sub)Avaliando expressões aritméticasx = 2y = 3result = x + y * 2print(result)Usando a biblioteca matemática# Importando a biblioteca matemática:import math# Usando a função sqrt para calcular a raiz quadrada de um número:x = 25raiz = math.sqrt(x)print(raiz)# Usando a constante pi para calcular a circunferência de um círculoraio = 5circunferencia = 2 * math.pi * raioprint(circunferencia)# Usando a função pow para calcular a potência de um númerox = 2y = 3potencia = math.pow(x, y)print(potencia)# Usando a função log para calcular o logaritmo natural de um númerox = 10log = math.log(x)print(log)Referências W3schools Python reference Colab - Introdução a programação com a linguagem Python Livro na Biblioteca Virtual - Introdução à programação em Python - Sérgio Furgeri" }, { "title": "Crimpagem de Cabeamento de rede Ethernet", "url": "/aulas/posts/crimpagem-de-cabeamento-de-rede/", "categories": "AULAS, INFRAESTRUTURA DE REDES", "tags": "infraestrutura, cabeamento", "date": "2023-04-03 10:40:00 -0300", "snippet": "Como crimpar um cabo de rede RJ45: Passo a passoCrimpar um cabo de rede RJ45 pode parecer difícil para aqueles que não estão familiarizados com o processo. No entanto, com as ferramentas certas e u...", "content": "Como crimpar um cabo de rede RJ45: Passo a passoCrimpar um cabo de rede RJ45 pode parecer difícil para aqueles que não estão familiarizados com o processo. No entanto, com as ferramentas certas e um pouco de prática, qualquer pessoa pode aprender a criar um cabo de rede RJ45 com facilidade. Neste artigo, você aprenderá como crimpar um cabo de rede RJ45 passo a passo, incluindo como testá-lo para garantir a sua eficácia.1. Ferramentas necessárias para crimpar um cabo de rede RJ45Antes de começar, é necessário ter as ferramentas certas. A principal ferramenta necessária para crimpar um cabo de rede RJ45 é um alicate de crimpagem RJ45. Esse alicate deve possuir guilhotinas para cortar os fios e locais específicos para crimpar conectores RJ11, RJ12 e RJ45 compatíveis com cabos dos modelos Cat-5, Cat-5e e Cat-6.Além disso, é importante ter um testador de cabo de rede RJ45 para garantir que todos os oito terminais estejam perfeitamente conectados ao seu respectivo correspondente.2. Escolhendo o padrão e o tipo do caboAntes de começar a crimpar, é necessário escolher o padrão de posicionamento de fios que será utilizado para a crimpagem dos conectores RJ45. Existem dois modelos padrão: o modelo 568A e o modelo 568B.Além disso, é necessário escolher o tipo de cabo que será utilizado. Existem dois tipos possíveis de serem montados: o cabo direto e o cabo crossover.3. Desencapando a ponta do cabo e organizando os fiosApós escolher o padrão e o tipo do cabo, é necessário desencapar a ponta do cabo e desenrolar os fios coloridos. Em seguida, é preciso organizá-los lado a lado de acordo com o padrão escolhido.4. Inserindo os fios no conector RJ45Com os fios organizados corretamente, é hora de inseri-los no conector RJ45. É importante pressionar o alicate com força para que as travas metálicas encaixem-se nos fios e garantam a comunicação dos mesmos.5. Testando o cabo de rede RJ45Após a crimpagem, é importante testar o cabo com um testador de cabo de rede RJ45. Esse teste é necessário para garantir que todos os oito terminais estejam perfeitamente conectados ao seu respectivo correspondente. Caso haja algum problema na conexão, é possível identificar e corrigir antes de utilizar o cabo.ConclusãoCrimpar um cabo de rede RJ45 pode parecer um processo complicado, mas com as ferramentas certas e um pouco de prática, é possível aprender facilmente. É importante seguir os passos descritos neste artigo e testar o cabo de rede RJ45 antes de utilizá-lo para garantir a sua eficácia.ReferênciasAlicate crimpador: para que serve a ferramenta? Ferramentas Kennedy Vídeos descrição 5 Modelos de alicates de crimpar RJ45 , RJ11 e RJ9 Como usar o TESTADOR DE CABO DE REDE? " }, { "title": "Bibliotecas no Arduino", "url": "/aulas/posts/bibliotecas-no-arduino/", "categories": "AULAS, NOÇÕES DE ROBÓTICA", "tags": "arduino, robótica, curso", "date": "2023-04-03 09:00:00 -0300", "snippet": "No Arduino, uma biblioteca é um conjunto de arquivos de código que implementam uma funcionalidade específica para ser usada em um projeto. Esses arquivos são geralmente escritos em C ou C++, e pode...", "content": "No Arduino, uma biblioteca é um conjunto de arquivos de código que implementam uma funcionalidade específica para ser usada em um projeto. Esses arquivos são geralmente escritos em C ou C++, e podem incluir funções, variáveis, constantes e outras estruturas de dados necessárias para implementar a funcionalidade desejada.Usando bibliotecasPara usar uma biblioteca em seu sketch do Arduino, você precisa incluí-la usando a diretiva #include. Esta diretiva informa ao compilador que você deseja usar a biblioteca no seu sketch.Aqui está um exemplo de como incluir a biblioteca “Wire.h” para comunicação I2C:#include &lt;Wire.h&gt;void setup() { Wire.begin(); // inicializa a comunicação I2C}void loop() { // faça algo com a comunicação I2C}Neste exemplo, a biblioteca “Wire.h” é incluída usando a diretiva #include &lt;Wire.h&gt;. Em seguida, no setup(), a função Wire.begin() é chamada para inicializar a comunicação I2C. No loop(), você pode fazer o que quiser com a comunicação I2C, usando as funções disponíveis na biblioteca “Wire.h”.Criando BibliotecasPara criar uma biblioteca no Arduino, você precisa seguir os seguintes passos: Escreva o código que implementa a funcionalidade desejada e salve-o em um ou mais arquivos de código-fonte. Crie um arquivo de cabeçalho (com extensão .h) que declare as funções, variáveis e outras estruturas de dados necessárias para usar a biblioteca em um projeto. Crie um arquivo de manifesto (com extensão .cpp ou .ino) que inclua os arquivos de código-fonte e defina qualquer configuração adicional necessária para usar a biblioteca. Empacote os arquivos em um diretório com o nome da biblioteca e salve-o no diretório de bibliotecas do Arduino.Para usar uma biblioteca no seu projeto do Arduino, você precisa incluir o arquivo de cabeçalho da biblioteca no seu código-fonte e usar as funções e outras estruturas de dados declaradas na biblioteca. Isso é feito usando a diretiva #include no início do seu código.Por exemplo, se você criou uma biblioteca chamada “MeuSensor”, você pode incluí-la no seu código-fonte da seguinte forma:#include &lt;MeuSensor.h&gt;void setup() { // Configuração inicial}void loop() { // Uso da biblioteca MeuSensor}Assim que você inclui a biblioteca no seu código, todas as funções, variáveis e outras estruturas de dados definidas nela estão disponíveis para serem usadas no seu programa.Em resumo, a criação de bibliotecas no Arduino envolve escrever o código que implementa a funcionalidade desejada, empacotá-lo em um formato adequado e incluir o arquivo de cabeçalho da biblioteca no seu código-fonte. Depois disso, você pode usar as funções e outras estruturas de dados definidas na biblioteca no seu programa.ExemploVamos criar uma biblioteca chamada “MeuSensor” que lê um sensor de temperatura LM35 e retorna o valor da temperatura em graus Celsius.1. Criando o arquivo de cabeçalho “MeuSensor.h”#ifndef MeuSensor_h#define MeuSensor_h#include &lt;Arduino.h&gt;class MeuSensor { public: MeuSensor(int pino); float lerTemperatura(); private: int _pino;};#endifEste arquivo define a classe \"MeuSensor\" que contém um construtor que inicializa o pino do sensor e uma função \"lerTemperatura\" que lê o valor do sensor e retorna a temperatura em graus Celsius.2. Criando o arquivo de manifesto “MeuSensor.cpp”#include \"MeuSensor.h\"MeuSensor::MeuSensor(int pino) { pinMode(pino, INPUT); _pino = pino;}float MeuSensor::lerTemperatura() { float tensao = (analogRead(_pino) * 5.0) / 1023.0; float temperatura = tensao * 100.0; return temperatura;}Este arquivo define o construtor da classe “MeuSensor” que configura o pino do sensor como entrada e atribui seu valor a uma variável privada da classe. Também define a função “lerTemperatura” que lê o valor do sensor usando a função analogRead, converte-o para tensão e, em seguida, para temperatura em graus Celsius.3. Criando a biblioteca “MeuSensor”Para criar a biblioteca “MeuSensor”, você precisa criar uma pasta chamada “MeuSensor” dentro do diretório “libraries” do seu sketchbook do Arduino e salvar os arquivos “MeuSensor.h” e “MeuSensor.cpp” nesta pasta.4. Utilizando a biblioteca “MeuSensor”Depois de criar a biblioteca “MeuSensor”, você pode incluí-la em seus sketches do Arduino da seguinte maneira:#include &lt;MeuSensor.h&gt;MeuSensor sensor(A0);void setup() { Serial.begin(9600);}void loop() { float temperatura = sensor.lerTemperatura(); Serial.print(\"Temperatura: \"); Serial.print(temperatura); Serial.println(\" °C\"); delay(1000);}Este sketch inclui a biblioteca “MeuSensor.h”, cria um objeto “sensor” da classe “MeuSensor” no pino A0 e, no loop, lê o valor do sensor usando a função “lerTemperatura” e o imprime na porta serial.Referências Apostila de Robótica" }, { "title": "Exercícios com Condicionais", "url": "/aulas/posts/exercicios-com-condicionais/", "categories": "DESENVOLVIMENTO, PROGRAMADOR", "tags": "Senac, lógica, programador, programação, exercícios, portugol", "date": "2023-03-31 17:00:00 -0300", "snippet": "Exercícios com condicionais Faça um algoritmo para ler dois números e imprimir o maior, o menor ou então dizer se são iguais. Faça um algoritmo para ler um número inteiro e dizer se o número lido...", "content": "Exercícios com condicionais Faça um algoritmo para ler dois números e imprimir o maior, o menor ou então dizer se são iguais. Faça um algoritmo para ler um número inteiro e dizer se o número lido é par ou impar. Faça um algoritmo para ler dois números A e B e dizer se A é divisível por B. Faça um algoritmo para ler dois números e imprimi-los em ordem crescente. Faça um algoritmo para ler três números e imprimir o maior.DESAFIO01- Faça um algoritmo para ler três números e imprimir se estes podem ou não formar um triângulo.Observação - Para formar os lados de um triângulo cada um dos valores tem que ser menor que a soma dos outros dois.02- Faça um algoritmo para ler três números e se estes poderem formar um triângulo dizer se o triângulo é “EQUILÁTERO”, “ISÓCELES” OU “ESCALENO”.03- Faça um algoritmo que leia as três notas, as faltas e o nome de um aluno e imprima sua situação. ( “APROVADO”, “REPROVADO POR FALTA” ou “REPROVADO POR MÉDIA” )Observação - A média para aprovação é 5.0 e o limite de faltas é 17.ExemplosConstrua um algoritmo para testar se um número é maior, igual ou menor que 100.programa { inteiro numero funcao inicio() { escreva(\"Digite um numero: \") leia(numero) escreva(\"O número digitado é \") se (numero &lt; 100) { escreva(\"menor\") } senao { se (numero == 100) { escreva(\"igual\") } senao { escreva(\"maior\") } } escreva(\" que 100! O número é: \" + numero) }}Teste de restoprograma { funcao inicio() { real NUM1, NUM2, RESTODIVISAO\t\t\tescreva(\"Entre com o primeiro número: \") leia (NUM1) escreva(\"Entre com o segundo número: \") leia (NUM2)\t\t\tRESTODIVISAO = NUM1 % NUM2 se (RESTODIVISAO == 0)\t{ escreva(\"A divisão do \", NUM1, \" pelo \", NUM2, \" é exata\") }\t\t\t\t\t escreva(\"A divisão do \", NUM1, \" pelo \", NUM2, \" não é exata\") }Melhorando o códigoprograma { funcao inicio() { real NUM1, NUM2, RESTODIVISAO\t\t\tescreva(\"Entre com o primeiro número: \") leia (NUM1) escreva(\"Entre com o segundo número: \") leia (NUM2)\t\t\tRESTODIVISAO = NUM1 % NUM2 escreva(\"A divisão do \", NUM1, \" pelo \", NUM2) se (RESTODIVISAO == 0)\t{ escreva(\" é exata\") }\tsenao { escreva(\" não é exata\") }\t }}Evoluindo o códigoprograma { funcao inicio() { real NUM1, NUM2, RESTODIVISAO\t\t\tescreva(\"Entre com o primeiro número: \") leia (NUM1) escreva(\"Entre com o segundo número: \") leia (NUM2)\t\t\tRESTODIVISAO = NUM1 % NUM2 escreva(\"A divisão do \", NUM1, \" pelo \", NUM2) se (nao(RESTODIVISAO == 0))\t{ escreva(\" não\") } escreva(\" é exata\") }}Teste condicional de médiaFaça um algoritmo para ler o nome de um aluno e sua média final. O resultado desse algoritmo deve ser uma mensagem informando se o aluno foi aprovado ou não. O critério de aprovação é ter média igual ou superior a 6,0….Xavier, Gley Fabiano CardosoLógica de programaçãoE-book. Disponível em: https://bibliotecadigitalsenac.com.br/?from=%3FcontentInfo%3D1306#/legacy/epub/1306Acesso em 31/03/2023flowchart TD A[Escreva o nome] --&gt; l(leia o nome) l --&gt; f(Escreva a média) f --&gt; B(leia a média) B --&gt; C{teste se a média &gt;= 6} C --&gt;|Verdadeiro| D[escreva aprovado] C --&gt;|Falso| E[escreva Reprovado]Em Portugolprograma { funcao inicio() { cadeia nome real media escreva(\"Entre com o nome: \") leia (nome) escreva(\"Entre com a média: \") leia (media) se (media &gt;= 6) { escreva(\"O aluno \", nome, \" foi aprovado com a média: \", media) } senao { escreva(\"O aluno \", nome, \" foi reprovado com a média: \", media) } }}Melhorando o códigoprograma { funcao inicio() { cadeia nome real media escreva(\"Entre com o nome: \") leia (nome) escreva(\"Entre com a média: \") leia (media) escreva(\"O aluno \", nome, \" foi \") se (media &gt;= 6) { escreva(\"aprovado \") } senao { escreva(\"reprovado \") } escreva(\"com a média: \", media) }}Encadeamento de comandos se:Nos problemas com vários testes/comparações, portanto, com vários comandos se, é necessário encadear os comandos, inserindo um dentro do outro, para aplicar e verificar todas as soluções possíveis. Veja o exemplo a seguir.Problema:Faça um algoritmo para ler duas notas de um aluno. Se a média aritmética das notas for maior que 6,0, deve aparecer a mensagem “Média superior à média mínima (6,0)”; se for igual a 6,0, “Média igual à média mínima (6,0)”; se for me…programa { funcao inicio() { cadeia nome real media escreva(\"Entre com o nome: \") leia (nome) escreva(\"Entre com a média: \") leia (media) escreva(\"O aluno \", nome, \" tem média \") se (media &gt; 6) { escreva(\"superior a média mínima \") } senao { se (media == 6) { escreva(\"igual a média mínima\") } senao { escreva(\"inferior a média mínima \") } } }}Referências Portugol Webstudio editor online" }, { "title": "Expressões condicionais", "url": "/aulas/posts/expressoes-condicionais/", "categories": "DESENVOLVIMENTO, PROGRAMADOR", "tags": "Senac, lógica, programador, programação, exercícios", "date": "2023-03-30 17:00:00 -0300", "snippet": "Permite a escolha de um grupo de ações e estruturas a ser executado quando determinadas condições, representadas por expressões lógicas, são ou não satisfeitas.SIMPLES ( SE / ENTÃO / INICIO / ...", "content": "Permite a escolha de um grupo de ações e estruturas a ser executado quando determinadas condições, representadas por expressões lógicas, são ou não satisfeitas.SIMPLES ( SE / ENTÃO / INICIO / FIM )\t\t| nome do programa\t\t|\t\t| declaração de variáveis\t\t| \t\tinicio\t\t| \t\t| se &lt; condição &gt; entao; | inicio | comando a;\t\t|\t .\t\t| comando n;\t\t| fim;\t\t| .\t\t| .\t\t| comando x;\t\tfim.CondiçãoÉ uma expressão lógica que, quando inspecionada, pode gerar um resultado falso ou verdadeiro. Se &lt; condição &gt; for verdadeira a cláusula que está entre o “início do se” e o “fim do se” será executada. Se &lt; condição &gt; for falsa a cláusula que está entre o “início do se” e o “fim do se” não será executada.Exercícios Faça um algoritmo para ler dois números e imprimir o maior, o menor ou então dizer se são iguais. Faça um algoritmo para ler um número inteiro e dizer se o número lido é par ou impar. Faça um algoritmo para ler dois números A e B e dizer se A é divisível por B. Faça um algoritmo para ler dois números e imprimi-los em ordem crescente. Faça um algoritmo para ler três números e imprimir o maior.DESAFIO01- Faça um algoritmo para ler três números e imprimir se estes podem ou não formar um triângulo.Observação - Para formar os lados de um triângulo cada um dos valores tem que ser menor que a soma dos outros dois.02- Faça um algoritmo para ler três números e se estes poderem formar um triângulo dizer se o triângulo é “EQUILÁTERO”, “ISÓCELES” OU “ESCALENO”.03- Faça um algoritmo que leia as três notas, as faltas e o nome de um aluno e imprima sua situação. ( “APROVADO”, “REPROVADO POR FALTA” ou “REPROVADO POR MÉDIA” )Observação - A média para aprovação é 5.0 e o limite de faltas é 17.ExemplosTeste se um valor digitado é positivo ou não:programa seleção_simples;variáveisvalor: real;inicio escreva(´digite um valor negativo´); leia ( valor ); se valor &gt; 0 entao; inicio escreva(´foi digitado um valor positivo´); fim ; se valor &lt; 0 entao; inicio escreva(´foi digitado um valor negativo´); fim; fim.MELHORAR O ALGORITMO.programa seleção_simples;variáveisvalor: real;inicio escreva(´digite um valor negativo´); leia ( valor ); se valor &gt; 0 entao; inicio escreva(´foi digitado um valor positivo que vale´, valor); fim ; se valor = 0 entao; inicio escreva(´foi digitado o valor zero´); fim ; se valor &lt; 0 entao; inicio escreva(´foi digitado um valor negativo que vale´, valor); fim; fim.Exercício para sala de aulaFazer o exercício do peso ideal testando uma altura válida.programa pesoideal;variáveisALT, PESOIDH, PESOIDM: real;inicio escreva( ´digite uma altura´); leia ( ALT ); se ALT &lt;= 2.50 e ALT &gt;= 0.60 entao; inicio PESOIDH = ( 72.7 * ALT ) - 58; PESOIDM = ( 62.1 * ALT ) - 44.7; escreva(´Se a altura for de um homem seu peso ideal e ´, PESOIDH, \"Kg\"); escreva(´Se a altura for de uma mulher seu peso ideal e ´, PESOIDM, \"Kg\"); fim; se ALT &gt; 2.50 ou ALT &lt; 0.60 entao; inicio escreva( ´Altura invalida´); fim;fim.Exemplo de situação do aluno em PascalProgram situacao_aluno;var nt1, nt2, nt3, media : real; faltas : integer; nome : string ;begin writel'DIGITE O NOME DO ALUNO: '); readIn(nome); writel'DIGITE AGORA SUA 1ª NOTA: '); readIn(nt1); writel'DIGITE AGORA SUA 2ª NOTA: '); readIn(nt2); writel'DIGITE AGORA SUA 3ª NOTA: '); readIn(nt3); writel'DIGITE AGORA SUAS FALTAS: '); readIn(faltas); if (nt1 &gt;= 0) and (nt1&lt;=10 ) and (nt2 &gt;= 0) and (nt2&lt;=10) and (nt3 &gt;= 0) and (nt3&lt;=10 ) then begin if faltas &gt;= 0 then begin media := ( nt1 + nt2 + nt3 ) / 3; if ( media &gt;= 5 ) and ( faltas &lt;= 17 ) then begin writeln('O aluno ´, nome, ´está aprovado com média de ´, media ); end else if media &lt; 5 then begin writeln('O aluno ´, nome, ´está reprovado por média com média de ´, media ); end else begin writeln('O aluno ´, nome, ´está reprovado por falta com ´, faltas, ´ faltas. ); end else begin writeln('NÃO EXISTE NÚMERO DE FALTAS NEGATIVO'); end else begin writeln('AS NOTAS TEM QUE ESTAR ENTRE ZERO E DEZ'); end;end.Referências Portugol Webstudio editor online" }, { "title": "Certificação de cabeamento estruturado", "url": "/aulas/posts/certificacao-de-cabeamento/", "categories": "AULAS, INFRAESTRUTURA DE REDES", "tags": "infraestrutura, cabeamento", "date": "2023-03-30 10:40:00 -0300", "snippet": "A certificação de cabeamento estruturado é fundamental para garantir o bom funcionamento das redes corporativas que transportam dados, voz e imagem. A certificação é realizada através de testes em ...", "content": "A certificação de cabeamento estruturado é fundamental para garantir o bom funcionamento das redes corporativas que transportam dados, voz e imagem. A certificação é realizada através de testes em todo o sistema de cabeamento, verificando se ele está de acordo com os padrões técnicos para cada categoria de cabeamento.ObjetivoA certificação permite verificar a qualidade do material e da mão de obra utilizada na instalação, bem como a compatibilidade com as aplicações de rede pretendidas. A certificação é feita por equipamentos específicos, como o testador de cabos, o qual é utilizado para verificar a qualidade do condutor e apontar qualquer falha que possa existir entre os condutores ou se há alguma conexão cruzada. A certificação de cabeamento estruturado permite que o cliente final tenha a certeza de que foi instalado o que ele contratou, e que a performance e a qualidade do sistema de cabos sejam as melhores.Equipamentos Testador de cabos Analisador de espectro Certificador de cabosVerificação Verificar a qualidade do material de cabeamento adquirido Verificar a qualidade da mão-de-obra utilizada na instalação Verificar a compatibilidade com as aplicações de rede pretendidas Garantir a aceitação do trabalho realizado Permitir que o cliente final tenha a certeza de que foi instalado o que ele contratou Permitir que o fabricante do cabeamento possa oferecer uma garantia estendida Confirmar a realização do trabalho pelo instalador, evitando qualquer falha na prestação dos serviços Assegurar que as aplicações instaladas tenham sua performance garantidaFerramentas de análise de redes cabeadasFerramentas de verificação de redes cabeadas Ethernet: Certificador de cabos: é uma ferramenta que testa a qualidade e a conformidade dos cabos Ethernet, verificando se eles atendem aos padrões de desempenho definidos pelo TIA/EIA. Essa ferramenta é usada para testar cabos Ethernet de cobre. Testador de continuidade: verifica a continuidade dos cabos Ethernet, garantindo que não haja interrupções ou falhas na transmissão de dados. Testador de cabo de rede: é uma ferramenta que pode ser usada para testar a integridade física do cabo Ethernet, verificando se ele está danificado ou desgastado.Ferramentas de verificação de redes de fibra óptica: Medidor de potência óptica: é uma ferramenta que mede a potência do sinal óptico em uma fibra. Isso é importante para verificar a qualidade da conexão e para garantir que a fibra está transmitindo dados corretamente. Localizador visual de falhas: é uma ferramenta que ajuda a localizar as falhas em uma rede de fibra óptica. Ele emite um sinal óptico no cabo e mostra onde o sinal é interrompido. Analisador de espectro óptico: é uma ferramenta que analisa as características do sinal óptico, como a intensidade, a largura de banda e a frequência. Isso é importante para verificar a qualidade da conexão e para solucionar problemas de interferência ou distorção do sinal.ReferênciasCertificação de cabeamento estruturado: como funciona e sua importância. Vídeos: Descrição ] Curso de Rede Ferramentas e Switchs - #Aula 2 Conheça o Certificador DSX-602 PRO da Fluke Networks CABO DE REDE - TESTE OU CERTIFICAÇÃO, QUAL A DIFERENÇA? " }, { "title": "Engenharia e Ciências da Computação", "url": "/aulas/posts/engenharia-e-ciencias-da-computacao-copy/", "categories": "AULAS, PLANEJAMENTO DE CARREIRA", "tags": "profissão", "date": "2023-03-30 10:00:00 -0300", "snippet": "title: “Engenharia e Ciências da Computação”date: 2023-03-27 10:00:00 -0300categories: [AULAS, PLANEJAMENTO DE CARREIRA]tags: [planejamento, carreira, graduação]—ENGENHARIA DA COMPUTAÇÃOSOBRAL - U...", "content": "title: “Engenharia e Ciências da Computação”date: 2023-03-27 10:00:00 -0300categories: [AULAS, PLANEJAMENTO DE CARREIRA]tags: [planejamento, carreira, graduação]—ENGENHARIA DA COMPUTAÇÃOSOBRAL - UFCLink: https://prograd.ufc.br/pt/cursos-de-graduacao/engenharia-da-computacao-sobral/Matriz Curricular: PresencialDados CurricularGraduaçãoTipo bacharelado;Duração de 5 anos;Cursado de tempo integral (na maioria dos casos);Profissão e mercadoO profissional formado em Engenharia da Computação é capaz de projetar e construir hardware e software.Hardware(teclado, mouse, monitor):Nessa área, o engenheiro de computação faz a integração de circuitos eletrônicos da máquina e desenvolve placas de ligação entre o equipamento e seus acessórios.Na área de desenvolvimento de software o engenheiro da computação cria programas de computadores e aplicativos para os mais diversos fins.Pode atuar em:Automação industrial e robótica;Gerenciamento de Redes de Computadores;Carreira acadêmica (Ministrar aulas)Perfil do profissionalTer afinidade com matemática;Gostar de tecnologia e linguagens de programação;Estar sempre atualizado para se manter no mercado;Mercado de trabalhoEm alta (constante crescimento);Profissional versátil (atua em vários setores da indústria);Principais indústrias:Automobilística;Informática;Farmacêutica;Telecomunicações, Bancos;Comércio eletrônico e consultoria tecnológica.As regiões Sul e Sudeste concentram o maior número de vagasSalário inicial: 4.211,00Podendo ganhar até: 8.052,00. A média salarial para Engenheiro de Computação no Brasil é de R$ 6.526,00.CIÊNCIAS DA COMPUTAÇÃOUVA - Sobral Link: http://www.uvanet.br/cursos/texto_curso.php?id_coordenacao=4&amp;campo=perfilGraduação Bacharelado (4 a 5 anos);Atua basicamente na elaboração de programas de informática;Um cientista da computação, como é chamado o profissional formado em Ciência da Computação, pode ser contratado para trabalhar em uma equipe de desenvolvedores, criando software de acordo com a necessidade dos clientes.Também pode atuar no departamento de Pesquisa e Desenvolvimento (P&amp;D)de uma empresa.MercadoAnalista de Sistemas (elabora documentos ou especifica requisitos de sistemas);Arquiteto de Software (modela sistemas);Gerente de TI (gerencia projetos);Docência ou Pesquisa (Professor ou Desenvolve pesquisas)Bastante amplo no país;Setor industrial absorve muitos profissionais formados nessa área;Autônomos e Professor;Perfil profissionalHabilidades com dispositivos tecnológicos;Gostar de matemática;Acompanhar novas tecnologias e tendências do setor;Ser dinâmico e ter muita curiosidade;SalárioGanho inicial (média mensal)Em pequenas ou médias empresas: de R$ 2 mil a R$ 4 mil.Em grandes empresas: de R$ 2 mil a R$ 4,5 mil.Ganho escalão intermediário (média mensal)Em pequenas ou médias empresas: de R$ 5 mil a R$ 9 mil.Em grandes empresas: de R$ 6 mil a R$ 11 mil.Ganho no auge (média mensal)Em pequenas ou médias empresas: de R$ 9 mil a R$ 14 mil.Em grandes empresas: de R$ 10 mil a R$ 15 mil.O salário médio de um Cientista da computação no Brasil é de R$ 2.911." }, { "title": "Expressões com literais", "url": "/aulas/posts/expressoes-com-literais/", "categories": "DESENVOLVIMENTO, PROGRAMADOR", "tags": "Senac, lógica, programador, programação, exercícios, portugol", "date": "2023-03-29 17:00:00 -0300", "snippet": "São expressões com constantes e/ou variáveis literais que têm como resultado valores literais. Diferentemente das expressões aritméticas, as expressões literais aceitam somente o operador de concat...", "content": "São expressões com constantes e/ou variáveis literais que têm como resultado valores literais. Diferentemente das expressões aritméticas, as expressões literais aceitam somente o operador de concatenação.Resolver expressões literais obtendo um caractere ou um conjunto de caracteres.\t\tProblema\t\tSendo X, Y e Z as variáveis literais, qual o resultado de cada variável no final do algoritmo?\t\tinício\t\tX, Z, Y: literal\t\tX ← \" Banana\"\t\tZ ← X + \"da\"\t\tY ← \"A \" + Z + \" é feita de \" + X + \".\"\t\tfim\t\tSolucionando o problema\t\t\t1.\tSepare as expressões do algoritmo.\t\tX ← \" Banana\"\t\tZ ← X + \"da\"\t\tY ← \"A\" + Z + \" é feita de\" + X + \".\"\t\t\t2.\tO resultado da variável X é o valor Banan...Resolução em Portugol:programa {/*início\t\t\tX, Z, Y: literal\t\t\tX ← “ Banana”\t\t\tZ ← X + “da”\t\t\tY ← “A “ + Z + “ é feita de “ + X + “.”\t\t\tfim */ cadeia x, y, z funcao inicio() { x = \"Banana\" z = x + \"da\" y = \"A \" + z + \" é feita de \" + x + \".\" escreva(\"x = \" + x + \"\\n\") escreva(\"z = \" + z + \"\\n\") escreva(\"y = \" + y) }}Expressões relacionaisResolvendo expressões relacionais:\t\tAprender a resolver expressões relacionais.\t\tTarefa:\t\tResolver expressões aritméticas e relacionais obtendo resultados lógicos.\t\tProblema\t\tSendo X, Y, Z variáveis numéricas e W, T variáveis lógicas, qual o valor de cada variável no final do algoritmo?\t\tinício\t\tX, Z, Y: numérico\t\tW, T: lógico\t\tX ←\t 5\t\tZ ←\t (X + 4) / 3\t\tY ←\t ((X + 4) ^ (1/2))\t\tW ←\t (X &gt;= Z)\t\tT ←\t (Z &lt;&gt; Y)\t\tfim...Expressões lógicasSão expressões compostas por expressões relacionais com operadores lógicos. As expressões lógicas retornam valores lógicos.Exemplo:Sendo X e Y variáveis numéricas, Z e W variáveis literais e T e K variáveis lógicas, qual o resultado de cada variável no final do algoritmo?início\t\tX, Y: numérico\t\tZ, W: literal\t\tT, K: lógico\t\tX ← 3Y ← X ↑ 2\t\t\tZ ← \"Abaca\"\t\t\tW ← Z + \"xi\"\t\t\tT ← (X &lt;= Y) e (não (Z + \"te\" &lt;&gt; W))\t\t\tK ← não (T e (\"Abaca\" = Z))\t\t\t\t\t\tfim...Resolução em Portugol:programa { /* Sendo X e Y variáveis numéricas, Z e W variáveis literais e T e K variá­veis lógicas, qual o resultado de cada variável no final do algoritmo?\t\t\tX, Y: numérico\t\t\tZ, W: literal\t\t\tT, K: lógico\t\t\tX ← 3\t\t\tY ← X ↑ 2\t\t\tZ ← “Abaca”\t\t\tW ← Z + “xi”\t\t\tT ← (X &lt;= Y) e (não (Z + “te” &lt;&gt; W))\t\t\tK ← não (T e (“Abaca” = Z)) */ funcao inicio() { real X, Y\t\tcadeia Z, W\t\tlogico T, K\t\t\tX = 3\t\t\tY = X * X\t\t\tZ = \"Abaca\"\t\t\tW = Z + \"xi\"\t\t\tT = (X &lt;= Y) e (nao (Z + \"te\" &lt;&gt; W))\t\t\tK = nao (T e (\"Abaca\" == Z)) escreva(\"X = \" + X + \", Y = \" + Y + \", Z = \" + Z + \", W = \" + W + \", T = \" + T + \", K = \" + K) }}ReferênciasIDE do Portugol Studio onlineXavier, Gley Fabiano CardosoLógica de programaçãoE-book. Disponível em: https://bibliotecadigitalsenac.com.br/?from=%3FcontentInfo%3D1306#/legacy/epub/1306Acesso em 30/03/2023" }, { "title": "Lógica matemática e algoritmos", "url": "/aulas/posts/logica-matematica/", "categories": "DESENVOLVIMENTO, PROGRAMADOR", "tags": "Senac, lógica, programador, programação, exercícios", "date": "2023-03-28 17:00:00 -0300", "snippet": "Chamamos de operadores matemáticos ou aritméticos o conjunto de símbolos que representa as operações básicas da matemática, a saber: + adição ; + - subtração ; * multiplicação ; / divisão ; ** pot...", "content": "Chamamos de operadores matemáticos ou aritméticos o conjunto de símbolos que representa as operações básicas da matemática, a saber: + adição ; + - subtração ; * multiplicação ; / divisão ; ** potenciação ; // radiciação.Exemplos: -2 + 2 ; ABC / 5 ; aula * ABC + XPTO - 8.FUNÇÕES MATEMÁTICAS QUE SERÃO USADASMOD( resto da divisão )DIV( quociente inteiro da divisão )INT( x ) - resulta a parte inteira de um número X.FRAC( x ) - resulta a parte fracionária de X.ABS( x ) - resulta o valor absoluto de X.Exemplos: - 15 DIV 7 resulta 2- 15 MOD 7 resulta 1- INT( 34.567 ) resulta 34- FRAC( 546.34 ) resulta 34- ABS ( -34 ) resulta 34PRIORIDADES Na resolução das expressões aritméticas, as operações e funções matemáticas guardam entre si uma hierarquia. Parênteses mais internos. Funções matemáticas. * // / + -Exercícios3 ** 2 - 4 / 2 + ABS( 5 - 3 * 5 ) / 2( FRAC( A / B ) + ABS( C ) ) ** 3 onde A = 5 , B = 10 e C = -43 + ( 27 // 3 ) * (( 3 MOD D + 0.5 ) * 2 ) onde D = 1.5OPERADORES RELACIONAIS com EXPRESSÕES LÓGICAS= ( igual a )# ou &lt;&gt; ( diferente)&gt; ( maior )&lt; ( menor )Exemplo2 * 4 = 24 / 3 8 = 8 VOPERADORES LÓGICOSE = conjunçãoOU = disjunçãoNÃO = negaçãoExemplo:2 &lt; 5 e 15 / 3 = 5V e 5 = 5V e VVPRIORIDADES LÓGICASNa resolução das expressões lógicas, as operações e funções lógicas guardam entre si uma hierarquia.1 - NÃO2 - E / OUPRIORIDADES ENTRE TODOS OS OPERADORES Parênteses mais internos; Funções matemáticas; ( MOD - FRAC - DIV ….) Operadores aritméticos; ( ** - // - * - / - + - - ) Operadores relacionais; ( # - = - &gt; - &lt; ) Operadores lógicos.( E - OU - NÃO )Exercícios 2 NÃO 2**3 &lt; 4**2 OU ABS( INT( -15 / 2 ) ) &lt; 10Resolução:Vamos resolver essa expressão passo a passo:1. Primeiramente, vamos resolver a parte interna de cada função:```plaintext _2 ** 3 = 8 4 ** 2 = 16 INT( -15 / 2 ) = INT( -7.5 ) = -8 ABS( -8 ) = 8_ Agora podemos substituir esses valores na expressão original:NÃO 8 &lt; 16 OU 8 &lt; 10 Continuando com a ordem de precedência dos operadores, vamos avaliar primeiro a comparação matemática: 8 &lt; 16 é verdadeiro (True) 8 &lt; 10 é verdadeiro (True) Agora, vamos avaliar a negação da primeira condição:NÃO True é falso (False) Por fim, temos o resultado da expressão:False OU True é verdadeiro (True)Portanto, a expressão lógica é verdadeira (True).Exercícios 31) 3 * ( C / 4 + 5) &lt; - 8 * 3 + ( 15 MOD 8 - 3 ) OU 5 ** 2 &gt; INT( C * 0.7 ) onde C = 202) A ** 3 / B + 5 - C * D &gt; C * D + A - B OU A // 2 / D &lt; 18 - A onde A = 9 , B = 3 , C = 4 e D = 23) 5 + A * B ≥ 16 // 4 - D E 6 / A * C / ( A - B ) = 234 OU A / 4 - ( 7 + 5 * C ) &lt; A ** 2 - 3 * BCOMANDO DE ATRIBUIÇÃO Fornece um valor a uma certa variável tendo que este valor ser compatível com o tipo de variável que foi declarada.**Exemplo: lógico: A, B;\tInteiro: X, AULA;\tA = Verdadeiro;\tX = 15;\tAULA = 8 + 13 DIV 5;\tB = 5 = 3;**COMANDOS DE ENTRADA DE DADOSExemplo: Leia ( X );Leia ( X, AULA, B );COMANDOS DE SAÍDA DE DADOSExemplo: Escreva ( X );Escreva ( X, AULA, B );Escreva ( “O resultado do peso do aluno é de “, PESO, “ quilos” );BLOCOS Um algoritmo pode ser visto como um bloco. Ele serve para definir os limites nos quais as variáveis declaradas em seu interior são conhecidas e processadas.**Para delimitar um bloco ( algoritmo ) utilizamos os delimitadores: inicio e fim.Exemplo:\t| nome do programa\t|\t| declaração de variáveis\t|inicio\t|\t|\t| seqüência de ações\t|\t|\t| resultado\t|fim.ESTRUTURAS DE CONTROLESEQÜENCIAL\t| nome do programa\t|\t| declaração de variáveis\t|inicio\t|\t| comando a;\t| comando b;\t| comando c;\t| \t| comando n;fim.Exercícios 4 Construa um algoritmo que calcule a média aritmética entre quatro notas quaisquer fornecidas pelo usuário.programa { // Calcular a media de duas notas funcao inicio() { inteiro a, b real media escreva(\"Digite a primeira nota: \")\t\tleia(a) escreva(\"Digite a segunda nota: \")\t\tleia(b) media = (a+b)/2 escreva(\"Voce digitou:\", a) escreva(\" e Voce digitou:\", b) escreva(\" a média é:\", media) }}Referências 👨🏽‍🏫 Lógica matemática Editor Portugol online" }, { "title": "A evolução do WiFi", "url": "/aulas/posts/a-evolucao-do-wifi/", "categories": "AULAS, INFRAESTRUTURA DE REDES", "tags": "infraestrutura, WiFi", "date": "2023-03-28 10:40:00 -0300", "snippet": "A evolução do Wi-Fi tem sido uma das mais rápidas e dramáticas no mundo das tecnologias de comunicação sem fio. Desde sua primeira versão, o Wi-Fi tem evoluído rapidamente para oferecer maior largu...", "content": "A evolução do Wi-Fi tem sido uma das mais rápidas e dramáticas no mundo das tecnologias de comunicação sem fio. Desde sua primeira versão, o Wi-Fi tem evoluído rapidamente para oferecer maior largura de banda, melhor desempenho e maior alcance.Aqui estão algumas das principais etapas na evolução do Wi-Fi: 1997: A primeira versão do padrão IEEE 802.11 foi lançada, com uma taxa de transferência máxima de 2 Mbps. Esta versão foi conhecida como 802.11 “Legacy”. 1999: A segunda versão do padrão IEEE 802.11 foi lançada, conhecida como 802.11b. Esta versão suportava uma taxa de transferência máxima de 11 Mbps. 2003: O padrão 802.11g foi lançado, suportando uma taxa de transferência máxima de 54 Mbps. Esta versão utilizava a mesma faixa de frequência que o 802.11b, mas com melhorias no desempenho e alcance. 2006: O padrão 802.11n foi lançado, suportando uma taxa de transferência máxima de 600 Mbps. Esta versão utilizava múltiplas antenas para melhorar o desempenho e a estabilidade do sinal. 2013: O padrão 802.11ac foi lançado, suportando uma taxa de transferência máxima de 6,9 Gbps. Esta versão utilizava a faixa de frequência de 5 GHz para melhorar o desempenho e o alcance. 2019: O padrão 802.11ax, também conhecido como Wi-Fi 6, foi lançado, suportando uma taxa de transferência máxima de 10 Gbps. Esta versão utiliza várias tecnologias, como MU-MIMO, OFDMA e beamforming, para melhorar o desempenho e a eficiência do sinal.Ao longo dos anos, o Wi-Fi evoluiu para oferecer maior desempenho e melhor alcance, tornando-se uma tecnologia cada vez mais importante para a conectividade sem fio.Aqui está uma tabela comparativa dos padrões de tecnologias Wi-Fi: Padrão Banda de frequência Velocidade máxima teórica Alcance máximo MIMO Data de lançamento 802.11b 2.4 GHz 11 Mbps 100 m Não suportado 1999 802.11a 5 GHz 54 Mbps 35 m Não suportado 1999 802.11g 2.4 GHz 54 Mbps 100 m Não suportado 2003 802.11n 2.4 GHz / 5 GHz 600 Mbps 250 m Suportado 2009 802.11ac 5 GHz 6.9 Gbps 35 m Suportado 2013 802.11ax 2.4 GHz / 5 GHz 9.6 Gbps 250 m Suportado 2019 Cada padrão de tecnologia Wi-Fi tem suas próprias características e especificações, como banda de frequência, velocidade máxima teórica, alcance máximo, suporte a MIMO (Multiple Input, Multiple Output), entre outros. O padrão mais recente é o 802.11ax, também conhecido como Wi-Fi 6, que oferece velocidades ainda mais rápidas e maior eficiência energética em comparação com seus predecessores.Referências IEEE Standards Association. (2021). IEEE 802.11: Wireless LANs. Evolução do Wifi" }, { "title": "Áreas de atuação em TI: Técnico de informática", "url": "/aulas/posts/area-de-tec-de-informatica/", "categories": "AULAS, PLANEJAMENTO DE CARREIRA", "tags": "planejamento, carreira, graduação", "date": "2023-03-28 10:00:00 -0300", "snippet": "Links de referências sobre técnico de informática.TÉCNICO EM INFORMÁTICA - O que faz, formação, salários - Quero BolsaSenai - Téc. de informáticaPerfil ProfissionalSuporte de TI: entenda mais sobre...", "content": "Links de referências sobre técnico de informática.TÉCNICO EM INFORMÁTICA - O que faz, formação, salários - Quero BolsaSenai - Téc. de informáticaPerfil ProfissionalSuporte de TI: entenda mais sobre o assunto - Penso TecnologiaTécnicos - Manutenção e Suporte em InformáticaO que faz um analista de suporte? Quanto ganha?Senac - tudo-que-voce-precisa-saber-sobre-o-que-um-tecnico-em-informatica-fazO que é computação gráfica? Saiba tudo sobre a área e a formação!" }, { "title": "Resistência elétrica", "url": "/aulas/posts/resistencia/", "categories": "AULAS, NOÇÕES DE ROBÓTICA", "tags": "arduino, robótica, curso, eletricidade, eletrônica", "date": "2023-03-28 09:00:00 -0300", "snippet": "A resistência elétrica é a capacidade de um corpo se opor à passagem de corrente elétrica. Mesmo quando existe uma diferença de potencial aplicada, o corpo oferece uma oposição à passagem de corre...", "content": "A resistência elétrica é a capacidade de um corpo se opor à passagem de corrente elétrica. Mesmo quando existe uma diferença de potencial aplicada, o corpo oferece uma oposição à passagem de corrente elétrica. A unidade de medida da resistência elétrica é o ohm (Ω).ResistoresResistor Resistores são componentes eletrônicos que oferecem uma oposição à passagem de corrente elétrica. A oposição à passagem de corrente elétrica é oferecida através do material do resistor. Os resistores causam uma queda de tensão em alguma parte de um circuito elétrico. Os resistores limitam a corrente elétrica, mas jamais causam quedas de corrente elétrica. Isso significa que a corrente elétrica que entra em um terminal do resistor será exatamente a mesma que sai pelo outro terminal, mas haverá uma queda de tensão.Controle da tensão sobre os componentes Utilizando resistores, é possível controlar a tensão sobre os componentes desejados em um circuito elétrico. Os resistores são frequentemente usados em circuitos elétricos para ajustar a corrente elétrica e a tensão que é fornecida aos diferentes componentes do circuito. Eles são usados para reduzir a tensão que é fornecida a um componente, para limitar a corrente que flui através de um circuito e para dividir a tensão em diferentes partes do circuito. Ao usar resistores em um circuito, é possível garantir que os componentes estejam operando dentro dos limites de corrente e tensão seguros, o que ajuda a evitar danos aos componentes e a garantir que o circuito funcione corretamente.Em resumo, a resistência elétrica é a capacidade de um corpo oferecer uma oposição à passagem de corrente elétrica, e os resistores são componentes eletrônicos que aproveitam essa propriedade para controlar a tensão sobre os componentes de um circuito elétrico. Os resistores são usados para ajustar a corrente elétrica e a tensão que é fornecida aos diferentes componentes do circuito, garantindo que os componentes estejam operando dentro dos limites de corrente e tensão seguros e ajudando a evitar danos aos componentes e a garantir que o circuito funcione corretamente.Cálculo da resistênciaCálculo da resistênciaExistem diversas maneiras de calcular a resistência, tensão e corrente de um circuito elétrico, dependendo da complexidade do circuito e da informação que se deseja obter. A seguir, apresentamos alguns exemplos de cálculos básicos: Cálculo da resistência: Se a tensão (V) e a corrente (I) são conhecidas, a resistência (R) pode ser calculada pela fórmula R = V/I. Se a resistividade (ρ) e as dimensões de um material condutor são conhecidas, a resistência pode ser calculada pela fórmula R = (ρ * L) / A, onde L é o comprimento do material, A é a área da seção transversal do material e ρ é a resistividade do material. Se a resistência de cada componente em um circuito é conhecida, a resistência total do circuito pode ser calculada pela fórmula Rtotal = R1 + R2 + ... + Rn, onde R1, R2, ..., Rn são as resistências de cada componente. Cálculo da tensão: Se a resistência (R) e a corrente (I) são conhecidas, a tensão (V) pode ser calculada pela fórmula V = R * I. Se a tensão em um ponto do circuito é conhecida, a tensão em outro ponto pode ser calculada usando a lei de Ohm: V = I * R, onde I é a corrente que flui entre os dois pontos e R é a resistência entre os dois pontos. Cálculo da corrente: Se a resistência (R) e a tensão (V) são conhecidas, a corrente (I) pode ser calculada pela fórmula I = V/R. Se a corrente que flui em um componente é conhecida, a corrente em outro componente pode ser calculada usando a lei de Ohm: I = V / R, onde V é a tensão entre os dois componentes e R é a resistência entre os dois componentes.Esses são apenas alguns exemplos de como calcular a resistência, tensão e corrente em um circuito elétrico. Existem outras fórmulas e técnicas que podem ser usadas dependendo da complexidade do circuito e do tipo de informação que se deseja obter.ExercíciosExemplos de exercícios com cálculos de resistência, tensão e corrente de circuitos:Calcule a resistência total e a corrente que flui no circuito abaixo, sabendo que a resistência de cada resistor é de 10 ohms.Resolução:A resistência total do circuito é a soma das resistências de cada resistor, ou seja, Rtotal = 10 ohms + 10 ohms + 10 ohms = 30 ohms.Para calcular a corrente que flui no circuito, podemos usar a lei de Ohm: I = V/R. Como a tensão em um circuito em série é a mesma em todos os componentes, podemos usar a tensão de 12 volts que é aplicada no circuito:I = V/Rtotal = 12 volts / 30 ohms = 0,4 amperes.Exemplo 2:Calcule a tensão em cada resistor e a corrente que flui no circuito abaixo, sabendo que a resistência de R1 é de 10 ohms e a resistência de R2 é de 20 ohms.Resolução:A resistência total do circuito em série é a soma das resistências de cada resistor, ou seja, Rtotal = 10 ohms + 20 ohms = 30 ohms.A corrente que flui no circuito pode ser calculada usando a lei de Ohm: I = V/Rtotal. Usando a tensão de 24 volts que é aplicada no circuito, temos:I = V/Rtotal = 24 volts / 30 ohms = 0,8 amperes.Para calcular a tensão em cada resistor, podemos usar novamente a lei de Ohm: V = I * R. Assim, a tensão em R1 é V1 = I * R1 = 0,8 amperes * 10 ohms = 8 volts e a tensão em R2 é V2 = I * R2 = 0,8 amperes * 20 ohms = 16 volts.Exemplo 3:Calcule a resistência total e a corrente que flui no circuito abaixo, sabendo que a resistência de R1 é de 20 ohms, a resistência de R2 é de 30 ohms e a tensão aplicada é de 24 volts.Resolução:Para calcular a resistência total do circuito em paralelo, podemos usar a fórmula: 1/Rtotal = 1/R1 + 1/R2. Assim:```plain text1/Rtotal = 1/20 ohms + 1/30 ohms = 0,05 + 0,0333 = 0,0833.Rtotal = 1/0,0833 = 12 ohms.```Para calcular a corrente que flui no circuito, podemos usar a lei de Ohm: I = V/Rtotal = 24 volts / 12 ohms = 2 amperes.Note que, como os resistores estão em paralelo, a tensão em cada resistor é a mesma e pode ser calculada diretamente usando a lei de Ohm: V1 = I * R1 = 2 amperes * 20 ohms = 40 volts e V2 = I * R2 = 2 amperes * 30 ohms = 60 volts.Exemplo 4:Calcule a resistência total e a corrente que flui no circuito abaixo, sabendo que a resistência de R1 é de 10 ohms, a resistência de R2 é de 20 ohms e a tensão aplicada é de 12 volts.Resolução:Para calcular a resistência total do circuito em série, podemos somar as resistências de cada resistor, ou seja, Rtotal = 10 ohms + 20 ohms = 30 ohms.Para calcular a corrente que flui no circuito, podemos usar a lei de Ohm: I = V/Rtotal = 12 volts / 30 ohms = 0,4 amperes.Note que a tensão em cada resistor é diferente, pois os resistores estão em série e a tensão é dividida entre eles de forma proporcional às suas resistências.Assim, a tensão em R1 é V1 = I * R1 = 0,4 amperes * 10 ohms = 4 volts e a tensão em R2 é V2 = I * R2 = 0,4 amperes * 20 ohms = 8 volts.Referências Apostila de Robótica" }, { "title": "Diagrama de fluxo", "url": "/aulas/posts/fluxogramas/", "categories": "DESENVOLVIMENTO, PROGRAMADOR", "tags": "Senac, lógica, programador, diagramas", "date": "2023-03-27 17:00:00 -0300", "snippet": "Fluxograma é uma maneira de representar um processo por meio de um desenho, ou seja, é uma forma simples e fácil de identificar o fluxo com que as atividades acontecem.Tipos de fluxogramas Diagram...", "content": "Fluxograma é uma maneira de representar um processo por meio de um desenho, ou seja, é uma forma simples e fácil de identificar o fluxo com que as atividades acontecem.Tipos de fluxogramas Diagrama de Blocos Processo Simples Funcional VerticalPara saber mais acesse: 5 passos para criacao de um fluxogramaComo fazer fluxogramasPara criar diagramas de fluxo ou fluxogramas, primeiro é preciso um editor, como o Mermaid, em seguida seguir os seguintes passos:Escolha uma plataforma de edição de texto ou código que suporte a sintaxe do Mermaid. Algumas opções populares incluem VS Code, Atom, Sublime Text, ou mesmo o editor online do Mermaid.Comece definindo o tipo de gráfico que você deseja criar, utilizando a sintaxe apropriada do Mermaid. Por exemplo, para criar um diagrama de fluxo, você pode começar com o seguinte código:graph LR; A--&gt;B; A--&gt;C; B--&gt;D; C--&gt;D;Resultado:graph LR; A--&gt;B; A--&gt;C; B--&gt;D; C--&gt;D;Este código cria um diagrama de fluxo básico com quatro nós (A, B, C e D) e quatro setas conectando-os.Personalize seu gráfico adicionando nós adicionais, alterando as cores ou estilos, adicionando texto descritivo e ajustando o layout. Existem muitas opções de personalização disponíveis na sintaxe do Mermaid, e você pode encontrar uma lista completa de opções na documentação oficial.Depois de personalizar o seu gráfico, salve-o como um arquivo de imagem ou insira-o diretamente em seu documento ou aplicativo usando a sintaxe apropriada. Por exemplo, para inserir o gráfico em um documento HTML, você pode usar o seguinte código:&lt;html&gt;&lt;head&gt; &lt;script src=\"https://cdn.jsdelivr.net/npm/mermaid@8.9.3/dist/mermaid.min.js\"&gt;&lt;/script&gt; &lt;script&gt;mermaid.initialize({startOnLoad:true});&lt;/script&gt;&lt;/head&gt;&lt;body&gt; &lt;div class=\"mermaid\"&gt; graph LR; A--&gt;B; A--&gt;C; B--&gt;D; C--&gt;D; &lt;/div&gt;&lt;/body&gt;&lt;/html&gt;Este código carrega a biblioteca Mermaid, inicializa o gráfico e o exibe em um elemento div com a classe mermaid.Com esses passos simples, você pode criar um fluxograma ou diagrama de fluxo utilizando a sintaxe do Mermaid.Símbolos do fluxogramaExemplo básico de um diagrama de fluxo com Mermaid que exiba todos os elementos comuns do fluxograma:graph TD; Inicio([Inicio]) --&gt; Entrada[\\Entrada de dados/]; Entrada --&gt; Decisao{Tomar decisão?}; Decisao -- Sim --&gt; Processo[Processo 1]; Processo -- Condição 1 --&gt; Decisao2{Outra decisão?}; Decisao2 -- Sim --&gt; Processo2[Processo 2]; Decisao2 -- Não --&gt; Subprocesso[Subprocesso 1]; Subprocesso --&gt; Processo3((Conector)); Processo2 --&gt; Processo3; Processo3 --&gt; DecisaoFinal((Conector)); DecisaoFinal -- Resultado --&gt; Exibir&gt;Exibir resultado]; Exibir -- Fim --&gt; Fim([Fim]); Decisao -- Não --&gt; Subprocesso2[Subprocesso 2]; Subprocesso2 --&gt; DecisaoFinal;Resultado:graph TD; Inicio([Inicio]) --&gt; Entrada[\\Entrada de dados/]; Entrada --&gt; Decisao{Tomar decisão?}; Decisao -- Sim --&gt; Processo[Processo 1]; Processo -- Condição 1 --&gt; Decisao2{Outra decisão?}; Decisao2 -- Sim --&gt; Processo2[Processo 2]; Decisao2 -- Não --&gt; Subprocesso[Subprocesso 1]; Subprocesso --&gt; Processo3((Conector)); Processo2 --&gt; Processo3; Processo3 --&gt; DecisaoFinal((Conector)); DecisaoFinal -- Resultado --&gt; Exibir&gt;Exibir resultado]; Exibir -- Fim --&gt; Fim([Fim]); Decisao -- Não --&gt; Subprocesso2[Subprocesso 2]; Subprocesso2 --&gt; DecisaoFinal;Nesse exemplo, temos os seguintes elementos do fluxograma: Início: Representado pelo nó Inicio. Entrada: Representa uma entrada de dados pelo usuário. Decisão: Representado pelo nó Decisao com uma seta saindo para Processo 1 quando a resposta é sim, e para Subprocesso 2 quando a resposta é não. Processo: Representado pelo nó Processo 1, Processo 2, Processo 3. Condição: Representada pela seta com texto Condição 1. Subprocesso: Representado pelo nó Subprocesso 1 e Subprocesso 2. Exibir resultado: mostra o resultado na saída padrão. Conclusão: Representado pelo nó DecisaoFinal com uma seta saindo para Fim quando a decisão é tomada. Lembre-se de que a sintaxe do Mermaid pode ser personalizada para atender às suas necessidades específicas de fluxograma. Portanto, você pode alterar as cores, formas, tamanhos e estilos dos nós e das setas, bem como adicionar texto descritivo e ajustar o layout para tornar seu diagrama de fluxo mais claro e legível.Veja a lista completa de símbolos aqui!Editores de diagramas Mermaid Manual de Diagramas Mermaid Plantuml Draw.io Lucidchard" }, { "title": "Tecnologias de redes sem fio", "url": "/aulas/posts/tecnologias-de-redes-sem-fio/", "categories": "AULAS, INFRAESTRUTURA DE REDES", "tags": "infraestrutura, conectores, WiFi", "date": "2023-03-27 10:40:00 -0300", "snippet": "As redes sem fio surgiram para promover a mobilidade e a visualização rápida dos dados, independentemente da localização do usuário, e são transmitidas pelo ar ou espaço livre, constituindo-se como...", "content": "As redes sem fio surgiram para promover a mobilidade e a visualização rápida dos dados, independentemente da localização do usuário, e são transmitidas pelo ar ou espaço livre, constituindo-se como meio físico para propagação de sinais eletromagnéticos.As redes sem fio são padronizadas segundo o IEEE e divididas em quatro grandes grupos, dependendo do alcance. O texto aborda três desses grupos: WPAN, WLAN e WMAN, descrevendo suas características, protocolos e tecnologias, como o Bluetooth, Wi-Fi e WiMAX. As redes sem fio se tornaram uma alternativa ou complemento às redes cabeadas, sendo comuns em aeroportos, instituições públicas e shopping centers.1. WPAN (Wireless Personal Area Network)O WPAN é uma rede sem fio de área pessoal que permite a conexão de dispositivos pessoais em um raio curto, normalmente em uma distância de até 10 metros. Alguns exemplos de tecnologias WPAN incluem o Bluetooth e o Zigbee. O Bluetooth é uma tecnologia de comunicação sem fio que permite a transferência de dados entre dispositivos compatíveis. Ele usa a frequência de rádio de curto alcance (2,4 GHz) para conectar dispositivos móveis, como smartphones, laptops, fones de ouvido sem fio, alto-falantes, etc. O Zigbee é uma tecnologia sem fio que usa a especificação IEEE 802.15.4 para criar redes de baixa potência, baixa taxa de transmissão de dados e baixa velocidade, geralmente usada em aplicações de automação residencial e industrial.Tabela comparativa WPANSegue abaixo uma tabela comparativa entre algumas das principais tecnologias WPAN: Tecnologia Alcance Taxa de Transferência Frequência Consumo de energia Aplicações Bluetooth 10 m 1-3 Mbps 2.4 GHz Baixo Fones de ouvido sem fio, alto-falantes, teclados e mouses sem fio, transferência de arquivos entre dispositivos móveis ZigBee 10-100 m 20-250 kbps 2.4 GHz, 868/915 MHz Muito baixo Sensores de rede sem fio, sistemas de automação residencial, iluminação inteligente, monitoramento de energia Z-Wave 30-100 m 9.6-100 kbps 908/916 MHz Baixo Sistemas de automação residencial, iluminação inteligente, monitoramento de energia NFC 10 cm 106-424 kbps 13.56 MHz Muito baixo Pagamento móvel, compartilhamento de informações, acesso a locais restritos IrDA 1 m 9.6 kbps - 16 Mbps Infravermelho Baixo Transmissão de dados entre dispositivos móveis, controle remoto de dispositivos Observe que as tecnologias WPAN variam em termos de alcance, taxa de transferência, frequência de operação, consumo de energia e aplicações. Cada tecnologia é projetada para um conjunto específico de requisitos de comunicação sem fio, e cabe ao desenvolvedor escolher a tecnologia mais adequada para sua aplicação.2. WLAN (Wireless Local Area Network)As redes WLAN são redes sem fio que permitem a conexão de dispositivos a uma rede local através de um ponto de acesso sem fio (WAP) ou roteador. Eles são baseados na especificação IEEE 802.11 e são usados principalmente para conectar dispositivos em uma rede local, como computadores, smartphones, tablets, impressoras, etc. O Wi-Fi é uma das tecnologias mais populares para implementar redes WLAN. Ele permite que dispositivos sem fio se conectem à Internet ou a outras redes por meio de pontos de acesso sem fio (WAPs) ou roteadores Wi-Fi. O Wi-Fi usa a faixa de frequência de 2,4 GHz ou 5 GHz para transmitir dados sem fio.Tabela comparativa WLANAqui está uma tabela comparativa das tecnologias WLAN mais comuns: Tecnologia Frequência Velocidade máxima Alcance máximo Padrão 802.11a 5 GHz 54 Mbps 30 metros IEEE 802.11b 2,4 GHz 11 Mbps 100 metros IEEE 802.11g 2,4 GHz 54 Mbps 100 metros IEEE 802.11n 2,4/5 GHz 600 Mbps 70 metros IEEE 802.11ac 5 GHz 1,3 Gbps 35 metros IEEE 802.11ax 2,4/5 GHz 10 Gbps 40 metros IEEE Observe que a velocidade, alcance e frequência variam entre as diferentes tecnologias. Por exemplo, o 802.11b usa a frequência de 2,4 GHz e oferece uma velocidade máxima de 11 Mbps, enquanto o 802.11ax é capaz de alcançar velocidades de até 10 Gbps e usa tanto a frequência de 2,4 GHz quanto de 5 GHz. Além disso, o alcance máximo também varia, com o 802.11a oferecendo um alcance de apenas 30 metros, enquanto o 802.11n oferece um alcance máximo de 70 metros.3. WMAN (Wireless Metropolitan Area Network)O WMAN é uma rede sem fio de área metropolitana que permite a conexão de dispositivos em uma área geográfica maior do que a cobertura de uma WLAN. O WiMAX (Worldwide Interoperability for Microwave Access) é uma tecnologia de rede sem fio que pode ser usada para implementar redes WMAN. O WiMAX usa a tecnologia IEEE 802.16 para permitir a transmissão de dados em longas distâncias, geralmente em uma distância de até 30 milhas (48 km). Ele usa a faixa de frequência de 2 GHz a 11 GHz e pode oferecer taxas de transferência de dados de até 70 Mbps.Tabela comparativa WMANAqui está uma tabela comparando as tecnologias WMAN: Tecnologia Padrão Velocidade de Dados Frequência Alcance WiMAX IEEE 802.16 Até 1 Gbps 2-66 GHz Até 50 km LMDS IEEE 802.20 Até 155 Mbps 28 GHz Até 5 km MMDS IEEE 802.20 Até 50 Mbps 2.5-2.7 GHz Até 10 km O WiMAX é a tecnologia mais popular para redes WMAN e pode fornecer velocidades de dados de até 1 Gbps em uma distância de até 50 km. O LMDS (Local Multipoint Distribution System) opera na faixa de frequência de 28 GHz e pode fornecer velocidades de dados de até 155 Mbps em uma distância de até 5 km. Já o MMDS (Multichannel Multipoint Distribution Service) opera na faixa de frequência de 2,5 a 2,7 GHz e pode fornecer velocidades de dados de até 50 Mbps em uma distância de até 10 km.Em geral, as tecnologias WMAN têm maior alcance e velocidades de dados mais altas do que as tecnologias WPAN e WLAN, mas geralmente requerem equipamentos mais caros e complexos para serem instaladas e configuradas.Em resumo, WPAN é uma rede sem fio de curto alcance usada para conectar dispositivos pessoais, WLAN é usada para conectar dispositivos em uma rede local e WMAN é usada para conectar dispositivos em uma área geográfica maior. As tecnologias populares incluem o Bluetooth para WPAN, o Wi-Fi para WLAN e o WiMAX para WMAN." }, { "title": "Engenharia e Ciências da Computação", "url": "/aulas/posts/engenharia-e-ciencias-da-computacao/", "categories": "AULAS, PLANEJAMENTO DE CARREIRA", "tags": "planejamento, carreira, graduação", "date": "2023-03-27 10:00:00 -0300", "snippet": "ENGENHARIA DA COMPUTAÇÃOSOBRAL - UFCLink: https://prograd.ufc.br/pt/cursos-de-graduacao/engenharia-da-computacao-sobral/Matriz Curricular: PresencialDados CurricularGraduaçãoTipo bacharelado;Duraçã...", "content": "ENGENHARIA DA COMPUTAÇÃOSOBRAL - UFCLink: https://prograd.ufc.br/pt/cursos-de-graduacao/engenharia-da-computacao-sobral/Matriz Curricular: PresencialDados CurricularGraduaçãoTipo bacharelado;Duração de 5 anos;Cursado de tempo integral (na maioria dos casos);Profissão e mercadoO profissional formado em Engenharia da Computação é capaz de projetar e construir hardware e software.Hardware(teclado, mouse, monitor):Nessa área, o engenheiro de computação faz a integração de circuitos eletrônicos da máquina e desenvolve placas de ligação entre o equipamento e seus acessórios.Na área de desenvolvimento de software o engenheiro da computação cria programas de computadores e aplicativos para os mais diversos fins.Pode atuar em:Automação industrial e robótica;Gerenciamento de Redes de Computadores;Carreira acadêmica (Ministrar aulas)Perfil do profissionalTer afinidade com matemática;Gostar de tecnologia e linguagens de programação;Estar sempre atualizado para se manter no mercado;Mercado de trabalhoEm alta (constante crescimento);Profissional versátil (atua em vários setores da indústria);Principais indústrias:Automobilística;Informática;Farmacêutica;Telecomunicações, Bancos;Comércio eletrônico e consultoria tecnológica.As regiões Sul e Sudeste concentram o maior número de vagasSalário inicial: 4.211,00Podendo ganhar até: 8.052,00. A média salarial para Engenheiro de Computação no Brasil é de R$ 6.526,00.CIÊNCIAS DA COMPUTAÇÃOUVA - Sobral Link: http://www.uvanet.br/cursos/texto_curso.php?id_coordenacao=4&amp;campo=perfilGraduação Bacharelado (4 a 5 anos);Atua basicamente na elaboração de programas de informática;Um cientista da computação, como é chamado o profissional formado em Ciência da Computação, pode ser contratado para trabalhar em uma equipe de desenvolvedores, criando software de acordo com a necessidade dos clientes.Também pode atuar no departamento de Pesquisa e Desenvolvimento (P&amp;D)de uma empresa.MercadoAnalista de Sistemas (elabora documentos ou especifica requisitos de sistemas);Arquiteto de Software (modela sistemas);Gerente de TI (gerencia projetos);Docência ou Pesquisa (Professor ou Desenvolve pesquisas)Bastante amplo no país;Setor industrial absorve muitos profissionais formados nessa área;Autônomos e Professor;Perfil profissionalHabilidades com dispositivos tecnológicos;Gostar de matemática;Acompanhar novas tecnologias e tendências do setor;Ser dinâmico e ter muita curiosidade;SalárioGanho inicial (média mensal)Em pequenas ou médias empresas: de R$ 2 mil a R$ 4 mil.Em grandes empresas: de R$ 2 mil a R$ 4,5 mil.Ganho escalão intermediário (média mensal)Em pequenas ou médias empresas: de R$ 5 mil a R$ 9 mil.Em grandes empresas: de R$ 6 mil a R$ 11 mil.Ganho no auge (média mensal)Em pequenas ou médias empresas: de R$ 9 mil a R$ 14 mil.Em grandes empresas: de R$ 10 mil a R$ 15 mil.O salário médio de um Cientista da computação no Brasil é de R$ 2.911." }, { "title": "Protoboard tensão e corrente", "url": "/aulas/posts/protoboard-tensao-corrente/", "categories": "AULAS, NOÇÕES DE ROBÓTICA", "tags": "arduino, robótica, curso, eletricidade, eletrônica", "date": "2023-03-27 09:00:00 -0300", "snippet": "O Arduino é uma plataforma de prototipagem eletrônica bastante popular, que permite a criação de projetos de automação, robótica, Internet das Coisas (IoT), entre outros. Uma das principais vantage...", "content": "O Arduino é uma plataforma de prototipagem eletrônica bastante popular, que permite a criação de projetos de automação, robótica, Internet das Coisas (IoT), entre outros. Uma das principais vantagens do Arduino é a sua flexibilidade, que permite a conexão de diversos componentes eletrônicos, como sensores, atuadores e displays.ProtoboardProtoboard usado para conexõesO Protoboard, também conhecido como breadboard, é uma placa reutilizável muito utilizada em projetos eletrônicos para a montagem de protótipos sem a necessidade de solda. Ele é composto por uma base de plástico com orifícios para a conexão de componentes eletrônicos, como resistores, capacitores, diodos, transistores, entre outros.A placa protoboard é composta por uma série de blocos de plástico perfurados, interligados por lâminas finas de uma liga metálica de cobre, estanho e fósforo. Cada bloco é composto por uma série de orifícios, geralmente em linhas de cinco furos, que permitem a conexão de componentes eletrônicos por meio de jumpers, que são fios com conectores nas extremidades.A grande vantagem do protoboard é a facilidade de montagem e desmontagem dos circuitos, permitindo a reutilização dos componentes eletrônicos em diferentes projetos. Além disso, ele oferece uma grande flexibilidade na construção de circuitos, permitindo testar diferentes configurações antes de realizar a soldagem definitiva.No entanto, é importante observar algumas limitações do protoboard em relação à corrente, tensão e resistência dos componentes eletrônicos que podem ser conectados a ele. A corrente máxima suportada pelo protoboard é da ordem de algumas dezenas de mA, o que significa que componentes que demandem correntes mais elevadas devem ser conectados diretamente a fontes de alimentação ou por meio de módulos intermediários. Em relação à tensão, o protoboard suporta normalmente valores de até 5V, que é a tensão de operação padrão do Arduino. Caso seja necessário utilizar tensões mais elevadas, é recomendável utilizar circuitos reguladores de tensão ou módulos de isolamento.Em resumo, o protoboard é uma placa reutilizável muito útil para a construção de protótipos de circuitos eletrônicos sem a necessidade de solda. Ele oferece grande flexibilidade na construção de circuitos, mas é importante observar suas limitações em relação à corrente, tensão e resistência dos componentes eletrônicos que podem ser conectados a ele.Tensão elétricaA tensão elétrica, também conhecida como diferença de potencial (DDP) ou voltagem, é uma grandeza física que mede a diferença de potencial elétrico entre dois pontos em um circuito elétrico. Essa diferença de potencial pode ser compreendida como a energia elétrica potencial por unidade de carga elétrica entre os dois pontos.A unidade de medida da tensão elétrica é o volt (V), que é equivalente a joules por coulomb (J/C). Ela é medida por um dispositivo chamado voltímetro, que é conectado em paralelo ao circuito elétrico, ou seja, entre os dois pontos onde se deseja medir a diferença de potencial.A diferença de potencial elétrico entre dois pontos em um circuito elétrico é criada pela presença de um campo elétrico. Essa diferença de potencial é igual ao trabalho que deve ser feito por unidade de carga elétrica para mover uma carga de um ponto a outro contra o campo elétrico presente no circuito. Isso significa que quanto maior for a diferença de potencial elétrico entre os dois pontos, maior será a energia necessária para movimentar a carga elétrica de um ponto a outro.A tensão elétrica é uma grandeza muito importante em circuitos elétricos, pois é responsável por movimentar as cargas elétricas pelos condutores e pelos componentes do circuito. Por exemplo, uma bateria é um dispositivo que fornece uma tensão elétrica entre seus terminais, permitindo que a corrente elétrica flua pelo circuito. O conhecimento da tensão elétrica em um circuito é fundamental para o dimensionamento correto dos componentes, garantindo o funcionamento adequado do circuito.Corrente elétricaA corrente elétrica é o movimento ordenado de partículas portadoras de carga elétrica em um condutor, como elétrons em um fio metálico, quando há uma diferença de potencial elétrico entre as extremidades do condutor. A intensidade da corrente elétrica é medida em ampere (A), que é a quantidade de carga elétrica que passa por um ponto do circuito por unidade de tempo.A corrente elétrica é produzida por uma diferença de potencial elétrico entre dois pontos, que é medida em volts (V), e o material do condutor que oferece menor ou maior resistência ao fluxo de elétrons. É importante notar que a corrente elétrica flui sempre do potencial mais elevado para o potencial mais baixo.A corrente elétrica produz um campo magnético, que pode ser utilizado para criar um eletroímã ou para fazer um motor elétrico funcionar. O campo magnético é produzido pela movimentação das cargas elétricas em um condutor. O sentido da corrente elétrica determina o sentido do campo magnético produzido.Para medir a corrente elétrica em um circuito, é necessário utilizar um amperímetro, que é um instrumento que se conecta em série com o circuito. Para medir a diferença de potencial elétrico entre dois pontos, pode-se utilizar um voltímetro, que é um instrumento que se conecta em paralelo com o circuito. É importante notar que a medição da tensão elétrica deve ser feita entre dois pontos, e um desses pontos pode ser a referência comum do circuito, que geralmente é o terra.Corrente contínuaGráfico da corrente pelo tempoA corrente contínua (CC) é um tipo de corrente elétrica que flui sempre na mesma direção, sem mudar de sentido. Esse tipo de corrente é gerado por fontes de energia elétrica que produzem uma tensão constante em um circuito, como baterias, pilhas, dínamos, células solares e fontes de alimentação com retificação de corrente alternada.Em um circuito de corrente contínua, os elétrons fluem do polo negativo da fonte para o polo positivo, passando pelos componentes do circuito, como resistores, capacitores e transistores, e voltando ao polo negativo. Essa direção constante do fluxo de elétrons é o que caracteriza a corrente contínua.A corrente contínua é amplamente utilizada em eletrônica, pois muitos dispositivos eletrônicos e digitais exigem uma fonte de alimentação constante e estável, o que é fornecido por baterias e outras fontes de corrente contínua. No entanto, a corrente contínua não é adequada para transmissão de energia elétrica em longas distâncias, já que a perda de energia devido à resistência dos cabos é muito alta. Para a transmissão de energia elétrica em longas distâncias, é usado o sistema de corrente alternada (CA).Corrente alternadaGráfico da corrente pelo tempoA corrente alternada é a forma mais comum de energia elétrica utilizada em residências, comércios e indústrias. A sua principal característica é que a direção do fluxo de elétrons muda continuamente, invertendo seu sentido em intervalos regulares de tempo, geralmente 50 ou 60 vezes por segundo, dependendo do país. Isso ocorre porque a corrente é gerada por meio de um gerador que é constituído por um conjunto de bobinas e um rotor que gira, produzindo uma corrente elétrica que varia sua polaridade.A forma de onda da corrente alternada é geralmente senoidal, o que significa que a intensidade da corrente elétrica varia em uma curva que se assemelha a um seno ou um cosseno. A forma de onda senoidal é a mais utilizada em circuitos de potência porque é a forma mais eficiente de transmissão de energia. No entanto, em alguns circuitos de controle, podem ser utilizadas outras formas de onda, como triangular ou quadrada.Ao contrário da corrente contínua, a corrente alternada é composta por fases, que são diferentes formas de onda que estão defasadas no tempo em relação umas às outras. Isso é necessário para que haja um fluxo de energia constante e contínuo no circuito. Além disso, a corrente alternada é geralmente transmitida em três fios, cada um correspondendo a uma fase, além de um fio neutro que é comum a todas as fases. Esse sistema é conhecido como trifásico e é amplamente utilizado em aplicações industriais.CalculandoCálculo da tensão: Se a resistência (R) e a corrente (I) são conhecidas, a tensão (V) pode ser calculada pela fórmula V = R * I. Se a tensão em um ponto do circuito é conhecida, a tensão em outro ponto pode ser calculada usando a lei de Ohm: V = I * R, onde I é a corrente que flui entre os dois pontos e R é a resistência entre os dois pontos.Cálculo da corrente: Se a resistência (R) e a tensão (V) são conhecidas, a corrente (I) pode ser calculada pela fórmula I = V/R. Se a corrente que flui em um componente é conhecida, a corrente em outro componente pode ser calculada usando a lei de Ohm: I = V / R, onde V é a tensão entre os dois componentes e R é a resistência entre os dois componentes.Referências Apostila de Robótica" }, { "title": "Estruturas de controle", "url": "/aulas/posts/estruturas-de-controle/", "categories": "DESENVOLVIMENTO, PROGRAMADOR", "tags": "Senac, lógica, programador, programação, exercícios", "date": "2023-03-24 17:00:00 -0300", "snippet": "Permite a escolha de um grupo de ações e estruturas a ser executado quando determinadas condições, representadas por expressões lógicas, são ou não satisfeitas.SIMPLES ( SE / ENTÃO / INICIO / ...", "content": "Permite a escolha de um grupo de ações e estruturas a ser executado quando determinadas condições, representadas por expressões lógicas, são ou não satisfeitas.SIMPLES ( SE / ENTÃO / INICIO / FIM )\t\t| nome do programa\t\t|\t\t| declaração de variáveis\t\t| \t\tinicio\t\t| \t\t| se &lt; condição &gt; entao; | inicio | comando a;\t\t|\t .\t\t| comando n;\t\t| fim;\t\t| .\t\t| .\t\t| comando x;\t\tfim.CondiçãoÉ uma expressão lógica que, quando inspecionada, pode gerar um resultado falso ou verdadeiro. Se &lt; condição &gt; for verdadeira a cláusula que está entre o “início do se” e o “fim do se” será executada. Se &lt; condição &gt; for falsa a cláusula que está entre o “início do se” e o “fim do se” não será executada.Exercícios Faça um algoritmo para ler dois números e imprimir o maior, o menor ou então dizer se são iguais. Faça um algoritmo para ler um número inteiro e dizer se o número lido é par ou impar. Faça um algoritmo para ler dois números A e B e dizer se A é divisível por B. Faça um algoritmo para ler dois números e imprimi-los em ordem crescente. Faça um algoritmo para ler três números e imprimir o maior.DESAFIO01- Faça um algoritmo para ler três números e imprimir se estes podem ou não formar um triângulo.Observação - Para formar os lados de um triângulo cada um dos valores tem que ser menor que a soma dos outros dois.02- Faça um algoritmo para ler três números e se estes poderem formar um triângulo dizer se o triângulo é “EQUILÁTERO”, “ISÓCELES” OU “ESCALENO”.03- Faça um algoritmo que leia as três notas, as faltas e o nome de um aluno e imprima sua situação. ( “APROVADO”, “REPROVADO POR FALTA” ou “REPROVADO POR MÉDIA” )Observação - A média para aprovação é 5.0 e o limite de faltas é 17.ExemplosTeste se um valor digitado é positivo ou não:programa seleção_simples;variáveisvalor: real;inicio escreva(´digite um valor negativo´); leia ( valor ); se valor &gt; 0 entao; inicio escreva(´foi digitado um valor positivo´); fim ; se valor &lt; 0 entao; inicio escreva(´foi digitado um valor negativo´); fim; fim.MELHORAR O ALGORITMO.programa seleção_simples;variáveisvalor: real;inicio escreva(´digite um valor negativo´); leia ( valor ); se valor &gt; 0 entao; inicio escreva(´foi digitado um valor positivo que vale´, valor); fim ; se valor = 0 entao; inicio escreva(´foi digitado o valor zero´); fim ; se valor &lt; 0 entao; inicio escreva(´foi digitado um valor negativo que vale´, valor); fim; fim.Exercício para sala de aulaFazer o exercício do peso ideal testando uma altura válida.programa pesoideal;variáveisALT, PESOIDH, PESOIDM: real;inicio escreva( ´digite uma altura´); leia ( ALT ); se ALT &lt;= 2.50 e ALT &gt;= 0.60 entao; inicio PESOIDH = ( 72.7 * ALT ) - 58; PESOIDM = ( 62.1 * ALT ) - 44.7; escreva(´Se a altura for de um homem seu peso ideal e ´, PESOIDH, \"Kg\"); escreva(´Se a altura for de uma mulher seu peso ideal e ´, PESOIDM, \"Kg\"); fim; se ALT &gt; 2.50 ou ALT &lt; 0.60 entao; inicio escreva( ´Altura invalida´); fim;fim.Exemplo de situação do aluno em PascalProgram situacao_aluno;var nt1, nt2, nt3, media : real; faltas : integer; nome : string ;begin writel'DIGITE O NOME DO ALUNO: '); readIn(nome); writel'DIGITE AGORA SUA 1ª NOTA: '); readIn(nt1); writel'DIGITE AGORA SUA 2ª NOTA: '); readIn(nt2); writel'DIGITE AGORA SUA 3ª NOTA: '); readIn(nt3); writel'DIGITE AGORA SUAS FALTAS: '); readIn(faltas); if (nt1 &gt;= 0) and (nt1&lt;=10 ) and (nt2 &gt;= 0) and (nt2&lt;=10) and (nt3 &gt;= 0) and (nt3&lt;=10 ) then begin if faltas &gt;= 0 then begin media := ( nt1 + nt2 + nt3 ) / 3; if ( media &gt;= 5 ) and ( faltas &lt;= 17 ) then begin writeln('O aluno ´, nome, ´está aprovado com média de ´, media ); end else if media &lt; 5 then begin writeln('O aluno ´, nome, ´está reprovado por média com média de ´, media ); end else begin writeln('O aluno ´, nome, ´está reprovado por falta com ´, faltas, ´ faltas. ); end else begin writeln('NÃO EXISTE NÚMERO DE FALTAS NEGATIVO'); end else begin writeln('AS NOTAS TEM QUE ESTAR ENTRE ZERO E DEZ'); end;end.Referências Portugol Webstudio editor online" }, { "title": "Exercícios de lógica", "url": "/aulas/posts/exercicios-de-logica/", "categories": "DESENVOLVIMENTO, PROGRAMADOR", "tags": "Senac, lógica, programador, programação, exercícios, portugol", "date": "2023-03-23 18:30:00 -0300", "snippet": "Resolva os exercícios usando a linguagem Portugol ou VisuAlg. Construa um algoritmo que calcule a média aritmética entre quatro notas quaisquer fornecidas pelo usuário. Faça um algoritmo para ler...", "content": "Resolva os exercícios usando a linguagem Portugol ou VisuAlg. Construa um algoritmo que calcule a média aritmética entre quatro notas quaisquer fornecidas pelo usuário. Faça um algoritmo para ler nove número inteiros quaisquer. Tirar a média aritmética dos três primeiros, depois a média dos outros três e por fim a média dos três últimos. Escreva as três médias e a média das três médias. Faça um algoritmo para calcular o peso ideal de uma pessoa sabendo sua altura. Faça um algoritmo para ler o raio e calcular o comprimento, a área e o volume de uma esfera. DADOS: comprimento = P = 2πR; área = A = πR2; volume = V = πR3; Faça um algoritmo para ler duas variáveis caracter e concatená-las em uma terceira. Faça um algoritmo para ler duas variáveis inteiras e trocar o conteúdo lido de uma pela outra.Resoluções sugeridas a seguir:Média aritméticaConstrua um algoritmo que calcule a média aritmética entre quatro notas quaisquer fornecidas pelo usuário.Resolução Nº1Programa média;variaveisN1, N2, N3, N4: real;inicioleia ( N1, N2, N3, N4 );escreva ( ( N1 + N2 + N3 + N4 ) / 4 );fimResolução Nº2Programa média;variaveisN1, N2, N3, N4, MEDIA: real;Inicioleia ( N1, N2, N3, N4 );MEDIA = ( N1 + N2 + N3 + N4 ) / 4;Escreva ( MEDIA );fimResolução Nº3Programa média;variaveisN1, N2, N3, N4, MEDIA: real;inicioleia ( N1, N2, N3, N4 );MEDIA = ( N1 + N2 + N3 + N4 ) / 4;Escreva ( \"A media aritmética do aluno nas quatro notas tiradas é \", MEDIA );fimDesafio Faça um algoritmo para ler nove número inteiros quaisquer. Tirar a média aritmética dos três primeiros, depois a média dos outros três e por fim a média dos três últimos. Escreva as três médias e a média das três médias.Resolução Nº1programa médiadasmédias;variáveisN1, N2, N3, N4, N5, N6, N7, N8, N9: inteiro;Inicioleia ( N1, N2, N3, N4, N5, N6, N7, N8, N9 );escreva(\"A media dos primeiro três números é \", ( N1 + N2 + N3 ) / 3);escreva(\"A media dos outros três números é , ( N4 + N5 + N6 ) / 3);escreva(\"A media dos últimos três números é \", ( N7 + N8 + N9 ) / 3);escreva(\"Media das medias \",((N1 + N2 + N3) / 3 + (N4 + N5 + N6) / 3 + (N7 + N8 + N9) / 3) / 3);fimResolução Nº2programa médiadasmédias;variáveisN1, N2, N3, N4, N5, N6, N7, N8, N9: inteiro;MEDIA1, MEDIA2, MEDIA3: real; inicioleia ( N1, N2, N3, N4, N5, N6, N7, N8, N9 );MEDIA1 =( N1 + N2 + N3 ) / 3;MEDIA2 =( N4 + N5 + N6 ) / 3;MEDIA3 =( N7 + N8 + N9 ) / 3;escreva(\"A media dos primeiro três números é \", MEDIA1);escreva(\"A media dos outros três números é \", MEDIA2;escreva(\"A media dos últimos três números é \", MEDIA3);escreva(\"A media das medias é \",(MEDIA1 + MEDIA2 + MEDIA3) / 3);fimResolução Nº3programa médiadasmédias;variáveisN1, N2, N3, N4, N5, N6, N7, N8, N9: inteiro;MEDIA1, MEDIA2, MEDIA3, MMEDIA: real; inicioleia ( N1, N2, N3, N4, N5, N6, N7, N8, N9 );MEDIA1 =( N1 + N2 + N3 ) / 3;MEDIA2 =( N4 + N5 + N6 ) / 3;MEDIA3 =( N7 + N8 + N9 ) / 3;MMEDIA =( MEDIA1 + MEDIA2 + MEDIA3 ) / 3;escreva(\"A media dos primeiro três números e \", MEDIA1);escreva(\"A media dos outros três números e \", MEDIA2);escreva(\"A media dos últimos três números e \", MEDIA3);escreva(\"A media das medias e \",MMEDIA);fimPeso idealFaça um algoritmo para calcular o peso ideal de uma pessoa sabendo sua altura.DADOS: para homens ( 72,7 * altura ) = 58; para mulheres ( 62,1 * altura ) = 44,7.Resolução Nº1programa pesoideal;variávelALT: real;inicioleia ( ALT );escreva(\"Se a altura lida for de um homem seu peso ideal será de \", ( 72,7 * ALT ) - 58 ),\"Kg);escreva(\"Se a altura lida for de uma mulher seu peso ideal será de\",(62,1 * ALT) - 44,7), \"Kg\");fimResolução Nº2programa pesoideal;variáveisALT, ALTH, ALTM: real;Inicioleia ( ALT );ALTH = ( 72,7 * ALT ) - 58;ALTM = ( 62,1 * ALT ) - 44,7;escreva(\"Se a altura lida for de um homem seu peso ideal será de \", ALTH, \"Kg\");escreva(\"Se a altura lida for de uma mulher seu peso ideal será de \", ALTM, \"Kg\");fimCálculo de esferaFaça um algoritmo para ler o raio e calcular o comprimento, a área e o volume de uma esfera.DADOS: comprimento = P = 2πR área = A = πR2 volume = V = πR3Resolução Nº1programa calculodaesfera;constantepi = 3,1416variávelraio: real;Inicio leia ( raio ); escreva(\"O comprimento da esfera é \", 2 * pi * raio); escreva(\"A área da esfera é \", pi * raio ** 2 ); escreva(\"O volume da esfera é \", ( 3 * ( pi * raio ** 3 ) ) / 4);fimResolução Nº2programa calculodaesfera;constantepi = 3,1416variávelraio, comp, area, vol : real;Inicio escreva(\"Favor digitar o raio da esfera\"); leia ( raio ); comp = 2 * pi * raio; area = pi * raio ** 2; vol = ( 3 * ( pi * raio ** 3 ) ) / 4; escreva(\"O comprimento da esfera é \", comp ); escreva(\"A área da esfera é \", area ); escreva(\"O volume da esfera é \", vol );fim.Trocas de valoresFaça um algoritmo para ler duas variáveis caracter e concatená-las em uma terceira.programa concatenar;variávelpalavra1, palavra2, conca : caracter ;Inicio escreva(\"Favor digitar as duas palavras\"); leia ( palavra1, palavra2 ); conca = palavra1 + palavra2 ; escreva(\"As duas palavras são\", palavra1 , \" e \", palavra2 ); escreva(\"A concatenação das duas palavras é\" , conca );fim.Faça um algoritmo para ler duas variáveis inteiras e trocar o conteúdo lido de uma pela outra.programa trocanumero;variáveln1, n2, aux : inteiro ;Inicio escreva(\"Favor digitar os dois numeros\"); leia ( n1, n2 ); aux = n2 ; n2 = n1 ; n1 = aux;fim.Referências Programação em blocos com code.org Programação em blocos com Scratch Portugol Webstudio editor online" }, { "title": "Expressões matemáticas", "url": "/aulas/posts/expressoes-matematicas/", "categories": "DESENVOLVIMENTO, PROGRAMADOR", "tags": "Senac, lógica, programador, programação, portugol", "date": "2023-03-22 18:30:00 -0300", "snippet": "Chamamos de operadores matemáticos ou aritméticos o conjunto de símbolos que representa as operações básicas da matemática, a saber: + adição ; - subtração ; * multiplicação ; / divisão ; ** potenc...", "content": "Chamamos de operadores matemáticos ou aritméticos o conjunto de símbolos que representa as operações básicas da matemática, a saber: + adição ; - subtração ; * multiplicação ; / divisão ; ** potenciação ; // radiciação.Exemplos: -2 + 2 ; ABC / 5 ; aula * ABC + XPTO - 8.Funções matemáticas que podem ser usadas MOD( resto da divisão ) DIV( quociente inteiro da divisão ) INT( x ) - resulta a parte inteira de um número X. FRAC( x ) - resulta a parte fracionária de X. ABS( x ) - resulta o valor absoluto de X.Exemplos: 15 DIV 7 resulta 2 15 MOD 7 resulta 1 INT( 34.567 ) resulta 34 FRAC( 546.34 ) resulta 34 ABS ( -34 ) resulta 34PRIORIDADESNa resolução das expressões aritméticas, as operações e funções matemáticas guardam entre si uma hierarquia. Parênteses mais internos. Funções matemáticas.Exercícios:3 ** 2 - 4 / 2 + ABS( 5 - 3 * 5 ) / 2( FRAC( A / B ) + ABS( C ) ) ** 3 onde A = 5 , B = 10 e C = -43 + ( 27 // 3 ) * (( 3 MOD D + 0.5 ) * 2 ) onde D = 1.5 OPERADORES RELACIONAIS com EXPRESSÕES LÓGICAS= ( igual a )ou &lt;&gt; ( diferente) ( maior )&lt; ( menor )Exemplo:2 * 4 = 24 / 38 = 8V OPERADORES LÓGICOSE conjunçãoOU disjunçãoNÃO negaçãoExemplo2 &lt; 5 e 15 / 3 = 5V e 5 = 5V e VV PRIORIDADES - Na resolução das expressões lógicas, as operações e funções lógicas guardam entre si uma hirarquia.1 - NÃO2 - E OU PRIORIDADES ENTRE TODOS OS OPERADORESParênteses mais internos;Funções matemáticas; ( MOD - FRAC - DIV ….)Operadores aritméticos; ( ** - // - * - / - + - - )Operadores relacionais; ( # - = - &gt; - &lt; )Operadores lógicos.( E - OU - NÃO )Exercícios:NÃO 2 ** 3 &lt; 4 ** 2 OU ABS( INT( -15 / 2 ) ) &lt; 103 * ( C / 4 + 5) &lt; - 8 * 3 + ( 15 MOD 8 - 3 ) OU 5 ** 2 &gt; INT( C * 0.7 ) onde C = 20NÃO L OU V E ABS( C ) &gt;= A DIV A onde L = .F. C = -3.5 e A &lt; &gt; 0Exercícios para casaA ** 3 / B + 5 - C * D &gt; C * D + A - B OU A // 2 / D &lt; 18 - A onde A = 9 , B = 3 , C = 4 e D = 25 + A * B ≥ 16 // 4 - D E 6 / A * C / ( A - B ) = 234 OU A / 4 - ( 7 + 5 * C ) &lt; A ** 2 - 3 * BCOMANDO DE ATRIBUIÇÃOFornece um valor a uma certa variável tendo que este valor ser compatível com o tipo de variável que foi declarada.Exemplológico: A, B;Inteiro: X, AULA;A = Verdadeiro;X = 15;AULA = 8 + 13 DIV 5;B = 5 &gt; 3;COMANDOS DE ENTRADA DE DADOSExemplo: Leia ( X );Leia ( X, AULA, B );COMANDOS DE SAÍDA DE DADOSExemplo: Escreva ( X );Escreva ( X, AULA, B );Escreva ( “O resultado do peso do aluno é de “, PESO, “ quilos” );BLOCOSUm algoritmo pode ser visto como um bloco. Ele serve para definir os limites nos quais as variáveis declaradas em seu interior são conhecidas e processadas.Para delimitar um bloco ( algoritmo ) utilizamos os delimitadores: inicio e fim.Exemplo:| nome do programa|| declaração de variáveis|inicio||| sequência de ações||| resultado|fim.ESTRUTURAS DE CONTROLESEQUENCIAL| nome do programa|| declaração de variáveis|inicio|| comando a;| comando b;| comando c;| .| comando n;fim.Exercício: Construa um algoritmo que calcule a média aritmética entre quatro notas quaisquer fornecidas pelo usuário.Resolução em Portugol:programa{\tfuncao inicio()\t{\t\treal N1, N2, N3, N4, media\t\tescreva(\"Digite o primeiro número: \")\t\tleia(N1)\t\tescreva(\"Digite o segundo número: \")\t\tleia(N2) escreva(\"Digite o terceiro número: \")\t\tleia(N3) escreva(\"Digite o quarto número: \")\t\tleia(N4) media = ( N1 + N2 + N3 + N4 ) / 4\t\tescreva (\"A media aritmética do aluno nas quatro notas tiradas é: \", media )\t}}IDE do Portugol Studio online" }, { "title": "Introdução à Lógica de programação", "url": "/aulas/posts/introducao-a-logica/", "categories": "DESENVOLVIMENTO, PROGRAMADOR", "tags": "Senac, lógica, programador, programação", "date": "2023-03-21 18:30:00 -0300", "snippet": "lógica é a arte de pensar corretamente. Corrigir o raciocínio. Colocar ordem no pensamento.Principais conceitos O QUE É ALGORITMO?Algoritmo é uma sequência de passos que visa atingir um objetivo p...", "content": "lógica é a arte de pensar corretamente. Corrigir o raciocínio. Colocar ordem no pensamento.Principais conceitos O QUE É ALGORITMO?Algoritmo é uma sequência de passos que visa atingir um objetivo pré-definido e bem definido. O QUE É PADRÃO DE COMPORTAMENTO?Padrão de comportamento é o algoritmo formado e bem definido que pode ser seguido por qualquer pessoa que seu objetivo será alcançado com certeza. OBSTÁCULOS DE UM PROGRAMADOR.O maior problema que envolve a construção de algoritmo é a complexidade. Portanto, quando tentamos construir um, o objetivo principal é vencer a complexidade do problema a ser solucionado. O QUE É COMPLEXIDADE?Complexidade representa a quantidade de situações diferentes que um problema pode apresentar. Existem várias maneiras de reduzir a complexidade, ou evitar que esta cresça. Vamos, no momento tentar somente evitar que ela cresça. O QUE É QUESTIONAMENTO ERRÔNEO?Um dos maiores responsáveis, talvez o maior, pelo aumento desmedido da complexidade é a forma errônea de auto questionar-se a respeito de um dado problema.Como é um sorvete? Deliciosa sobremesa gelada, com formato esférico, normalmente acompanhada de um cone comestível, em diversas cores e sabores.Gordura vegetal hidrogenada, leite em pó, aromatizantes, corantes e estabilizantes. O QUE É LEGIBILIDADE?Legibilidade é a capacidade de compreensão do algoritmo por qualquer observador. É a clareza com que a lógica do mesmo algoritmo está exposta. Quanto mais legível for o algoritmo menor sua complexidade.Criando algoritmosMÉTODO PARA CONSTRUÇÃO DE ALGORITMO. Ler atentamente o enunciado. Retirar do enunciado a relação das entradas de dados. Retirar do enunciado a relação das saídas de dados. Determinar o que deve ser feito para transformar as entradas determinadas nas saídas especificadas. Construir o algoritmo. Executar o algoritmo.INFORMAÇÕESInformação é a matéria prima que faz com que seja necessária a existência dos computadores, pois eles são capazes de manipular e armazenar um grande volume de dados que vão gerar as informações.As informações são divididas em quatro tipos primitivos: informação inteira. 15, 0, 9, -3 informação real. 1,67, 0,00, -2,45 informação caractere. Formada por conjunto de caracteres alfanuméricos. “O menino disse não.” Informação lógica. Pode assumir somente duas informações. Verdadeira ou falsa. INFORMAÇÃO CONSTANTE - É aquela que não sofre nenhuma variação em seu conteúdo no decorrer do tempo. INFORMAÇÃO VARIÁVEL - É aquela que pode sofrer variação no seu conteúdo no decorrer do tempo. FORMAÇÃO DE IDENTIFICADORES - Nomes dados as informações variáveis. Devem começar por um caractere alfabético; Podem ser seguidos por mais caracteres e/ou numéricos; Não é permitido o uso de caracteres especiais; DECLARAÇÃO DE VARIÁVEIS - Precisamos sempre definir as variáveis especificando qual o material dos objetos que por lá podem ser armazenados.Exemplo: Inteiro - AULA; Real - ABC, XPTO, D123; Caractere - NOME, ENDEREÇO; lógico - NOTA, RESPOSTA.RESPOSTA é um local de memória que só pode conter valores do tipo lógico, ou seja, VERDADEIRO ou FALSO.AULA - é um local de memória que só pode conter valores inteiros. 543, 12333, -987777 💡 Observação importante - Não podemos definir duas variáveis com o mesmo nome em um mesmo algoritmo. NUNCA" }, { "title": "Elementos do Cabeamento estruturado - Patch Panel", "url": "/aulas/posts/elementos-do-cabeamento-estruturado-patch-pannel/", "categories": "AULAS, INFRAESTRUTURA DE REDES", "tags": "infraestrutura, conectores, cabeamento", "date": "2023-03-21 10:40:00 -0300", "snippet": "O patch panel é um dos elementos mais importantes do cabeamento estruturado e é responsável por fornecer uma conexão confiável e organizada entre a infraestrutura de cabeamento e os equipamentos de...", "content": "O patch panel é um dos elementos mais importantes do cabeamento estruturado e é responsável por fornecer uma conexão confiável e organizada entre a infraestrutura de cabeamento e os equipamentos de rede. Ele é instalado em um rack de equipamentos e permite a conexão dos cabos de rede que chegam da infraestrutura de cabeamento com os equipamentos de rede.Existem dois tipos principais de patch panel: o patch panel de conexão e o patch panel de distribuição. O patch panel de conexão é utilizado para conectar diretamente os cabos de rede aos equipamentos de rede, enquanto o patch panel de distribuição é utilizado para distribuir os sinais de rede para vários pontos de conexão.Os patch panels são geralmente equipados com conectores RJ45, que são utilizados para conectar os cabos de rede ao patch panel. Esses conectores podem ser de dois tipos: fêmea e macho. Os conectores fêmea são utilizados para conectar os cabos de rede aos equipamentos de rede, enquanto os conectores macho são utilizados para conectar os cabos de patch ao patch panel.Os patch panels são projetados para acomodar uma grande quantidade de cabos de rede, o que significa que eles podem ter várias portas, que variam de 12 a 48 portas ou mais, dependendo da necessidade de conexões de rede. Eles também podem ser categorizados de acordo com o tipo de cabo de rede que são capazes de suportar, como por exemplo Cat5e, Cat6 ou Cat6a.Além disso, os patch panels podem ter recursos adicionais, como a capacidade de gerenciar cabos, que ajuda a manter a organização do cabeamento e facilita a identificação de cabos e portas. Alguns patch panels também possuem indicadores de LED que permitem verificar rapidamente o status da conexão e detectar possíveis falhas na rede.Em resumo, o patch panel é um elemento essencial do cabeamento estruturado que fornece uma conexão organizada e confiável entre a infraestrutura de cabeamento e os equipamentos de rede. Ele é projetado para acomodar uma grande quantidade de cabos de rede e pode ter vários recursos adicionais para ajudar na gestão e identificação dos cabos e portas.Fibra ópticaOs patch panels de fibra óptica, assim como os de cobre, são usados ​​para interconectar e gerenciar cabos de fibra óptica em uma rede. Eles são projetados para acomodar conectores de fibra óptica, permitindo que as fibras ópticas sejam facilmente conectadas e desconectadas.Existem dois tipos principais de patch panels de fibra óptica: o patch panel de adaptador e o patch panel de pigtail. Patch panel de adaptador: o patch panel de adaptador é projetado para acomodar adaptadores de fibra óptica, que permitem que as fibras ópticas sejam conectadas por meio de plugues. Cada porta do patch panel é equipada com um adaptador que pode acomodar um plugue. Patch panel de pigtail: o patch panel de pigtail é projetado para acomodar cabos de pigtail de fibra óptica, que são cabos com um conector em uma extremidade e fibras nuas na outra. O cabo de pigtail é conectado ao patch panel e as fibras nuas são conectadas a uma bandeja de emenda para formar a conexão com outros cabos de fibra óptica. Os patch panels de fibra óptica são geralmente montados em racks e são alimentados por cabos de fibra óptica que são roteados por trás do rack para fornecer conectividade entre os dispositivos de rede. Eles são frequentemente usados ​​em data centers e outros ambientes de rede onde a velocidade e a largura de banda são cruciais.Referências" }, { "title": "Áreas de atuação em TI: Projetista de redes", "url": "/aulas/posts/projetista-de-redes/", "categories": "AULAS, PLANEJAMENTO DE CARREIRA", "tags": "planejamento, carreira, graduação", "date": "2023-03-21 10:00:00 -0300", "snippet": "Referências sobre atuação em projetos de redes:PROVEDORESOrganograma de um provedorCargo de tecnico de fibra opticaCONVENÇÕES COLETIVAS DE TRABALHO SEGUNDO SINDICATO DOS TRABALHADORES EM TELECOMUNI...", "content": "Referências sobre atuação em projetos de redes:PROVEDORESOrganograma de um provedorCargo de tecnico de fibra opticaCONVENÇÕES COLETIVAS DE TRABALHO SEGUNDO SINDICATO DOS TRABALHADORES EM TELECOMUNICAÇÕES E OPERADORAS DE MESAS TELEFÔNICAS DO ESTADO DO CEARÁ - SINTTEL-CEhttps://www.sinttelce.org.br/admin/_uploaded_files/20210323-154718-605a37b673038.pdfhttps://www.sinttelce.org.br/admin/_uploaded_files/20180927-125103-5bacd237c3046.pdfhttps://www.sinttelce.org.br/default/noticias_geral.php?c=708-ae0eb3eed39d2bcef4622b2499a05fe6&amp;t=&amp;acao=boletins&amp;relacionadas=boletins&amp;op=2PROJETO DE REDEShttps://www.softsell.com.br/projetista-de-redes-opticas-para-atuar-na-area-de-telecom-saiba-como-se-tornar-um/https://www.devmedia.com.br/projeto-de-redes-de-computadores-abordagem-top-down-revista-infra-magazine-8/26300https://www.fibracem.com/6-etapas-importantes-de-um-projeto-de-rede-optica-ftth/https://resources.workable.com/pt-br/tecnico-de-redes-descricao-do-trabalhohttps://blog.unyleya.edu.br/inicie-sua-carreira/analista-de-redes/" }, { "title": "Áreas de atuação em TI", "url": "/aulas/posts/areas-de-atuacao/", "categories": "AULAS, PLANEJAMENTO DE CARREIRA", "tags": "planejamento, carreira, graduação", "date": "2023-03-21 10:00:00 -0300", "snippet": "Principais áreas para um profissional de TI trabalhar. Área de Grande Ramificações; Inúmeras possibilidades de atuação; Profissional cada vez mais valorizado; Alta no mercado de trabalho.Áreas ...", "content": "Principais áreas para um profissional de TI trabalhar. Área de Grande Ramificações; Inúmeras possibilidades de atuação; Profissional cada vez mais valorizado; Alta no mercado de trabalho.Áreas de atuaçãoE-commerce Uso da internet para realizar operações: Comerciais e com Clientes; Valoriza o negócio; As lojas possuem além da loja física uma versão online; Um desenvolvedor de sistemas de comércio eletrônico é um dos profissionais mais requisitados no mercado atualmente. Média Salarial: Diretor: R$ 16.386 Gerente: R$ 4.637 Coordenador: R$ 2.898 Administrador de Banco de DadosO que faz? Sua principal função é a programação de dados e a manutenção dos mesmos nos ambientes de teste de homologação.Atribuições específicas Deve se responsabilizar pelo gerenciamento de todos os dados referentes à organização; Consulta e armazenamento de informações do sistema; Como chefe de segurança, o profissional administrador de banco de dados será o encarregado, também, pela criação de cópias de segurança e demais estratégias para a proteção de informações e restauração dos dados os quais tornou-se responsável.Outras tarefas de um administrador de banco de dados Suporte técnico para usuários e aplicativos ou hardwares; Estar atento às necessidades dos usuários; É importante saber identificar a necessidade de criação de dados e ter sensibilidade para ajustar as configurações e otimizar a solução de problemas.Para se tornar um administrador de banco de dados É necessário que o profissional de TI tenha amplo conhecimento de instalação e gerenciamento do banco de dados e de seus usuários. Deve saber efetuar e recuperar backups; Monitorar e ajustar a performance BD;Quanto ganha um administrador de banco de dados? Média salarial em pequenas empresas: R$2.310,16 Média salarial em grandes empresas em nível Master e com Certificações: R$9.531,66Profissão Administrador de Banco de DadosAlgumas organizações seguem um nível hierárquico para Administração de Banco de Dados, como: Analista de dados / Designers de banco de dados; DBA júnior; DBA Intermediário; DBA Sênior; Consultores em banco de dados; Gerente / Diretor da administração de banco de dados; Professor de Administração de banco de dados.Programação Área extremamente ampla. Vai de criação de softwares até a Segurança de rede; Decidir qual linguagem quer atuar e aprimorar seus conhecimentos;O que faz um programador? Desenvolve programas de computador, celular entre outros; Fundamental que ele entenda linguagens como: html, java, javascript, python, CSS, C, C++, SQL, dentre outras. A média salarial de um administrador de redes varia de acordo com sua formação e experiência, mas de acordo com o site Salario.com.br, a média salarial é de R$ 3.794,19.Administrador de Redes Comunica a empresa com o mundo por meio da internet. Faz todo gerenciamento das redes de uma organização. Elabora projetos de rede e as configura, além de fazer acompanhamento e manutenção da infraestrutura; O administrador deve organizar a instalação dos dispositivos, o que demanda um bom conhecimento de hardware. Entre os equipamentos que devem ser devidamente instalados, podemos indicar o servidor, hosts e roteadores. As atribuições desse profissional vão desde a segurança das redes até a prestação de suporte técnico a outras áreas.Perfil do Administrador de Redes Formação na área (nível técnico ou médio) dentro do campo de TI; Cursos: Gerenciamento de Redes ou Tecnólogo em Redes; Disposição para aprender (novos conhecimentos e habilitações); Certificações (testes de certificações); Comunicação; Profissão em alta no mercado;Administrador de Redes Média Salarial: Um Administrador de Redes ganha em média R$ 4.661,49 no mercado de trabalho brasileiro para uma jornada de trabalho de 42 horas semanais. Esses dados são de acordo com pesquisa do Salario.com.br junto a dados oficiais do Novo CAGED, eSocial e Empregador Web.Fonte:https://www.salario.com.br/profissao/administrador-de-redes-cbo-212310/Qualidade de Software São testadores: Certificam-se do funcionamento apropriado dos softwares utilizados pela empresa; Características de um bom profissional de qualidade: Foco: O profissional da qualidade precisa trabalhar fortemente essa característica. Isso porque ele lida com questões delicadas dentro de uma empresa. Organização: a organização é fundamental na área da qualidade. A sua importância aumenta ainda mais no setor, pois ele é o responsável por repassar isso para as outras áreas da empresa. Pensamento sistêmico: o pensamento sistêmico consiste na criação de uma forma de análise e de linguagem para compreender como o relacionamento entre os colaboradores modela o comportamento do sistema. Perfil integrador: O perfil integrador é uma característica importante em profissionais de diferentes áreas. Visão estratégica: A base de todo negócio deve ser a estratégia e o bom desenvolvimento dela. Como o profissional da qualidade é responsável por pontos estratégicos da empresa, precisa desenvolver essa característica constantemente, já que o mercado e as suas exigências mudam exponencialmente. Liderança: Como você já deve saber, a liderança não precisa ser apenas exercida por quem possui um cargo de chefia dentro de uma empresa. Aliás, esse talento pode (e deve!) ser desenvolvido pelos profissionais da qualidade, principalmente porque eles lidam de maneira direta com outros colaboradores.ConclusãoAs áreas de atuação de um profissional de TI são diversas e em constante expansão, o que proporciona uma grande variedade de possibilidades de carreira. É importante que o profissional esteja sempre se atualizando e aprimorando seus conhecimentos, para se manter competitivo no mercado de trabalho e acompanhar as novas tendências tecnológicas. Além disso, é importante que o profissional escolha a área que mais se identifica e que lhe traga satisfação pessoal, para que possa desempenhar seu trabalho com dedicação e excelência." }, { "title": "Programador de Sistemas", "url": "/aulas/posts/programador-de-sistemas/", "categories": "DESENVOLVIMENTO, PROGRAMADOR", "tags": "Senac, planejamento, programador, programação", "date": "2023-03-20 18:30:00 -0300", "snippet": "O Programador de Sistemas é o profissional que especifica, desenvolve, testa e implanta sistema de informação, contemplando requisitos de segurança e disponibilidade. Além disso, modela dados, docu...", "content": "O Programador de Sistemas é o profissional que especifica, desenvolve, testa e implanta sistema de informação, contemplando requisitos de segurança e disponibilidade. Além disso, modela dados, documenta e faz a manutenção em sistemas.Objetivo profissionalEste profissional possui um mercado de trabalho vasto e diversificado, atuando em empresas dos mais diferentes setores e segmentos e, ainda, de forma empreendedora, como autônomo prestando serviços a todas as organizações que façam uso de sistemas informatizados. Relaciona-se com equipes de desenvolvimento, outros profissionais de TI, bem como clientes e usuários de programas.Objetivos específicos Desenvolver sistemas de informação; Implementar banco de dados; Realizar testes e manutenção do sistema de informação.Organização curricularUC1: Desenvolver sistemas de informaçãoCarga horária: 72 horas.Competências: Planeja o desenvolvimento do software conforme análise de requisitos. Especifica as fases do desenvolvimento de acordo com o planejamento realizado. Cria algoritmos utilizando padrões de lógica de programação. Seleciona a metodologia e a linguagem de programação para o desenvolvimento do software conforme suas funcionalidades e características. Constrói aplicação, a partir da análise de requisitos, de acordo com as funcionalidades do sistema e linguagem de programação selecionada.Conhecimentos: Sistemas de informação: conceito e tipos.Elementos da Competência Regras de negócio: conceitos; tipos, características; requisitos funcionais e não funcionais. Lógica de Programação: conceito de algoritmo; algoritmos estruturados. Variáveis e constantes: expressões e operadores; estrutura condicional simples e composta; estrutura de repetição; vetores e matrizes. Ferramentas de desenvolvimento de software. Desenvolvimento colaborativo: conceito e ferramentas para o desenvolvimento de sistemas. Linguagem de programação orientada a objetos: classes, atributos, métodos, propriedades, herança, polimorfismo, encapsulamento e ambientes de programação (IDE). Planejamento: conceito, tipos de metodologias para o desenvolvimento de sistemas.UC2: Implementar banco de dadosCarga horária: 72 horas.Competências: Define a arquitetura de banco de dados, de acordo com a modelagem de dados. Planeja o banco de dados conforme as regras de negócio. Desenvolve estruturas de dados, de acordo com o planejamento definido. Modela o banco de dados de acordo com o planejamento definido.Indicadores Avalia a persistência dos dados gerados pelo software, verificando sua funcionalidade, conforme o planejamento definido. Operacionaliza atividades de atualização, permissões de acesso e cópias de segurança de acordo com o banco implantado.Conhecimentos: Modelagem de dados: definição, planejamento, ferramentas, levantamento de requisitos, dicionário de dados, modelo de dados relacional, Modelo de Entidade e Relacionamento (MER). Normalização de dados: níveis e aplicabilidade. Sistema Gerenciador de Banco de Dados (SGBD): conceito e arquitetura. Structured Query Language (SQL) - Linguagem estruturada de consulta: scripts Data DefinitionLanguage (DDL) - Linguagem de definição de dados;comandos de Data ManipulationLanguage (DML) - Linguagem de manipulação de dados. Gestão de dados: usuários, backup e recuperação de dados.UC3: Realizar testes e manutenção do sistema de informaçãoCarga horária: 36 horasCompetências: Utiliza diferentes metodologias testes, de acordo com funcionalidade do sistema. Tabula o resultado, de acordo com as informações obtidas no teste realizado. Realiza ajustes e ações corretivas, conforme a análise do resultado coletado.Conhecimentos: Plano de teste: metodologias, especificações do teste, defeito, falha, registros de teste. Controle de versão: conceito; segurança da informação; instalação e configuração. Ramificação do projeto, controle de histórico, marcações, resgate e versões estáveis. Política de recuperação de dados: conceito; backup e restore. Ciclo de vida do sistema: planejamento de atualização e correções.UC4: Projeto Integrador em Programador de SistemasCarga horária: 20 horas CH presencial - 8h CH não presencial - 12hCompetências: Articulação das competências do curso, com foco no desenvolvimento do perfil profissional de conclusão; Criação de estratégias para a solução de um problema ou de uma fonte geradora de problemas relacionada com a prática profissional; Desenvolvimento de atividades em grupos realizadas pelos alunos de maneira autônoma e responsável; Geração de novas aprendizagens ao longo do processo; Planejamento integrado entre todos os docentes do curso; Compromisso dos docentes com o desenvolvimento do Projeto no decorrer das Unidades Curriculares;1a. Problematização: definição do tema gerador, deve-se ter em vista uma situação plausível, identificada no campo de atuação profissional e que perpasse as competências do perfil de conclusão. Neste momento, são realizados detalhamento do tema gerador e o levantamento das questões que nortearão a pesquisa e o desenvolvimento do projeto. As questões devem mobilizar ações que articulem as competências do curso para a resolução do problema.2a. Desenvolvimento: organizar e estruturar um plano de trabalho. Onde são e elaborar as estratégias para atingir os objetivos e dar respostas às questões formuladas na etapa de problematização. O plano de trabalho deve ser realizado conjuntamente pelos alunos e prever situações que extrapolem o espaço da sala de aula, estimulando a pesquisa em bibliotecas, a visita aos ambientes reais de trabalho, a contribuição de outros docentes e profissionais, além de outras ações para a busca da resolução do problema.3a. Síntese: organização e avaliação das atividades desenvolvidas e dos resultados obtidos. É importante que a proposta de solução traga aspectos inovadores, tanto no próprio produto, quanto na forma de apresentação. Exemplos de Proposta de Tema Gerador: Demandas de organização e controle em Sistemas de Informação: O desafio proposto trata-se do desenvolvimento de um módulo de um sistema para uma empresa, criando uma solução para determinados problemas que necessitem de organização/controle. produzir desde o levantamento de requisitos, validação do sistema até os testes finais. Criação de um sistema para pessoas com deficiência: aprimorar os recursos que permitam ampliar o acesso à todas as informações, sejam visuais (vídeos, fotos, gráficos, tabelas, entre outros), sonoras, e de compreensão de todas as informações favorecendo experiência diversas à todas as pessoas. por meio de entrevista com uma ou mais pessoas com deficiência, levantar demandas e necessidades, pesquisar os recursos disponíveis, produzindo uma aplicação que atenda às demandas desta população Outros Temas Geradores podem ser definidos em conjunto com os alunos, desde que constituam uma situação-problema e atendam aos 3 itens acima para a avaliação.Bibliografia XAVIER, Gley Fabiano Cardoso. Lógica de Programação. 13ª ed. Senac, São Paulo SP. CORREIA, Carlos Henrique; TAFNER, Malcon Anderson. Análise Orientada a Objetos. 2. ed. Visual books, 2018. MANZANO José Augusto N. G.; COSTA JÚNIOR, Roberto Affonso da. Programação de computadores com Java. Érica, 2014. BATES,Bert; SIERRA,Kathy. Use a Cabeça! Java. Editora Alta Books, 2012. ALVES, Willian Pereira. Banco de dados. São Paulo: Érica, 2014. BEIGHLEY, Lynn. Use a Cabeça! SQL. Editora Alta Books, 2008. LIGHTSTONE, Sam. Projeto e modelagem de banco de dados. Elsevier Academic, 2013. ANICHE, Maurício. Testes automatizados de software: um guia prático. São Paulo: Ed. Casa do Código, 2015. MOLINARI, Leonardo. Testes de software: Produzindo sistemas melhores e mais confiáveis. Érica, 2010. BRAGA, P. H. C. Testes de software. São Paulo: Pearson Education do Brasil, 2016. (ebook) GALOTTI, G. M. A. Qualidade de Software. São Paulo: Pearson Education do Brasil, 2016. (ebook) SOMERVILLE, I. Engenharia de software. São Paulo: Pearson Education do Brasil, 2018. (ebook)" }, { "title": "Elementos do Cabeamento estruturado", "url": "/aulas/posts/elementos-do-cabeamento-estruturado/", "categories": "AULAS, INFRAESTRUTURA DE REDES", "tags": "infraestrutura, conectores, cabeamento", "date": "2023-03-20 10:40:00 -0300", "snippet": "O cabeamento estruturado é um sistema padronizado de cabos e equipamentos de conectividade que visa atender as necessidades de comunicação de dados, voz e imagem em uma infraestrutura organizada e ...", "content": "O cabeamento estruturado é um sistema padronizado de cabos e equipamentos de conectividade que visa atender as necessidades de comunicação de dados, voz e imagem em uma infraestrutura organizada e eficiente. Os elementos básicos do cabeamento estruturado incluem:1. CabosOs cabos são o principal meio de transmissão de dados, voz e imagem em um sistema de cabeamento estruturado. Os tipos mais comuns de cabos utilizados são os cabos UTP (Unshielded Twisted Pair) e os cabos STP (Shielded Twisted Pair), que possuem pares de fios entrelaçados que reduzem a interferência eletromagnética. Além disso, também são utilizados cabos de fibra óptica, que oferecem alta velocidade e segurança na transmissão de dados.2. ConectoresOs conectores são utilizados para unir os cabos entre si ou aos equipamentos de rede. Os conectores mais comuns são o RJ-45 para cabos UTP e STP, e os conectores SC e LC para cabos de fibra óptica.3. TomadasAs tomadas são utilizadas para conectar os dispositivos finais (computadores, telefones, câmeras, etc.) ao sistema de cabeamento estruturado. As tomadas mais comuns são as do tipo RJ-45 para conexão de cabos UTP e STP.4. Patch PanelO patch panel é o equipamento responsável por receber os cabos vindos das tomadas e conectá-los aos equipamentos de rede, como switches e roteadores. Ele é composto por conectores fêmea RJ-45 e pode ser fixado em racks ou armários de telecomunicações.5. Racks e armários de telecomunicaçõesOs racks e armários de telecomunicações são utilizados para organizar e fixar os equipamentos de rede, incluindo o patch panel, switches, roteadores, entre outros. Eles possuem diversos tamanhos e modelos para atender as necessidades de cada projeto.6. Dutos e canaletasOs dutos e canaletas são utilizados para acomodar e proteger os cabos em sua trajetória até as tomadas e equipamentos de rede. Eles podem ser fixados em paredes, tetos e pisos, e estão disponíveis em diversos tamanhos e materiais.7. Etiquetas e identificadoresAs etiquetas e identificadores são utilizados para identificar e gerenciar os cabos e equipamentos em um sistema de cabeamento estruturado. Eles podem ser fixados nos cabos, tomadas e equipamentos, facilitando a localização e manutenção do sistema.SubsistemasO cabeamento estruturado é dividido em seis subsistemas para melhor organização dos recursos: Entrada do Edifício: É a conexão entre a rede externa e a rede interna da empresa. É por meio desse subsistema que os dados externos são transmitidos para o cabeamento interno. Geralmente é composto por cabos de fibra óptica ou cabo metálico. Sala de Equipamentos: É o local onde estão instalados os principais componentes ativos da rede, como servidores, switches, hubs e roteadores. A sala de equipamentos deve estar protegida e segura, possuindo sistemas de refrigeração adequados para garantir o bom funcionamento dos equipamentos. Cabeamento Vertical (backbone): É composto pelos cabos que interligam os andares do edifício, conectando as salas de equipamentos aos armários de telecomunicações em cada pavimento. Geralmente são utilizados cabos de fibra óptica. Sala ou Armários de Telecomunicações: São os locais onde ficam os racks ou conjuntos de racks que acomodam os equipamentos do andar, terminações e manobras de cabos. Os racks são semelhantes aos gabinetes de computadores, nos quais ficam alguns equipamentos eletrônicos. Eles também abrigam o armazenamento de cabos e conectores de fibra óptica ou metálicos. Cabeamento Horizontal: É composto pelos cabos que ligam o Armário de Telecomunicações com as áreas de trabalho. Geralmente são utilizados cabos de par trançado (UTP) ou fibra óptica, dependendo da demanda de largura de banda e da distância entre o armário e as áreas de trabalho. Áreas de trabalho: São os locais onde os usuários conectam seus equipamentos à rede. As áreas de trabalho podem incluir estações de trabalho, impressoras, telefones e outros dispositivos de rede. Cada área de trabalho deve possuir pelo menos um ponto de conexão com o cabeamento horizontal para garantir o acesso à rede.Para o projeto é importante alinhar com o cliente suas necessidades e a realidade da empresa e decidir pontos importantes como a quantidade e o local das áreas de trabalho, como será a passagem de cabos, a localização dos subsistemas e o tipo de cabo utilizado. O projeto é composto basicamente por um memorial descritivo e pranchas que contêm as plantas e os detalhes.Referências Projeto de cabeamento estruturado Cabeamento estruturado: o que é e como se faz um projeto? - C2E Entenda como funciona o sistema de cabeamento estruturado" }, { "title": "Estruturas de repetição com Arduino", "url": "/aulas/posts/estrutras-de-repeticao-no-arduino/", "categories": "AULAS, NOÇÕES DE ROBÓTICA", "tags": "arduino, robótica, curso, programação", "date": "2023-03-20 09:00:00 -0300", "snippet": "Uma estrutura de repetição, também conhecida como loop, permite que um bloco de código seja executado várias vezes consecutivas.Existem duas estruturas de repetição disponíveis em C++ que podem ser...", "content": "Uma estrutura de repetição, também conhecida como loop, permite que um bloco de código seja executado várias vezes consecutivas.Existem duas estruturas de repetição disponíveis em C++ que podem ser utilizadas em programas Arduino: while: executa um bloco de código enquanto uma condição específica for verdadeira.int contador = 0;while(contador &lt; 10){ Serial.println(contador); contador++;}Nesse exemplo, o código dentro do loop será executado enquanto o valor da variável “contador” for menor que 10. A cada iteração do loop, o valor da variável “contador” é incrementado em 1. for: executa um bloco de código um número específico de vezes.for(int i = 0; i &lt; 10; i++){ Serial.println(i);}Nesse exemplo, o código dentro do loop será executado 10 vezes. A cada iteração do loop, o valor da variável “i” é incrementado em 1, até que o valor de “i” seja igual a 10.A escolha entre as estruturas de repetição while e for depende do tipo de tarefa a ser executada e da forma como as variáveis estão sendo utilizadas no código. O uso de loops permite que o código seja mais compacto e eficiente, reduzindo a quantidade de repetições do mesmo bloco de código.Referências Apostila de Robótica" }, { "title": "Normas do Cabeamento estruturado", "url": "/aulas/posts/normas-cabeamento-estruturado/", "categories": "AULAS, INFRAESTRUTURA DE REDES", "tags": "infraestrutura, conectores, cabeamento, normas", "date": "2023-03-16 10:40:00 -0300", "snippet": "O cabeamento estruturado é um método padronizado de construir uma rede de internet, informática e telefonia seguindo normas nacionais e internacionais para garantir uma rede confiável, segura e efi...", "content": "O cabeamento estruturado é um método padronizado de construir uma rede de internet, informática e telefonia seguindo normas nacionais e internacionais para garantir uma rede confiável, segura e eficiente.Com o avanço da tecnologia da informação e telecomunicações, o projeto de cabeamento estruturado é cada vez mais importante para empresas, universidades, hospitais, condomínios e outras instituições. Este artigo oferece informações sobre o projeto de cabeamento estruturado, desde a sua definição até a instalação da rede.O que é Cabeamento Estruturado?O cabeamento estruturado é uma rede de cabos e dispositivos que transmitem sinais de dados, voz e vídeo para os sistemas de informação, telecomunicações e controle em edificações comerciais, industriais ou residenciais. Essa rede integra todos os sistemas administrativos de uma empresa, permitindo o acesso à internet, sistemas de monitoramento, controle de acesso e segurança, automação da edificação, entre outros.UtilizaçãoO cabeamento integra, em uma só rede, todos os sistemas administrativos de uma empresa. Como, por exemplo: sistemas de informações das rotinas corporativas acesso à internet alarmes sistemas de monitoramento, controle de acesso e segurança sistema de automação da edificação circuito fechado de TV (CFTV) sistemas de energia controle ambientalNormasNBR 14565A NBR 14565 é uma norma técnica brasileira que estabelece as diretrizes para projetos, instalação e certificação de cabeamento estruturado em edificações comerciais e data centers. Ela foi criada pela Associação Brasileira de Normas Técnicas (ABNT) em 2000 e revisada em 2013.Essa norma é importante porque fornece orientações detalhadas para a instalação de infraestrutura de cabeamento estruturado em ambientes corporativos, incluindo as diretrizes para a criação de subsistemas, tipos de cabos, padrões de conectividade, pontos de rede e armários de telecomunicações. Ela também aborda aspectos relacionados à segurança, confiabilidade e eficiência do sistema de cabeamento estruturado.Alguns dos tópicos abordados na NBR 14565 incluem: Definições e termos utilizados na norma Requisitos e recomendações para o projeto e instalação de subsistemas de cabeamento estruturado (entrada do edifício, sala de equipamentos, cabeamento vertical, armários de telecomunicações, cabeamento horizontal e áreas de trabalho) Diretrizes para a seleção e instalação de cabos e conectores Normas para testes e certificação de cabeamento estruturado Orientações para a documentação e manutenção do sistema de cabeamento estruturadoA NBR 14565 é uma norma importante para garantir que o cabeamento estruturado seja instalado e mantido de forma padronizada, segura e eficiente em ambientes corporativos no Brasil. O cumprimento dessa norma pode garantir maior disponibilidade de rede, performance mais eficiente na troca de dados, facilidade de manutenção e alterações na rede, e maior segurança dos dados trafegados na rede.A implementação deve seguir as normas, como ANSI/TIA-606-A e TIA-942, e observar os pontos importantes como o tipo de cabo e os limites e requisitos necessários para o seu funcionamento adequado. Um cabeamento bem-feito torna-se indispensável para prevenir possíveis congestionamentos que podem diminuir a performance da rede e a agilidade nas operações do negócio.Norma ANSI/TIAA norma ANSI/TIA-606-A, também conhecida como Administration Standard for the Telecommunications Infrastructure of Commercial Buildings, é uma norma americana que estabelece as diretrizes para a administração da infraestrutura de telecomunicações de edifícios comerciais. Essa norma define as práticas recomendadas para o gerenciamento de identificação, documentação e etiquetagem dos elementos do sistema de cabeamento estruturado. Além disso, a norma define um sistema de identificação de cabos que fornece informações importantes sobre o cabo, incluindo sua função, localização, propósito e outras características.Já a norma TIA-942 é uma norma que define os requisitos para o projeto e implantação de data centers. Essa norma fornece diretrizes para o projeto físico do data center, incluindo a seleção do local, projeto elétrico, projeto mecânico, segurança e monitoramento, cabeamento estruturado, entre outros aspectos. A norma TIA-942 também estabelece requisitos para a classificação de níveis de disponibilidade de data centers, com base no tempo máximo de inatividade anual permitido.Ambas as normas são importantes para o planejamento e execução de projetos de cabeamento estruturado e data centers, respectivamente. Elas garantem a padronização e as melhores práticas para a infraestrutura de telecomunicações e TI, o que resulta em sistemas mais confiáveis, eficientes e seguros.O projetistaPara criar projetos de rede é necessário ter qualificação técnica e conhecimento em redes de computadores, além de experiência na área. Profissionais com formação em Engenharia de Telecomunicações, Engenharia Elétrica, Ciência da Computação ou áreas afins, possuem a base teórica necessária para a elaboração de projetos de rede.Também é importante que o profissional esteja atualizado com as normas e padrões de cabeamento estruturado, como a ANSI/TIA-568 e a NBR 14565, para garantir que o projeto seja elaborado de acordo com as melhores práticas e normas vigentes.Além disso, é preciso conhecer as necessidades e demandas do cliente para elaborar um projeto que atenda às suas expectativas e ao orçamento disponível. Por isso, habilidades de comunicação e negociação são essenciais para o profissional que deseja criar projetos de rede de qualidade.Referências Projeto de cabeamento estruturado Cabeamento estruturado: o que é e como se faz um projeto? - C2E Entenda como funciona o sistema de cabeamento estruturado NBR-14565 procedimento básico" }, { "title": "Mercado de tecnologia da informação", "url": "/aulas/posts/mercado-de-ti-copy/", "categories": "AULAS, PLANEJAMENTO DE CARREIRA", "tags": "profissão", "date": "2023-03-16 10:00:00 -0300", "snippet": "title: “Mercado de tecnologia da informação”date: 2023-03-13 10:00:00 -0300categories: [AULAS, PLANEJAMENTO DE CARREIRA]tags: [planejamento, carreira, graduação]—Informações sobre o mercado de tec...", "content": "title: “Mercado de tecnologia da informação”date: 2023-03-13 10:00:00 -0300categories: [AULAS, PLANEJAMENTO DE CARREIRA]tags: [planejamento, carreira, graduação]—Informações sobre o mercado de tecnologia da informação.Média salarial Gerente de TI: Pequenas e médias empresas: de R$ 13.000 a R$ 26.000 Grandes empresas: de R$ 16.000 a R$ 30.000 Gerente de Projetos (PMO): Pequenas e médias empresas: de R$ 8.000 a R$ 18.000 Grandes empresas: de R$ 12.000 a R$ 22.500 Infraestrutura: Gerente: R$ 10.265 Coordenador: R$ 5.865 Analista: R$ 3.198 Banco de Dados: Administrador de dados: R$ 4.185 DBA Oracle: R$ 5.921 DBA SQL: R$ 3.7226 Salários de TI em 2022 De acordo com pesquisa realizada pelo Banco Nacional de Empregos (BNE), a área de TI registrou grandes aumentos salariais em diversas profissões ao longo de 2021. Confira os cargos e as médias salariais.Glassdoor - pesquisa de salários Link: https://www.glassdoor.com.br/Salários/programador-salário-SRCH_KO0,11.htmVantagens de uma carreira na área de TI Ampla gama de oportunidades para escolher onde atuar O mercado para os profissionais de TI continua em expansão, especialmente nas empresas de médio porte e nas start-ups O rápido avanço das tecnologias móveis para celulares e tablets ajudaram a ampliar ainda mais o campo para os profissionais de TI O profissional que tiver no currículo uma graduação ou especialização nas áreas de tecnologia pode concorrer às vagas de emprego mais requisitadas e ganhar melhores salários. Cursos de idiomas, principalmente o Inglês abre portas e aumenta suas possibilidades.Mercado em TI O segmento de mercado que envolve a Tecnologia da Informação é uma das áreas que mais oferecem vagas e que mais contratam profissionais todos os anos no Brasil. O mercado é bastante concorrido e ganhar um bom salário vai exigir do profissional muito estudo (certificações, especializações e treinamento em novas linguagens, métodos e sistemas de informação), muita prática e, principalmente, vontade de inovar. Por se tratar de uma carreira essencialmente pautada pela inovação, a Tecnologia de Informação abre um espaço maior para aqueles que conseguem assimilar as novidades mais rapidamente. É preciso manter-se sempre atento e aberto ao que acontece no mundo e falar inglês é essencial, dado que a grande maioria das tecnologias e linguagens vem de fora.Referências https://www.univates.br/blog/post/27108-quais-sao-as-vantagens-de-uma-carreira-na-area-de-ti https://www.infotecblog.com.br/vantagens-e-desvantagens-do-trabalho-na-area-de-ti/ https://brasil.softlinegroup.com/sobre-a-empresa/blog/investimento-em-ti-vantagem-competitiva https://www.guiadacarreira.com.br/salarios/quanto-ganha-um-profissional-de-ti/ Mercado de TI tem bons salários, mas sobrecarrega funcionários, diz estudo Os profissionais mais procurados na área de TI em 2021 8 características essenciais para um bom profissional de TI" }, { "title": "Operações matemáticas com Arduino", "url": "/aulas/posts/operacoes-matematicas-no-arduino/", "categories": "AULAS, NOÇÕES DE ROBÓTICA", "tags": "arduino, robótica, curso, programação", "date": "2023-03-14 10:40:00 -0300", "snippet": "Existem diversos tipos de operações matemáticas que podem ser realizadas com variáveis em programas Arduino, incluindo: Soma (+): realiza a adição de dois ou mais valores.int a = 10;int b = 5;int ...", "content": "Existem diversos tipos de operações matemáticas que podem ser realizadas com variáveis em programas Arduino, incluindo: Soma (+): realiza a adição de dois ou mais valores.int a = 10;int b = 5;int soma = a + b; Subtração (-): realiza a subtração de dois ou mais valores.int a = 10;int b = 5;int subtracao = a - b; Multiplicação (*): realiza a multiplicação de dois ou mais valores.int a = 10;int b = 5;int multiplicacao = a * b; Divisão (/): realiza a divisão de dois ou mais valores.int a = 10;int b = 5;int divisao = a / b; Resto da divisão (%): retorna o resto da divisão entre dois valores.int a = 10;int b = 3;int resto = a % b; Incremento (++ e +=): adiciona 1 ao valor de uma variável. Pode ser feito utilizando o operador “++” ou “ +=”. O operador “++” adiciona 1 diretamente à variável, enquanto o operador “+=” adiciona um valor específico à variável.int a = 10;a++; // equivale a \"a = a + 1;\"int b = 5;b += 3; // equivale a \"b = b + 3;\" Decremento (– e -=): subtrai 1 do valor de uma variável. Pode ser feito utilizando o operador “–” ou “-=”. O operador “–” subtrai 1 diretamente da variável, enquanto o operador “-=” subtrai um valor específico da variável.int a = 10;a--; // equivale a \"a = a - 1;\"int b = 5;b -= 3; // equivale a \"b = b - 3;\"Essas são apenas algumas das operações matemáticas que podem ser realizadas com variáveis em programas Arduino. A escolha da operação depende do tipo de cálculo a ser feito e da forma como as variáveis estão sendo utilizadas no código.Referências Apostila de Robótica" }, { "title": "Cabeamento estruturado", "url": "/aulas/posts/cabeamento-estruturado/", "categories": "AULAS, INFRAESTRUTURA DE REDES", "tags": "infraestrutura, conectores, cabeamento", "date": "2023-03-14 10:40:00 -0300", "snippet": "O cabeamento estruturado é um método padronizado de construir uma rede de internet, informática e telefonia seguindo normas nacionais e internacionais para garantir uma rede confiável, segura e efi...", "content": "O cabeamento estruturado é um método padronizado de construir uma rede de internet, informática e telefonia seguindo normas nacionais e internacionais para garantir uma rede confiável, segura e eficiente.Com o avanço da tecnologia da informação e telecomunicações, o projeto de cabeamento estruturado é cada vez mais importante para empresas, universidades, hospitais, condomínios e outras instituições. Este artigo oferece informações sobre o projeto de cabeamento estruturado, desde a sua definição até a instalação da rede.O que é Cabeamento Estruturado?O cabeamento estruturado é uma rede de cabos e dispositivos que transmitem sinais de dados, voz e vídeo para os sistemas de informação, telecomunicações e controle em edificações comerciais, industriais ou residenciais. Essa rede integra todos os sistemas administrativos de uma empresa, permitindo o acesso à internet, sistemas de monitoramento, controle de acesso e segurança, automação da edificação, entre outros.UtilizaçãoO cabeamento integra, em uma só rede, todos os sistemas administrativos de uma empresa. Como, por exemplo: sistemas de informações das rotinas corporativas acesso à internet alarmes sistemas de monitoramento, controle de acesso e segurança sistema de automação da edificação circuito fechado de TV (CFTV) sistemas de energia controle ambientalVantagens do Cabeamento EstruturadoA implantação de um projeto de cabeamento estruturado traz diversas vantagens para a operação dos sistemas de controle, administração e telecomunicações em geral. Entre elas estão: Melhora no desempenho da rede de telecomunicações. Maior segurança da rede. Suporte integrado ao tráfego multimídia, permitindo a inserção de novos sistemas para atender as demandas dos usuários. Unificação de vários serviços em um só cabeamento. Com isso, menor custo de mão de obra e de instalação da rede. Com um projeto de cabeamento estruturado bem executado, é mais fácil encontrar erros na rede de telecom. Simplicidade e rapidez para realizar manutenções e expansões de rede futuras. Facilidade de aquisição, identificação e controle de cabos. A instalação de novas conexões torna-se mais simples com um projeto de cabeamento estruturado. Maior longevidade do cabeamento de sistemas. Por ser planejada, a rede de cabos estruturada também melhora o aspecto visual das empresas.Um projeto de cabeamento estruturado bem feito oferece diversas vantagens para a empresa, como performance mais eficiente na troca de dados, maior disponibilidade da rede, organização, caminhos de dados compartilhados com outros sinais, facilidade e agilidade em alterações na rede, menor tempo para localizar e resolver problemas e manutenção facilitada e ágil.SubsistemasO cabeamento estruturado é dividido em seis subsistemas para melhor organização dos recursos: Entrada do Edifício: É a conexão entre a rede externa e a rede interna da empresa. É por meio desse subsistema que os dados externos são transmitidos para o cabeamento interno. Geralmente é composto por cabos de fibra óptica ou cabo metálico. Sala de Equipamentos: É o local onde estão instalados os principais componentes ativos da rede, como servidores, switches, hubs e roteadores. A sala de equipamentos deve estar protegida e segura, possuindo sistemas de refrigeração adequados para garantir o bom funcionamento dos equipamentos. Cabeamento Vertical (backbone): É composto pelos cabos que interligam os andares do edifício, conectando as salas de equipamentos aos armários de telecomunicações em cada pavimento. Geralmente são utilizados cabos de fibra óptica. Sala ou Armários de Telecomunicações: São os locais onde ficam os racks ou conjuntos de racks que acomodam os equipamentos do andar, terminações e manobras de cabos. Os racks são semelhantes aos gabinetes de computadores, nos quais ficam alguns equipamentos eletrônicos. Eles também abrigam o armazenamento de cabos e conectores de fibra óptica ou metálicos. Cabeamento Horizontal: É composto pelos cabos que ligam o Armário de Telecomunicações com as áreas de trabalho. Geralmente são utilizados cabos de par trançado (UTP) ou fibra óptica, dependendo da demanda de largura de banda e da distância entre o armário e as áreas de trabalho. Áreas de trabalho: São os locais onde os usuários conectam seus equipamentos à rede. As áreas de trabalho podem incluir estações de trabalho, impressoras, telefones e outros dispositivos de rede. Cada área de trabalho deve possuir pelo menos um ponto de conexão com o cabeamento horizontal para garantir o acesso à rede.Para o projeto é importante alinhar com o cliente suas necessidades e a realidade da empresa e decidir pontos importantes como a quantidade e o local das áreas de trabalho, como será a passagem de cabos, a localização dos subsistemas e o tipo de cabo utilizado. O projeto é composto basicamente por um memorial descritivo e pranchas que contêm as plantas e os detalhes.Importância do cabeamento estruturadoA importância do cabeamento estruturado para garantir uma rede de conexão de qualidade para as empresas, permitindo a conectividade à rede de telecomunicações. A estrutura do sistema de cabeamento é composta por 6 subsistemas e deve ser padronizada de acordo com as normas técnicas, como a NBR 14565, para minimizar interrupções e falhas no processo.Referências Projeto de cabeamento estruturado Cabeamento estruturado: o que é e como se faz um projeto? - C2E Entenda como funciona o sistema de cabeamento estruturado]" }, { "title": "Profissionais mais procurados em TI", "url": "/aulas/posts/os-profissionais-mais-procurados/", "categories": "AULAS, PLANEJAMENTO DE CARREIRA", "tags": "planejamento, carreira, graduação", "date": "2023-03-14 10:00:00 -0300", "snippet": "Na área de TI, existem algumas profissões que estão em alta e são altamente valorizadas pelas empresas. A seguir, listamos algumas delas:Profissões de ti mais procuradasBig DataO profissional de Bi...", "content": "Na área de TI, existem algumas profissões que estão em alta e são altamente valorizadas pelas empresas. A seguir, listamos algumas delas:Profissões de ti mais procuradasBig DataO profissional de Big Data é responsável por coletar, analisar e interpretar grandes conjuntos de dados para auxiliar a empresa na tomada de decisões. É uma área que requer conhecimentos em programação, banco de dados e estatística.Técnico em Infraestrutura de TIO técnico em infraestrutura de TI é responsável por garantir o funcionamento adequado de sistemas e redes de computadores. É uma área que exige conhecimentos em redes de computadores, sistemas operacionais, segurança da informação e administração de servidores.DesenvolvedorO desenvolvedor é o profissional responsável por criar e desenvolver soluções de software. É uma profissão em alta demanda, especialmente em empresas de tecnologia e startups.Analista em NuvemO analista em nuvem é responsável por gerenciar, monitorar e otimizar sistemas e serviços de nuvem. É uma área que requer conhecimentos em infraestrutura de rede, segurança da informação e virtualização.ReferênciasGeekhunter - **Mercado de trabalho TI: os profissionais mais valiosos**" }, { "title": "Conectores de rede", "url": "/aulas/posts/conectores-de-rede/", "categories": "AULAS, INFRAESTRUTURA DE REDES", "tags": "infraestrutura, conectores", "date": "2023-03-13 10:40:00 -0300", "snippet": "Existem vários tipos de conectores de rede utilizados em diferentes tipos de cabos e tecnologias de rede. Alguns dos principais tipos de conectores são: RJ-45: é o conector mais comum e utilizado ...", "content": "Existem vários tipos de conectores de rede utilizados em diferentes tipos de cabos e tecnologias de rede. Alguns dos principais tipos de conectores são: RJ-45: é o conector mais comum e utilizado em redes Ethernet. É um conector de oito pinos que se encaixa em um cabo UTP (par trançado não blindado). O RJ-45 é geralmente utilizado em redes com fio. RJ-11: é um conector menor que o RJ-45, com apenas quatro pinos. É geralmente utilizado em conexões telefônicas e em algumas redes residenciais. BNC: é um conector em forma de “T” que é utilizado em cabos coaxiais. É mais comum em redes mais antigas, como as redes de TV a cabo. LC: é um conector utilizado em cabos de fibra óptica. É um conector pequeno, com apenas um canal de fibra óptica. ST: é outro tipo de conector utilizado em cabos de fibra óptica. É um conector um pouco maior que o LC e tem um sistema de travamento por rosca. SC: é um conector de fibra óptica que possui um design quadrado e é utilizado em cabos de fibra óptica multimodo e monomodo. MTRJ: é um conector de fibra óptica que possui um design semelhante ao RJ-45. Ele possui duas fibras ópticas e é utilizado em cabos de fibra óptica multimodo.Esses são apenas alguns dos principais tipos de conectores de rede utilizados em diferentes tecnologias de rede. Cada tipo de conector é projetado para se encaixar em um tipo específico de cabo e oferecer um desempenho adequado para a transmissão de dados.Referências Conector Link do vídeo Conectores RJ-45 RJ-11 BNC LC, ST, SC Conectores de Fibra óptica" }, { "title": "Mercado de tecnologia da informação", "url": "/aulas/posts/mercado-de-ti/", "categories": "AULAS, PLANEJAMENTO DE CARREIRA", "tags": "planejamento, carreira, graduação", "date": "2023-03-13 10:00:00 -0300", "snippet": "Informações sobre o mercado de tecnologia da informação.Média salarial Gerente de TI: Pequenas e médias empresas: de R$ 13.000 a R$ 26.000 Grandes empresas: de R$ 16.000 a R$ 30.000 ...", "content": "Informações sobre o mercado de tecnologia da informação.Média salarial Gerente de TI: Pequenas e médias empresas: de R$ 13.000 a R$ 26.000 Grandes empresas: de R$ 16.000 a R$ 30.000 Gerente de Projetos (PMO): Pequenas e médias empresas: de R$ 8.000 a R$ 18.000 Grandes empresas: de R$ 12.000 a R$ 22.500 Infraestrutura: Gerente: R$ 10.265 Coordenador: R$ 5.865 Analista: R$ 3.198 Banco de Dados: Administrador de dados: R$ 4.185 DBA Oracle: R$ 5.921 DBA SQL: R$ 3.7226 Salários de TI em 2022 De acordo com pesquisa realizada pelo Banco Nacional de Empregos (BNE), a área de TI registrou grandes aumentos salariais em diversas profissões ao longo de 2021. Confira os cargos e as médias salariais.Glassdoor - pesquisa de salários Link: https://www.glassdoor.com.br/Salários/programador-salário-SRCH_KO0,11.htmVantagens de uma carreira na área de TI Ampla gama de oportunidades para escolher onde atuar O mercado para os profissionais de TI continua em expansão, especialmente nas empresas de médio porte e nas start-ups O rápido avanço das tecnologias móveis para celulares e tablets ajudaram a ampliar ainda mais o campo para os profissionais de TI O profissional que tiver no currículo uma graduação ou especialização nas áreas de tecnologia pode concorrer às vagas de emprego mais requisitadas e ganhar melhores salários. Cursos de idiomas, principalmente o Inglês abre portas e aumenta suas possibilidades.Mercado em TI O segmento de mercado que envolve a Tecnologia da Informação é uma das áreas que mais oferecem vagas e que mais contratam profissionais todos os anos no Brasil. O mercado é bastante concorrido e ganhar um bom salário vai exigir do profissional muito estudo (certificações, especializações e treinamento em novas linguagens, métodos e sistemas de informação), muita prática e, principalmente, vontade de inovar. Por se tratar de uma carreira essencialmente pautada pela inovação, a Tecnologia de Informação abre um espaço maior para aqueles que conseguem assimilar as novidades mais rapidamente. É preciso manter-se sempre atento e aberto ao que acontece no mundo e falar inglês é essencial, dado que a grande maioria das tecnologias e linguagens vem de fora.Referências https://www.univates.br/blog/post/27108-quais-sao-as-vantagens-de-uma-carreira-na-area-de-ti https://www.infotecblog.com.br/vantagens-e-desvantagens-do-trabalho-na-area-de-ti/ https://brasil.softlinegroup.com/sobre-a-empresa/blog/investimento-em-ti-vantagem-competitiva https://www.guiadacarreira.com.br/salarios/quanto-ganha-um-profissional-de-ti/ Mercado de TI tem bons salários, mas sobrecarrega funcionários, diz estudo Os profissionais mais procurados na área de TI em 2021 8 características essenciais para um bom profissional de TI" }, { "title": "Programação no Arduino com variáveis", "url": "/aulas/posts/programacao-no-arduino-com-variaveis/", "categories": "AULAS, NOÇÕES DE ROBÓTICA", "tags": "arduino, robótica, curso, programação", "date": "2023-03-13 09:00:00 -0300", "snippet": "Ao programar no Arduino com variáveis, é possível armazenar valores e manipulá-los em diferentes partes do código, tornando-o mais flexível e adaptável.Uso de variáveisExistem vários tipos de variá...", "content": "Ao programar no Arduino com variáveis, é possível armazenar valores e manipulá-los em diferentes partes do código, tornando-o mais flexível e adaptável.Uso de variáveisExistem vários tipos de variáveis disponíveis em C++, a linguagem de programação utilizada pelo Arduino, como int, float, boolean, char, entre outros.Para declarar uma variável em Arduino, é necessário indicar o seu tipo e nome. Por exemplo, para declarar uma variável inteira chamada “contador”, utilizamos o seguinte código:int contador;A variável “contador” agora pode ser utilizada para armazenar e manipular valores inteiros em diferentes partes do código. Por exemplo, podemos inicializar a variável com o valor 0 e incrementá-la dentro de um loop:int contador = 0;void loop() { contador = contador + 1; delay(1000);}Nesse exemplo, a variável “contador” é inicializada com o valor 0 e, a cada vez que o loop é executado, o valor é incrementado em 1 e, em seguida, é aguardado um segundo antes de reiniciar o loop.As variáveis também podem ser utilizadas em operações matemáticas e lógicas, como soma, subtração, multiplicação, divisão e comparação. Por exemplo:int a = 10;int b = 5;int soma = a + b;int subtracao = a - b;int multiplicacao = a * b;int divisao = a / b;boolean igual = (a == b);Nesse exemplo, as variáveis “a” e “b” são inicializadas com os valores 10 e 5, respectivamente. Em seguida, outras variáveis são declaradas para armazenar o resultado de diferentes operações matemáticas e lógicas envolvendo as variáveis “a” e “b”.Assim, o uso de variáveis em programas Arduino pode tornar o código mais organizado, legível e eficiente, permitindo a manipulação e armazenamento de valores de forma dinâmica.Tipos de variáveisAlém do tipo de variável “int”, que representa valores inteiros, existem outros tipos de variáveis que podem ser usadas em programas Arduino: float: representa números de ponto flutuante, ou seja, números com casas decimais. É útil em cálculos que envolvem valores não inteiros, como medições de temperatura, por exemplo.float temperatura = 25.5; boolean: representa valores lógicos, que podem ser verdadeiro (true) ou falso (false). É útil em testes condicionais e em operações de controle de fluxo.boolean luz_ligada = true; char: representa um caractere, que pode ser uma letra, número ou símbolo. É útil em operações que envolvem manipulação de strings ou caracteres.char primeira_letra = 'A'; String: representa uma sequência de caracteres. É útil em operações que envolvem manipulação de texto ou palavras.String mensagem = \"Olá, mundo!\";Esses são apenas alguns exemplos de tipos de variáveis disponíveis em C++. Para utilizar cada um desses tipos em um programa Arduino, é necessário declarar a variável com o seu tipo correspondente e, em seguida, atribuir um valor a ela.Referências Apostila de Robótica" }, { "title": "Arquitetura de redes locais IEEE 802", "url": "/aulas/posts/arquitetura-ieee-802/", "categories": "AULAS, INFRAESTRUTURA DE REDES", "tags": "infraestrutura, protocolos", "date": "2023-03-09 10:40:00 -0300", "snippet": "A arquitetura IEEE 802 é composta por duas camadas principais: a camada física (PHY) e a camada de enlace de dados. A camada de enlace de dados é dividida em duas subcamadas: LLC (Logical Link Cont...", "content": "A arquitetura IEEE 802 é composta por duas camadas principais: a camada física (PHY) e a camada de enlace de dados. A camada de enlace de dados é dividida em duas subcamadas: LLC (Logical Link Control) e MAC (Medium Access Control).A camada PHY é responsável pela transmissão dos dados em um meio físico específico, como cabos de cobre, fibra ótica ou ondas de rádio. Ela define as características elétricas, ópticas e de sinalização necessárias para transmitir dados de forma confiável no meio físico.A camada MAC é responsável pelo controle de acesso ao meio de transmissão e coordena a transmissão de dados entre várias estações em uma rede. Ela garante que cada estação tenha a oportunidade de transmitir dados e evita colisões de pacotes que podem ocorrer quando duas ou mais estações tentam transmitir ao mesmo tempo.Protocolo MAC na arquitetura IEEE 802O protocolo MAC é uma parte fundamental da arquitetura IEEE 802 e é responsável por garantir que a comunicação entre as estações em uma rede seja eficiente e confiável. O protocolo MAC varia dependendo do tipo de meio físico e da tecnologia de comunicação utilizada. Algumas tecnologias que usam a arquitetura IEEE 802 incluem Ethernet, Wi-Fi, Bluetooth e ZigBee.Existem vários tipos de protocolos MAC utilizados na arquitetura IEEE 802, incluindo o protocolo CSMA/CD (Carrier Sense Multiple Access with Collision Detection), que é utilizado em redes Ethernet com fio, e o protocolo CSMA/CA (Carrier Sense Multiple Access with Collision Avoidance), que é utilizado em redes Wi-Fi. O objetivo do protocolo MAC é garantir que a transmissão de dados ocorra de forma ordenada e eficiente, evitando colisões de pacotes e garantindo que cada estação tenha a oportunidade de transmitir dados.Importância da arquitetura IEEE 802A arquitetura IEEE 802 é extremamente importante para a comunicação em redes de computadores. As normas definidas pela arquitetura permitem que dispositivos de diferentes fabricantes e tecnologias possam se comunicar entre si de forma padronizada e eficiente. Isso é essencial para a interoperabilidade entre dispositivos em redes, permitindo que usuários de diferentes plataformas e tecnologias possam se comunicar e compartilhar informações sem problemas.Além disso, a arquitetura IEEE 802 é amplamente utilizada em todo o mundo, em redes de diferentes tamanhos e tipos, desde pequenas redes domésticas até grandes redes empresariais e de telecomunicações. As normas da arquitetura IEEE 802 são constantemente atualizadas e aprimoradas para atender às demandas em constante evolução da tecnologia de rede.ProtocolosSegue abaixo uma tabela com alguns dos protocolos utilizados na arquitetura IEEE 802: Protocolo Descrição Ethernet Protocolo de rede com fio mais utilizado atualmente, definido pela norma IEEE 802.3. Wi-Fi Tecnologia de rede sem fio que utiliza as normas IEEE 802.11 para comunicação. Bluetooth Tecnologia de comunicação sem fio utilizada em dispositivos móveis e eletrônicos, como smartphones e fones de ouvido. Define a norma IEEE 802.15.1. ZigBee Protocolo de rede sem fio de baixa potência utilizado em aplicações de automação residencial e industrial. Define a norma IEEE 802.15.4. Token Ring Protocolo de rede com fio utilizado em redes locais que utiliza um token para controlar o acesso ao meio de transmissão. Define a norma IEEE 802.5. FDDI Protocolo de rede com fio utilizado em redes locais de alta velocidade que utiliza fibra óptica como meio de transmissão. Define a norma IEEE 802.7. ATM Protocolo de rede com fio que utiliza a tecnologia de comutação de células para transmitir dados. Define a norma IEEE 802.3. Esses são apenas alguns exemplos de protocolos que utilizam a arquitetura IEEE 802. Existem muitos outros protocolos que são utilizados em redes de computadores, cada um com suas próprias características e funcionalidades.ReferênciasTipos de redes locais" }, { "title": "Certificações em TI", "url": "/aulas/posts/certificacoes-em-ti-copy/", "categories": "AULAS, PROFISSÃO E FORMAÇÃO", "tags": "profissão", "date": "2023-03-09 10:00:00 -0300", "snippet": "title: “Certificações em TI”date: 2023-03-06 10:00:00 -0300categories: [AULAS, PLANEJAMENTO DE CARREIRA]tags: [planejamento, carreira, graduação]—Certificações na área de desenvolvimentoO que é ce...", "content": "title: “Certificações em TI”date: 2023-03-06 10:00:00 -0300categories: [AULAS, PLANEJAMENTO DE CARREIRA]tags: [planejamento, carreira, graduação]—Certificações na área de desenvolvimentoO que é certificação?Segundo o dicionário:Afirmação da certeza ou verdade de; atestado, prova.O que é certificação?Certificação para: Serviços , produto ou SistemaCertificação é um processo no qual uma entidade independente avalia se determinado produto atende às normas técnicas.Esta avaliação se baseia em auditorias no processo produtivo, na coleta e em ensaios de amostras.http://www.abnt.org.br/certificacao/o-que-eO que é certificação em TI?Certificações são as formações voltadas para O profissional de Tecnologia da informação E/ou empresas.Essas são ofertadas por fabricantes tais como: SAP, ORACLE, SUN, IBM, MICROSOFT, JAVA, LINUX, etc..Por que obter uma certificação?Opção rápida para complementar seus estudos acadêmicos/profissional;Abrem portas para trabalhar em:Empresas focadas em softwares;Plataformas;Produtos tecnológicos específicos;Por que fazer uma certificação?Evolução da TI;Habilidades que são necessárias para se ter sucesso, estão mudando constantemente;Exemplo:Computação em nuvem;Segurança cibernética;Análise de Dados;Entre outrasCaracterísticas principaisCertificações podem ser: Presenciais; Online; E a maioria precisa ter inglês, pois algumas certificações são ministradas neste idioma. Estudar sozinho.Certificações tipos: Profissionais Ágeis; Profissionais da Segurança da Informação; Gerenciamento de Riscos; Gerenciamento de Projetos; Entre outros;Principais certificaçõesProfissionais ÁgeisMestre Scrum: Uma certificação de mestre Scrum pode provar que você tem o conhecimento e a competência para liderar equipes ágeis com sucesso; Certified ScrumMaster (CSM) Advanced Certified ScrumMaster (A-CSM) Certified Scrum Professional ScrumMaster (CSP-SM) Professional Scrum Master (PSM) IProfissionais Ágeis - As 9 principais: Professional Scrum Master (PSM) II Professional Scrum Master (PSM) III Project Management Institute - Agile Certified Professional (PMI-ACP) SAFe 4 Scrum Master SAFe 4 Advanced Scrum MasterCertified ScrumMaster (CSM) Certificação de nível introdutório da Scrum Alliance, para candidatos que desejam preencher uma função de Scrum Master ou membro da equipe Scrum. A certificação exige um curso de treinamento presencial de 16 horas antes que os candidatos possam fazer o teste.Para saber mais:https://cio.com.br/mestre-scrum-9-certificacoes-para-profissionais-ageis/Segurança da Informação Certified Information Systems Security Professional (CISSP); A certificação CISSP é oferecida pelo ISC e credenciada sob ANSI, formalmente aprovada pelo Departamento de Defesa dos EUA e adotada como padrão para o programa ISEEP da Agência de Segurança Nacional dos EUA. É reconhecida globalmente como uma certificação para ajudar os profissionais de segurança de TI a estabelecer práticas recomendadas em relação à segurança moderna.Requisitos:5 anos de experiência em segurança da informação e pelo menos 3 anos como gerente de segurança.Gerenciamento de Projetos Project Management Professional (PMP) Oferecida pela PMI; Para profissionais de gerenciamento de projetos; A PMI afirma que o profissional poderá trabalhar em praticamente qualquer indústria, com qualquer metodologia e em qualquer local.Requisitos: Ter um diploma há 4 anos; 3 anos de experiência em gerenciamento de projetos; 4.500 horas de liderança de projetos; 35 horas de educação em Gerenciamento de projetos;Principais Certificações de empresasOracleProfissionais que querem trabalhar com: Banco de dados, Big Data, etc;MicrosoftCertificações mais cobiçadas: A Microsoft Certified Solutions Developer (MCSD) A Microsoft Certified Solutions Developer (MCSD) Exige 3 etapas: Conhecimento comprovado em: HTML5, JavaScript e CSS3; Aplicações Web ASP.NET MVC4 Windows Azure e serviços webCISCO Validam aptidões técnicas de arquitetos de infraestrutura e redes convergentes e complexas; Conhecimento em aplicações dependentes de internet; Possui treinamentos rigorosos e recursos para atualizações continuas de aprendizado.CobiT Control Objectives for Information and related Technology ; Conjunto de diretrizes idealizadas em framework voltados para auditoria de processos, práticas e controles de TI com abordagens de redução de risco e enfoque na integridade, confiabilidade e segurança. De forma resumida, o CobiT é a união de ferramentas para alcance da excelência em TI.ITIL (Information Technology Infrastructure Library), que em português significa “Biblioteca de Infra-estrutura de Tecnologia da Informação; A certificação ITIL visa capacitar e certificar os profissionais, fazendo com que ele possa contribuir nas áreas de TI, na integração e entrega de soluções e serviços. Existem 4 níveis de certificação: Foundation, Advanced, Intermediate e ExecutiveVocê pode se preparar para a certificação de duas maneiras: Estudando por conta própria ou por meio de algum curso. No próprio site da EXIN, você pode baixar um guia de preparação para a prova.Referências Principais-certificacoes-em-TI Saiba-o-que-e-e-como-tirar-a-certificacao-itil/ https://www.academiccourses.com.br/Certificado/Tecnologia-da-Informação/ https://cio.com.br/mais-15-certificacoes-de-ti-muito-valiosas-hoje/ 10 certificações em TI muito valorizadas hoje As 15 principais certificações para desenvolvedores de software em 2023" }, { "title": "Arquitetura OSI e TCP-IP", "url": "/aulas/posts/arquitetura-tcpip-e-osi/", "categories": "AULAS, INFRAESTRUTURA DE REDES", "tags": "infraestrutura, protocolos", "date": "2023-03-07 10:40:00 -0300", "snippet": "A arquitetura TCP/IP e a arquitetura OSI são dois modelos de referência para comunicações em rede que foram desenvolvidos por diferentes organizações e em diferentes momentos.A arquitetura TCP/IP (...", "content": "A arquitetura TCP/IP e a arquitetura OSI são dois modelos de referência para comunicações em rede que foram desenvolvidos por diferentes organizações e em diferentes momentos.A arquitetura TCP/IP (Transmission Control Protocol/Internet Protocol) é a base da Internet e foi desenvolvida pela DARPA (Defense Advanced Research Projects Agency) nos anos 70. Ela consiste em quatro camadas principais: camada de aplicação, camada de transporte, camada de internet e camada de acesso à rede.A arquitetura OSI (Open Systems Interconnection) foi desenvolvida pela ISO (International Organization for Standardization) nos anos 80 e é composta por sete camadas: camada física, camada de enlace de dados, camada de rede, camada de transporte, camada de sessão, camada de apresentação e camada de aplicação.Embora as duas arquiteturas tenham uma estrutura semelhante de camadas, a arquitetura OSI é geralmente considerada mais teórica e complexa, enquanto a arquitetura TCP/IP é mais prática e fácil de implementar. A arquitetura OSI é amplamente utilizada para fins educacionais e de padronização, enquanto a arquitetura TCP/IP é a base da Internet e é usada em todo o mundo para comunicações em rede.Tabela comparativaPara ajudar a visualizar as diferenças e semelhanças entre as duas arquiteturas, segue abaixo uma tabela comparativa:   Arquitetura TCP/IP Arquitetura OSI Número de camadas 4 7 Camadas Camada de aplicação, camada de transporte, camada de internet e camada de acesso à rede Camada de aplicação, camada de apresentação, camada de sessão, camada de transporte, camada de rede, camada de enlace de dados e camada física Desenvolvedor DARPA ISO Ano de desenvolvimento Década de 1970 Década de 1980 Complexidade Menos complexa e mais prática Mais complexa e teórica Utilização Base da Internet e amplamente usada em todo o mundo Utilizada principalmente para fins educacionais e de padronização Em resumo, a arquitetura TCP/IP é mais enxuta e prática, tendo sido desenvolvida para atender às necessidades de comunicação da Internet, enquanto a arquitetura OSI é mais complexa e teórica, tendo sido desenvolvida para fins de padronização e educação. Ambas as arquiteturas têm uma estrutura de camadas semelhante, mas diferem no número e na nomenclatura das camadas, além de terem sido desenvolvidas por organizações diferentes em momentos diferentes.Tabela de camadassegue abaixo uma tabela comparativa mais detalhada das camadas da arquitetura TCP/IP e da arquitetura OSI: Arquitetura TCP/IP Arquitetura OSI Descrição Camada de Aplicação Camada de Aplicação , camada de apresentação, camada de sessão, Fornece serviços de rede para aplicativos e serviços de usuário final, incluindo e-mail, navegação na web, transferência de arquivos e outros Camada de Transporte Camada de Transporte Responsável pela transmissão confiável de dados entre dispositivos na rede, incluindo segmentação e retransmissão de pacotes, e controle de fluxo Camada de Internet Camada de Rede Gerencia o roteamento de pacotes de dados pela rede, incluindo a definição de endereços IP e o uso de protocolos de roteamento Camada de Acesso à Rede Camada de Enlace de Dados e Camada Física Fornece a interface entre a rede e os dispositivos conectados, incluindo a transmissão física de dados e a detecção de erros Embora a arquitetura TCP/IP tenha menos camadas do que a arquitetura OSI, as funções das camadas correspondentes em ambas as arquiteturas são semelhantes em muitos aspectos. A Camada de Aplicação, por exemplo, é responsável por fornecer serviços de rede para aplicativos e serviços de usuário final em ambas as arquiteturas, enquanto a Camada de Transporte é responsável pela transmissão confiável de dados entre dispositivos. A principal diferença é a nomenclatura e a organização das camadas, que refletem as diferenças na abordagem de desenvolvimento e no momento histórico de cada arquitetura.Referências Apostila de Meios de Comunicação de DadosVídeos no YouTube:" }, { "title": "Plano de carreira", "url": "/aulas/posts/plano-de-carreira/", "categories": "AULAS, PLANEJAMENTO DE CARREIRA", "tags": "planejamento, carreira, graduação", "date": "2023-03-07 10:00:00 -0300", "snippet": "Para preparar um plano de carreira visando sua formação profissional, você pode seguir as seguintes etapas organizadas em temas: Autoconhecimento: Comece definindo suas habilidades, interesses e v...", "content": "Para preparar um plano de carreira visando sua formação profissional, você pode seguir as seguintes etapas organizadas em temas: Autoconhecimento: Comece definindo suas habilidades, interesses e valores pessoais, para entender quais áreas profissionais são mais adequadas para você. Faça uma lista de suas forças e fraquezas, e quais atividades você gosta ou não gosta de fazer. Exploração de carreira: Pesquise sobre as diversas áreas de atuação que você tem interesse em seguir. Consulte profissionais que atuam nesses campos, visite empresas ou participe de eventos e workshops que abordam esses temas. Converse com professores e mentores, e faça networking com profissionais da sua área de interesse. Estabelecimento de metas: Defina metas a curto, médio e longo prazo para a sua carreira. Por exemplo, o que você quer alcançar nos próximos 5 anos? E nos próximos 10 anos? Defina metas específicas, mensuráveis, alcançáveis, relevantes e com prazo definido. Desenvolvimento de habilidades: Identifique as habilidades necessárias para ter sucesso na sua área de atuação e trabalhe para desenvolvê-las. Além disso, busque oportunidades para aprender coisas novas, seja por meio de cursos, workshops ou projetos extracurriculares. Preparação acadêmica: Escolha os cursos e disciplinas que você precisa estudar para atingir suas metas de carreira. Além disso, esteja sempre atualizado sobre as últimas tendências e avanços na sua área de atuação. Networking: Construa uma rede de contatos profissionais, com pessoas que podem ajudá-lo a avançar em sua carreira. Participe de grupos e eventos de sua área de atuação, e procure estabelecer conexões com pessoas que trabalham em empresas ou organizações que lhe interessam. Busca por oportunidades: Esteja sempre atento a oportunidades de estágio, trainee, bolsas de estudo ou outros programas que possam ajudá-lo a ganhar experiência e desenvolver suas habilidades. Plano de ação: Crie um plano de ação detalhado, que inclua os passos necessários para alcançar suas metas de carreira. Defina prazos e recursos necessários para cada etapa, e acompanhe regularmente o progresso de sua evolução.Preparação acadêmicaA preparação acadêmica é fundamental para o desenvolvimento da carreira profissional. Dependendo da área de atuação, alguns títulos acadêmicos podem ser necessários ou desejáveis. Veja abaixo algumas sugestões de como organizar a preparação acadêmica por títulos: Graduação: Uma graduação é o primeiro passo na formação acadêmica e muitas carreiras exigem um diploma de graduação. Na escolha do curso, é importante levar em consideração a afinidade com a área de estudo, as habilidades requeridas, a empregabilidade e a perspectiva de futuro da profissão. Certifique-se de escolher uma instituição de ensino reconhecida e bem avaliada. Pós-graduação: Uma pós-graduação pode ser uma opção para aprofundar seus conhecimentos em uma área específica ou se especializar em uma subárea da profissão. Existem duas modalidades principais de pós-graduação: o mestrado e o doutorado. O mestrado é indicado para quem deseja aprofundar seus conhecimentos em uma área específica e se preparar para a pesquisa acadêmica ou para atuar em cargos de liderança. Já o doutorado é voltado para quem deseja se tornar um pesquisador e contribuir para o desenvolvimento da ciência na sua área de atuação. MBA: Um MBA (Master of Business Administration) é uma pós-graduação voltada para o desenvolvimento de habilidades gerenciais e de negócios. É indicado para profissionais que desejam ocupar cargos de liderança em empresas ou abrir seu próprio negócio. Especialização: Uma especialização é uma formação mais curta e específica do que uma pós-graduação. Pode ser uma boa opção para quem deseja se especializar em uma área específica da profissão ou complementar sua formação em alguma subárea da profissão. Cursos livres: Além dos títulos acadêmicos, existem diversos cursos livres que podem complementar sua formação acadêmica e contribuir para o desenvolvimento de habilidades específicas. Esses cursos podem ser presenciais ou online e podem ser oferecidos por instituições de ensino ou empresas especializadas. Lembre-se de que a preparação acadêmica é apenas uma parte da preparação para a carreira profissional. Além dos títulos acadêmicos, é importante desenvolver habilidades técnicas e comportamentais, fazer networking, buscar oportunidades de estágio e trabalho e estar sempre atualizado sobre as tendências e avanços na sua área de atuação.Plano de carreira para TIPlano de carreira para um estudante de nível médio que quer entrar no mercado de TI: Identificar suas áreas de interesse em TI: O primeiro passo é identificar quais áreas de TI mais lhe interessam. TI é um campo amplo e diverso, portanto é importante ter uma ideia do que você mais gosta e onde pode se destacar. Investir em uma formação básica em TI: Para começar, é importante obter uma formação básica em TI, que pode ser obtida por meio de cursos técnicos, de graduação ou mesmo através de cursos online gratuitos. Essa formação básica em TI ajudará você a ter uma compreensão ampla do campo de TI e a se preparar para especializações futuras. Especializar-se em uma área de TI: Com base em suas áreas de interesse, você pode se especializar em uma área específica de TI, como programação, análise de dados, segurança da informação, desenvolvimento de aplicativos, entre outras. Você pode fazer isso através de cursos de especialização, certificações ou mesmo através de projetos pessoais e experiências de trabalho. Fazer estágios ou trabalhos em TI: Para ter uma experiência prática em TI, é importante buscar oportunidades de estágio ou trabalho em empresas de TI ou em áreas de TI de outras empresas. Isso ajudará você a adquirir habilidades práticas, trabalhar em equipe e desenvolver uma compreensão mais profunda do campo de TI. Construir um portfólio de projetos: Para se destacar no mercado de TI, é importante construir um portfólio de projetos. Isso pode incluir projetos pessoais, projetos de trabalho ou mesmo projetos de voluntariado. Um portfólio forte ajudará você a demonstrar suas habilidades e experiência prática em TI. Participar de eventos e comunidades de TI: Para se manter atualizado sobre as tendências e avanços em TI, é importante participar de eventos e comunidades de TI. Isso pode incluir conferências, fóruns online, grupos de usuários e hackathons. Buscar oportunidades de crescimento profissional: Para progredir na carreira de TI, é importante buscar oportunidades de crescimento profissional, como promoções, mudanças de emprego ou mesmo a busca por novos desafios e projetos. Além disso, é importante manter-se atualizado com as tendências e novas tecnologias em TI. Lembre-se de que este é apenas um esboço geral de um plano de carreira em TI. Cada pessoa terá um caminho único e personalizado com base em seus objetivos, habilidades e experiência. O importante é estar sempre em busca de aprendizado e crescimento profissional.Carreira de um desenvolvedor de software Estágio em desenvolvimento de software: Após completar a faculdade de Ciência da Computação, o desenvolvedor de software começou sua carreira com um estágio em uma empresa de tecnologia, onde teve a oportunidade de trabalhar em projetos de desenvolvimento de software e aprender com profissionais experientes. Desenvolvedor júnior: Depois de concluir o estágio, o desenvolvedor começou a trabalhar como desenvolvedor júnior em uma empresa de desenvolvimento de software. Nesse cargo, ele trabalhou em projetos menores e teve a oportunidade de aprender com desenvolvedores mais experientes. Desenvolvedor pleno: Com a experiência adquirida como desenvolvedor júnior, o desenvolvedor progrediu para um cargo de desenvolvedor pleno em uma empresa maior. Nesse cargo, ele trabalhou em projetos mais complexos e teve mais responsabilidades, como liderar equipes menores de desenvolvedores júnior. Especialista em uma tecnologia: Com o tempo, o desenvolvedor se especializou em uma tecnologia específica, como Java ou Python, e se tornou um especialista nessa tecnologia. Isso lhe permitiu trabalhar em projetos mais desafiadores e complexos, e também ser reconhecido como um especialista em sua área. Líder técnico: Com sua experiência e especialização, o desenvolvedor progrediu para um cargo de liderança técnica em sua empresa, onde liderou equipes maiores de desenvolvedores em projetos complexos e de maior escala. Gerente de projetos de software: Como gerente de projetos de software, o desenvolvedor foi responsável por liderar equipes de desenvolvimento de software em projetos maiores e mais complexos. Ele também foi responsável por garantir que os projetos fossem entregues dentro do prazo e dentro do orçamento. Diretor de tecnologia: Com sua vasta experiência em desenvolvimento de software, o desenvolvedor foi promovido para o cargo de diretor de tecnologia em uma grande empresa de tecnologia. Nesse cargo, ele foi responsável por liderar a estratégia de tecnologia da empresa e garantir que a empresa permanecesse atualizada com as últimas tendências e tecnologias em seu campo. Esta é apenas uma simulação de uma carreira em desenvolvimento de software, que pode variar de acordo com a empresa, as habilidades do desenvolvedor e as oportunidades disponíveis no mercado. No entanto, é importante notar que a carreira de desenvolvimento de software é altamente progressiva e oferece muitas oportunidades de crescimento profissional e pessoal." }, { "title": "Arquitetura TCP-IP", "url": "/aulas/posts/arquitetura-tcp-ip/", "categories": "AULAS, INFRAESTRUTURA DE REDES", "tags": "infraestrutura, protocolos", "date": "2023-03-06 10:40:00 -0300", "snippet": "Para que a comunicação ocorra na internet, é necessário seguir um conjunto de protocolos conhecido como TCP/IP, que é a base de comunicação da rede mundial de computadores. O TCP/IP é formado por v...", "content": "Para que a comunicação ocorra na internet, é necessário seguir um conjunto de protocolos conhecido como TCP/IP, que é a base de comunicação da rede mundial de computadores. O TCP/IP é formado por várias camadas, cada uma com uma responsabilidade específica.A camada mais baixa é a camada física, que trata da transmissão dos dados através dos meios físicos, como cabos, fibra óptica e ondas de rádio. A camada seguinte é a camada de enlace de dados, que garante a integridade dos dados transmitidos e trata da identificação dos dispositivos que se comunicam.A camada de rede é responsável pelo roteamento dos dados através da rede, escolhendo o melhor caminho para que os dados cheguem ao seu destino. Já a camada de transporte é responsável por estabelecer a conexão entre as aplicações que estão se comunicando, garantindo que os dados sejam entregues sem erros.Por fim, a camada de aplicação é a camada mais alta do TCP/IP, que oferece serviços de rede para as aplicações que estão rodando nos dispositivos. É nessa camada que os protocolos de aplicação, como HTTP, SMTP e FTP, são implementados.Dessa forma, a comunicação na internet é realizada de forma hierárquica, com cada camada tendo uma responsabilidade específica. Quando um dispositivo se conecta à internet, ele segue esse conjunto de protocolos para se comunicar com outros dispositivos, permitindo a troca de informações e a realização de diversas atividades online. Camada Função Protocolos Aplicação Oferece serviços de rede para as aplicações que estão rodando HTTP, FTP, SMTP, SSH, DNS, Telnet, POP, IMAP Transporte Estabelece a conexão entre as aplicações que estão se comunicando TCP, UDP Internet Roteamento dos dados através da rede IP, ICMP, IGMP Acesso ao meio Identifica os dispositivos que se comunicam e garante a integridade dos dados transmitidos Ethernet, Wi-Fi, Bluetooth, PPP, SLIP, ATM Física Trata da transmissão dos dados através dos meios físicos Cabos de cobre, fibra óptica, ondas de rádio Essa tabela apresenta um resumo das principais funções e protocolos de cada camada do modelo TCP/IP, ajudando a entender a estrutura da comunicação na Internet.Referências Apostila de Meios de Comunicação de DadosVídeos no YouTube:" }, { "title": "Certificações em TI", "url": "/aulas/posts/certificacoes-em-ti/", "categories": "AULAS, PLANEJAMENTO DE CARREIRA", "tags": "planejamento, carreira, graduação", "date": "2023-03-06 10:00:00 -0300", "snippet": "Certificações na área de desenvolvimentoO que é certificação?Segundo o dicionário:Afirmação da certeza ou verdade de; atestado, prova.O que é certificação?Certificação para: Serviços , produto ou S...", "content": "Certificações na área de desenvolvimentoO que é certificação?Segundo o dicionário:Afirmação da certeza ou verdade de; atestado, prova.O que é certificação?Certificação para: Serviços , produto ou SistemaCertificação é um processo no qual uma entidade independente avalia se determinado produto atende às normas técnicas.Esta avaliação se baseia em auditorias no processo produtivo, na coleta e em ensaios de amostras.http://www.abnt.org.br/certificacao/o-que-eO que é certificação em TI?Certificações são as formações voltadas para O profissional de Tecnologia da informação E/ou empresas.Essas são ofertadas por fabricantes tais como: SAP, ORACLE, SUN, IBM, MICROSOFT, JAVA, LINUX, etc..Por que obter uma certificação?Opção rápida para complementar seus estudos acadêmicos/profissional;Abrem portas para trabalhar em:Empresas focadas em softwares;Plataformas;Produtos tecnológicos específicos;Por que fazer uma certificação?Evolução da TI;Habilidades que são necessárias para se ter sucesso, estão mudando constantemente;Exemplo:Computação em nuvem;Segurança cibernética;Análise de Dados;Entre outrasCaracterísticas principaisCertificações podem ser: Presenciais; Online; E a maioria precisa ter inglês, pois algumas certificações são ministradas neste idioma. Estudar sozinho.Certificações tipos: Profissionais Ágeis; Profissionais da Segurança da Informação; Gerenciamento de Riscos; Gerenciamento de Projetos; Entre outros;Principais certificaçõesProfissionais ÁgeisMestre Scrum: Uma certificação de mestre Scrum pode provar que você tem o conhecimento e a competência para liderar equipes ágeis com sucesso; Certified ScrumMaster (CSM) Advanced Certified ScrumMaster (A-CSM) Certified Scrum Professional ScrumMaster (CSP-SM) Professional Scrum Master (PSM) IProfissionais Ágeis - As 9 principais: Professional Scrum Master (PSM) II Professional Scrum Master (PSM) III Project Management Institute - Agile Certified Professional (PMI-ACP) SAFe 4 Scrum Master SAFe 4 Advanced Scrum MasterCertified ScrumMaster (CSM) Certificação de nível introdutório da Scrum Alliance, para candidatos que desejam preencher uma função de Scrum Master ou membro da equipe Scrum. A certificação exige um curso de treinamento presencial de 16 horas antes que os candidatos possam fazer o teste.Para saber mais:https://cio.com.br/mestre-scrum-9-certificacoes-para-profissionais-ageis/Segurança da Informação Certified Information Systems Security Professional (CISSP); A certificação CISSP é oferecida pelo ISC e credenciada sob ANSI, formalmente aprovada pelo Departamento de Defesa dos EUA e adotada como padrão para o programa ISEEP da Agência de Segurança Nacional dos EUA. É reconhecida globalmente como uma certificação para ajudar os profissionais de segurança de TI a estabelecer práticas recomendadas em relação à segurança moderna.Requisitos:5 anos de experiência em segurança da informação e pelo menos 3 anos como gerente de segurança.Gerenciamento de Projetos Project Management Professional (PMP) Oferecida pela PMI; Para profissionais de gerenciamento de projetos; A PMI afirma que o profissional poderá trabalhar em praticamente qualquer indústria, com qualquer metodologia e em qualquer local.Requisitos: Ter um diploma há 4 anos; 3 anos de experiência em gerenciamento de projetos; 4.500 horas de liderança de projetos; 35 horas de educação em Gerenciamento de projetos;Principais Certificações de empresasOracleProfissionais que querem trabalhar com: Banco de dados, Big Data, etc;MicrosoftCertificações mais cobiçadas: A Microsoft Certified Solutions Developer (MCSD) A Microsoft Certified Solutions Developer (MCSD) Exige 3 etapas: Conhecimento comprovado em: HTML5, JavaScript e CSS3; Aplicações Web ASP.NET MVC4 Windows Azure e serviços webCISCO Validam aptidões técnicas de arquitetos de infraestrutura e redes convergentes e complexas; Conhecimento em aplicações dependentes de internet; Possui treinamentos rigorosos e recursos para atualizações continuas de aprendizado.CobiT Control Objectives for Information and related Technology ; Conjunto de diretrizes idealizadas em framework voltados para auditoria de processos, práticas e controles de TI com abordagens de redução de risco e enfoque na integridade, confiabilidade e segurança. De forma resumida, o CobiT é a união de ferramentas para alcance da excelência em TI.ITIL (Information Technology Infrastructure Library), que em português significa “Biblioteca de Infra-estrutura de Tecnologia da Informação; A certificação ITIL visa capacitar e certificar os profissionais, fazendo com que ele possa contribuir nas áreas de TI, na integração e entrega de soluções e serviços. Existem 4 níveis de certificação: Foundation, Advanced, Intermediate e ExecutiveVocê pode se preparar para a certificação de duas maneiras: Estudando por conta própria ou por meio de algum curso. No próprio site da EXIN, você pode baixar um guia de preparação para a prova.Referências Principais-certificacoes-em-TI Saiba-o-que-e-e-como-tirar-a-certificacao-itil/ https://www.academiccourses.com.br/Certificado/Tecnologia-da-Informação/ https://cio.com.br/mais-15-certificacoes-de-ti-muito-valiosas-hoje/ 10 certificações em TI muito valorizadas hoje As 15 principais certificações para desenvolvedores de software em 2023" }, { "title": "Tinkercad - introdução ao Simulador", "url": "/aulas/posts/introducao-ao-simulador-tinkercad/", "categories": "AULAS, NOÇÕES DE ROBÓTICA", "tags": "arduino, robótica, curso, programação", "date": "2023-03-06 09:00:00 -0300", "snippet": "A programação visual com blocos é uma forma de programação em que os programas são criados juntando blocos em uma interface gráfica. Isso permite que as pessoas criem programas sem precisar escreve...", "content": "A programação visual com blocos é uma forma de programação em que os programas são criados juntando blocos em uma interface gráfica. Isso permite que as pessoas criem programas sem precisar escrever código, tornando a programação mais acessível para iniciantes e pessoas sem experiência em programação.Como acessarO Tinkercad é uma ferramenta online que permite simular o funcionamento de um Arduino, sem a necessidade de possuir o hardware físico. Para programar no Arduino usando o simulador Tinkercad, siga os seguintes passos: Acesse o site do Tinkercad (https://www.tinkercad.com/); Crie uma nova conta (ou faça login se já possuir uma); Clique em “Circuits” e depois em “Create new circuit”; Selecione o componente “Arduino” na lista de componentes disponíveis.Prática no simuladorPara ilustrar um exemplo de prática no Tinkercad, vamos criar um programa para acionar um LED conectado ao pino 13 do Arduino através de um botão conectado ao pino 2. Adicione um LED na placa do Arduino, conectando seu anodo no pino 13 e o catodo no GND. Adicione um botão na placa do Arduino, conectando uma das pernas no pino 2 e a outra perna no GND. Abra o código do programa clicando no botão “Code” na parte inferior esquerda da tela. No campo “setup()”, defina o pino 13 como saída e o pino 2 como entrada:void setup(){ pinMode(13, OUTPUT); pinMode(2, INPUT);} No campo “loop()”, leia o estado do botão (HIGH ou LOW) e acione o LED de acordo:void loop(){ if (digitalRead(2) == HIGH) { // se o botão estiver pressionado digitalWrite(13, HIGH); // liga o LED } else { // senão digitalWrite(13, LOW); // desliga o LED }} Clique no botão “Start Simulation” na parte superior direita da tela para iniciar a simulação. Pressione o botão na placa do Arduino e verifique se o LED acende e apaga de acordo com o estado do botão.Este é um exemplo simples de como programar no Arduino usando o simulador Tinkercad. O Tinkercad oferece diversos componentes e ferramentas que permitem criar projetos mais complexos e avançados.Referências Apostila de Robótica" }, { "title": "Meios físicos - continuação", "url": "/aulas/posts/meios-fisicos-continuacao/", "categories": "AULAS, INFRAESTRUTURA DE REDES", "tags": "infraestrutura, protocolos", "date": "2023-03-02 10:40:00 -0300", "snippet": "Meios físicos de comunicação e suas formas de transmissão de dados.Os bits de dadosPara definir os meios físicos é necessário entender o comportamento dos bits. Um bit viaja partir de um sistema at...", "content": "Meios físicos de comunicação e suas formas de transmissão de dados.Os bits de dadosPara definir os meios físicos é necessário entender o comportamento dos bits. Um bit viaja partir de um sistema através de uma série de links e roteadores até atingir o sistema de destino. Nesse caminho, o bit é transmitido diversas vezes. O sistema de origem transmite o bit, o primeiro roteador recebe o bit e o transmite e assim por diante. Enquanto viaja da origem para o destino, o bit passa por uma série de transmissores e receptores. Cada bit é enviado pela propagação de ondas eletromagnéticas ou pulsos ópticos através de um meiofísico.Meios físicosOs meios físicos podem ter formas distintas e não precisam ser do mesmo tipo em todo o caminho. Exemplos de meios físicos incluem: Par trançado: é um cabo de cobre composto por pares de fios torcidos, usado em redes de computadores, telefonia e outras aplicações. Possui uma boa relação custo-benefício, é fácil de instalar, mas é mais suscetível a interferências eletromagnéticas em comparação com outros meios. Cabo coaxial: é um cabo com um núcleo interno condutor, revestido por um material isolante, seguido de uma malha condutora e, por fim, uma capa externa. É usado em redes de TV a cabo, internet a cabo e outras aplicações. Possui boa imunidade a interferências eletromagnéticas, mas é mais caro e difícil de instalar em comparação com o par trançado. Fibra óptica: é um cabo composto por filamentos de vidro ou plástico que transmitem sinais de luz. É usado em redes de alta velocidade, como a internet de fibra óptica. Possui alta imunidade a interferências eletromagnéticas, maior capacidade de transmissão de dados e é muito resistente a interferências externas. No entanto, é mais caro e difícil de instalar em comparação com os outros meios. Ondas de rádio: são sinais eletromagnéticos que se propagam pelo ar. São usados em redes sem fio, como o Wi-Fi e o Bluetooth. Possuem boa mobilidade, mas possuem uma capacidade limitada de transmissão de dados e podem ser afetados por interferências de outros sinais. Satélite: é um meio de transmissão de dados que utiliza satélites artificiais em órbita terrestre. É usado em redes de TV via satélite e em algumas aplicações de internet. Possui uma grande área de cobertura, mas é mais caro e pode ser afetado pelas condições meteorológicas.Os meios físicos dividem-se em duas categorias: meios encapsulados e não encapsulados.Nos meios encapsulados, as ondas percorrem um material sólido. Os exemplos desse tipo de meio são: cabo de fibra-óptica, par-trançado e cabo coaxial.Nos meios não encapsulados, as ondas propagam-se na atmosfera e no espaço. Exemplos:LAN wireless e canal digital de satélite.O custo do link físico é relativamente baixo comparado a outros custos da rede. O custo de instalação do link físico pode ser muito superior ao custo do material.Por essa razão, muitos construtores instalam tipos variados de cabos em todas as salas de um edifício. Mesmo que, inicialmente, só um meio seja usado, existe uma boa chance de outro meio ser usado no futuro. Dessa forma, economiza-se dinheiro evitando a colocação de fios no futuro.Par trançadoO meio de transmissão por par trançado é um tipo de cabo de cobre usado para transmitir sinais digitais ou analógicos em redes de computadores, telefonia, sistemas de segurança, entre outros.Cada cabo é composto por um conjunto de pares de fios de cobre isolados e torcidos em torno de si mesmos para minimizar a interferência eletromagnética entre eles. Essa torção dos pares de fios cria uma estrutura em forma de hélice que protege os fios do cabo contra interferência externa e reduz a diafonia entre os pares de fios adjacentes.Existem dois tipos principais de par trançado: o UTP (Unshielded Twisted Pair), que é o par trançado sem blindagem, e o STP (Shielded Twisted Pair), que é o par trançado com blindagem.O UTP é o tipo mais comum de par trançado e é amplamente utilizado em redes de computadores, telefonia e outras aplicações. Ele não tem uma camada de proteção externa, o que o torna mais flexível e fácil de instalar. No entanto, ele é mais suscetível a interferência eletromagnética e não é adequado para ambientes com alta interferência.Já o STP é um cabo mais robusto, com uma camada de blindagem que protege ainda mais contra interferência eletromagnética. Ele é mais adequado para ambientes com alta interferência, como fábricas e hospitais, mas é mais difícil de instalar e mais caro.Em resumo, o par trançado é um meio de transmissão de dados muito utilizado em redes de computadores e outras aplicações, por conta de sua eficiência na redução da interferência eletromagnética e sua facilidade de instalação.Meios MagnéticosUma forma muito barata de se transportar dados de um lugar para o outro é através de fitas magnéticas ou discos flexíveis. Apesar de simples é muito confiável e, dependendo da maneira como é feita, pode ser mais eficaz que muitos meios de transmissão guiados.Por exemplo, vamos supor que um usuário queira fazer um back-up de seu HD em outro computador localizado algumas quadras de distância. Um HD de 80 GB portátil leva algumas horas para ser completamente preenchido em um computador e levando para outro. No entanto, transmitir 80GB em uma Internet ADSL comum levaria muito mais tempo.Cabo CoaxialO cabo coaxial é formado por dois condutores separados e envoltos por um material isolante. O primeiro condutor, normalmente o cobre, é mais rígido e está envolto pelo segundo condutor, este em forma de malha e normalmente de alumínio. Este segundo condutor, além de ajudar na transmissão é também responsável por proteger o primeiro condutor contra interferências magnéticas.O cabo coaxial pode ser classificado de duas formas dependendo do material do condutor em malha.Quando este material é o alumínio o cabo é dito Cabo Coaxial Grosso (Resistência de 75 ohms, transmissão numa velocidade de até 10 mbps a uma freqüência de 10 Ghz). Quando esse material é cobre o cabo é dito Cabo Coaxial Fino (Resistência de 50 ohms, transmissão numa velocidade de até 10 mbps a uma freqüência de 2 Ghz).Fibra ópticaOs cabos de fibra óptica são filamentos de vidro ou de materiais poliméricos com capacidade de transmitir sinais digitais sob a forma de sinais luminosos. Tal filamento pode apresentar diâmetros variáveis, dependendo da aplicação, indo desde diâmetros ínfimos, da ordem de micrômetros (mais finos que um fio de cabelo) até vários milímetros. Graças a essa característica, são cabos que conseguem ter uma velocidade ilimitada, se comparados com cabos elétricos. Também torna seu uso desejável quando existe a necessidade de transmitir dados a grandes distâncias.A fibra óptica é um meio de transmissão de dados que utiliza filamentos de vidro ou plástico para transmitir sinais de luz. Ela é composta por dois elementos básicos: o núcleo e o revestimento. O núcleo é o filamento de vidro ou plástico por onde a luz é transmitida. O revestimento é uma camada de material reflexivo que protege o núcleo e reflete a luz de volta para dentro da fibra.A transmissão de dados na fibra óptica funciona da seguinte forma: um dispositivo emissor converte o sinal elétrico em um sinal óptico, que é transmitido pelo núcleo da fibra. O sinal óptico é refletido no revestimento várias vezes, o que permite que ele seja transmitido através da fibra sem se dissipar. No receptor, o sinal óptico é convertido de volta em um sinal elétrico.A fibra óptica é capaz de transmitir dados a uma velocidade muito alta, pois a luz viaja através do núcleo da fibra a uma velocidade próxima da velocidade da luz. Além disso, ela é menos suscetível a interferências eletromagnéticas em comparação com outros meios de transmissão de dados, como o cabo de cobre.A instalação da fibra óptica pode ser mais cara e trabalhosa em comparação com outros meios de transmissão, devido à necessidade de equipamentos especializados e à delicadeza dos filamentos. No entanto, ela é amplamente utilizada em redes de alta velocidade, como a internet de fibra óptica, devido à sua capacidade de transmissão de dados em alta velocidade e sua resistência a interferências externas.Outra característica interessante destes tipos de cabos é que eles não sofrem interferência de campos eletromagnéticos.São cabos com custo mais alto, e com certa dificuldade de manuseio. Entretanto, seu uso vem se disseminando cada vez mais, com a necessidade cada vez maior de velocidades mais altas. Seu custo também diminui dia após dia, e a matéria-prima para a construção do cabo é abundante. Os cabos de fibra óptica são compostos por dois fios(um para a recepção e outro para a transmissão) formados por minúsculos cilindros de vidro. Possui duas camadas: Núcleo (vítreo) e Revestimento (Silicone).Multímodo DegrauPrimeiro tipo de fibra óptica que surgiu é também o mais simples dos três.Aqui, o núcleo e o revestimento estão claramente definidos. O núcleo é formado por um único tipo de material, tendo então índice de refração constante e diâmetro variável. Os raios de luz refletem no revestimento em vários ângulos, resultando em comprimentos de caminhos diferentes para o sinal. Isto causa o espalhamento do sinal ao longo do cabo e limita a largura de banda do cabo.Este fenômeno é chamado de dispersão modal. A atenuação é alta, fazendo com que essas fibras sejam utilizadas em transmissão de dados em curtas distâncias e iluminação. Banda: até 35 Mhz.km Núcleo: entre 50 e 400 mm Atenuação: maior que 5 dB/kmMultímodo Refração GradualNeste tipo de fibra óptica, a interface entre o núcleo e o revestimento é alterada para propiciar índices de refração diferentes dentro do núcleo e do revestimento. Os sinais luminosos viajam no eixo do cabo encontrando uma grande refração, tendo uma velocidade de transmissão baixa. Os raios que viajam na mesma direção do cabo tem um índice de refração menor e são propagados mais rapidamente. Com isso, todos os modos do sinal poderão viajar a uma mesma velocidade efetiva no cabo, de maneira a reduzir a dispersão modal. É normalmente empregada nas telecomunicações. Banda: até 500 Mhz.km Núcleo:entre 125 e 50 mm Atenuação: 3 dB/kmMonomodoCom um diâmetro de núcleo diminuto, o índice núcleo/revestimentopermite que apenas um modo seja propagado através da fibra, o que diminui a dispersão do pulso luminoso. A emissão de sinais em fibras do tipo monomodo só é possível com a utilização de laser. Contudo, o equipamento como um todo é mais caro que o dos sistemas multimodo. Esse tipo de fibra possui grande emprego em sistemas telefônicos. Banda: até 100 GHz.km Núcleo: 8 micrômetros (μm) Atenuação: entre 0,2 dB/km e 0,7 dB/kmTabela comparativa de cabostabela comparativa entre três tipos de cabos de rede mais comuns: Característica Cabo Coaxial Cabo UTP Cabo STP Cabo de Fibra Óptica Material do condutor Cobre Cobre Cobre Vidro ou plástico Blindagem Blindado Sem blindagem Blindado Sem blindagem Interferência eletromagnética Resistente Suscetível Resistente Resistente Largura de banda Até 100 Mbps Até 10 Gbps Até 10 Gbps Mais de 10 Gbps Distância máxima de transmissão Até 500 metros 100 metros 100 metros Mais de 10 km Preço Mais barato Mais barato Mais caro Mais caro O cabo UTP (Unshielded Twisted Pair) é o mais comum, pois é mais barato e é capaz de transmitir dados em alta velocidade por uma distância de até 100 metros. No entanto, ele é mais suscetível a interferências eletromagnéticas, o que pode afetar a qualidade da transmissão de dados.O cabo STP (Shielded Twisted Pair) é uma opção mais cara, mas oferece maior proteção contra interferências eletromagnéticas. Ele também pode transmitir dados em alta velocidade por uma distância de até 100 metros.O cabo de fibra óptica é o mais caro dos três, mas é capaz de transmitir dados a velocidades muito mais altas e por uma distância muito maior do que os cabos de cobre. Além disso, ele é resistente a interferências eletromagnéticas e é uma escolha popular para redes de longa distância e em alta velocidade, como redes de telecomunicações.Tabela comparativa de fibra ópticatabela comparativa entre dois tipos de fibra óptica comumente utilizados: Característica Fibra monomodo Fibra multimodo Diâmetro do núcleo 8-10 micrômetros 50-62,5 micrômetros Comprimento de onda de operação 1310 nm e 1550 nm 850 nm e 1300 nm Distância máxima de transmissão Mais de 10 km Até 550 metros Velocidade de transmissão Mais de 10 Gbps Até 10 Gbps Utilização Redes de longa distância e em alta velocidade Redes de curta distância e baixa velocidade A fibra monomodo tem um diâmetro de núcleo menor e é projetada para transmissões de longa distância e em alta velocidade, como em redes de telecomunicações. Já a fibra multimodo tem um diâmetro de núcleo maior e é mais adequada para redes de curta distância e baixa velocidade, como em redes locais (LANs).A fibra monomodo também é mais cara do que a fibra multimodo, devido à sua fabricação mais complexa e aos equipamentos especiais necessários para sua instalação. No entanto, ela é capaz de suportar maiores distâncias e velocidades de transmissão, tornando-a a escolha preferida para aplicações em redes de alta velocidade.Transmissão via rádioNeste tipo de transmissão utilizamos várias características físicas que as ondas de rádio podem oferecer. Elas são fáceis de serem geradas, atravessam paredes, contornam objetos, são refletidas pela atmosfera e percorrem longas distâncias. É muito útil quando se quer construir uma rede em regiões onde esticar cabos é coisa complicada, como em uma cidade cheia de prédios, ou dentro de um prédio ou em regiões montanhosas.A desvantagem é que é preciso uma visada perfeita (sem obstáculos) para uma boa qualidade de tráfego, embora fatores como chuva, neblina, serração não influenciam a via rádio.Ondas infravermelhasAs ondas infravermelhas são largamente utilizadas em controles remotos, por exemplo. Uma característica importante desta onda é que ela não pode atravessar objetos sólidos. Assim pode-se construir LAN’s mais seguras contra espionagem eletrônica. Contudo, essas transmissões estão limitadas a cerca de 30 metros, e possui largura de banda de até cerca de 30Mbps.Outros meiosAs redes também podem ser construídas por outros meios, que agora estão conquistando mercado. Entre eles:BluetoothAs redes Bluetooth (chamadas de rede PicoNet) tem suas vantagens e desvantagens não estão aqui. Dentre suas vantagens, está o preço bem acessível dos adaptadores Bluetooth, baixo consumo de energia, e a possibilidade de usar esses mesmos adaptadores para fazer a conexão com diversos gadgtes do dia-a-dia. Como desvantagem, a velocidade da conexão Bluetooth raramente passa de 700kb/s, o alcance é do no máximo 10 metros, e só podem ser ligados 8 acessos simultâneos. O Bluetooth é uma tecnologia de comunicação sem fio de curto alcance que permite a transmissão de dados entre dispositivos eletrônicos. Ele utiliza ondas de rádio de curto alcance para estabelecer uma conexão sem fio entre os dispositivos. Quando dois dispositivos com tecnologia Bluetooth desejam se comunicar, eles usam um processo chamado “emparelhamento”. Durante o emparelhamento, os dispositivos estabelecem uma conexão criptografada e trocam informações sobre suas capacidades e funções. Após o emparelhamento, os dispositivos Bluetooth podem trocar dados em um modo de transmissão conhecido como “conexão ponto a ponto”. Neste modo, um dispositivo envia os dados para outro dispositivo diretamente, sem a necessidade de um roteador ou outro dispositivo intermediário. O Bluetooth pode ser usado para conectar dispositivos de diferentes tipos, como fones de ouvido, alto-falantes, teclados, mouses, smartphones, tablets e outros dispositivos eletrônicos. Alguns dos recursos mais comuns do Bluetooth incluem a capacidade de transmitir áudio de alta qualidade, controlar dispositivos remotamente e compartilhar dados entre dispositivos. Além disso, a tecnologia Bluetooth também pode ser usada para criar redes de área pessoal (PANs) em que vários dispositivos podem se comunicar uns com os outros. Essas redes de área pessoal são geralmente limitadas a uma distância de cerca de 10 metros, mas podem ser estendidas com o uso de dispositivos intermediários, como roteadores ou repetidores.PLC (Power Line Communications)Pensando na enorme rede elétrica que já existe em todo o mundo, foi desenvolvida essa tecnologia para a transferência de dados e voz pela rede elétrica. Outra vantagem é a fácil instalação desse tipo de rede. Agora, como desvantagens, temos a quantidade de interferência que ainda existe nesse meio, e o imenso compartilhamento dele.USB (Cabo de rede USB)As portas Universal Serial Bus mais conhecidas como USB, estão presentes em todos os computadores atuais, além de ser a interface mais utilizada pelos outros periféricos. Para montar uma rede via USB, é necessário um cabo especial, que possui um hardware controlador de rede, que será o responsável pela criação de uma rede virtual entre os computadores. Apesar de ter uma alta taxa de transferência, as redes USB são limitadas a conectar apenas duas máquinas.Referências Apostila de Meios de Comunicação de Dados" }, { "title": "Níveis de graduação", "url": "/aulas/posts/niveis-de-graduacao-copy/", "categories": "AULAS, PROFISSÃO E FORMAÇÃO", "tags": "profissão, empregabilidade", "date": "2023-03-02 10:00:00 -0300", "snippet": "title: “Níveis de graduação”date: 2023-02-27 10:00:00 -0300categories: [AULAS, PLANEJAMENTO DE CARREIRA]tags: [planejamento, carreira, graduação]—Existem vários níveis de graduação que podem ser ú...", "content": "title: “Níveis de graduação”date: 2023-02-27 10:00:00 -0300categories: [AULAS, PLANEJAMENTO DE CARREIRA]tags: [planejamento, carreira, graduação]—Existem vários níveis de graduação que podem ser úteis para um planejamento de carreira.Níveis de graduação Técnicos: formação profissionalizante que visam preparar os estudantes para atuarem em áreas específicas do mercado de trabalho; Tecnológicos: formação de curta duração e focada na prática do mercado de trabalho; Graduação: Um diploma de graduação é geralmente necessário para muitas carreiras profissionais. Ele oferece uma base sólida em uma determinada área de estudo e pode ajudar a preparar um indivíduo para uma variedade de carreiras. Pós-graduação: Um diploma de pós-graduação, como um mestrado ou doutorado, pode ajudar a aprimorar as habilidades e conhecimentos em uma área específica, permitindo que os indivíduos avancem em suas carreiras ou tenham acesso a cargos de maior responsabilidade e remuneração. Certificações: Certificações profissionais podem ser uma maneira de se destacar em um campo específico. Elas são geralmente emitidas por organizações profissionais e exigem que os candidatos passem por uma série de testes para demonstrar suas habilidades e conhecimentos. Cursos de atualização: A educação continuada é uma parte importante do planejamento de carreira. Cursos de atualização podem ajudar os profissionais a se manterem atualizados com as últimas tendências e tecnologias em seu campo. Treinamentos: Treinamentos específicos podem ser necessários para carreiras que exigem habilidades técnicas, tais como programação de computadores, design gráfico, ou outras habilidades práticas. O treinamento pode ser oferecido por organizações de treinamento ou pelo próprio empregador.Médio técnicoOs cursos técnicos de nível médio são cursos de formação profissionalizante que visam preparar os estudantes para atuarem em áreas específicas do mercado de trabalho. Eles têm duração média de três anos e podem ser oferecidos por instituições públicas ou privadas.Os cursos técnicos são voltados para a prática e desenvolvimento de habilidades específicas em áreas como saúde, tecnologia, administração, mecânica, eletrônica, entre outras. Os estudantes recebem uma formação teórica e prática que lhes permite exercer funções técnicas e operacionais em empresas, indústrias e serviços.Os cursos técnicos são uma opção interessante para quem deseja se inserir rapidamente no mercado de trabalho, já que sua duração é mais curta em comparação com cursos de graduação. Além disso, muitos cursos técnicos oferecem estágios ou programas de aprendizagem, o que pode facilitar a inserção no mercado de trabalho.Os cursos técnicos são regulamentados pelo Ministério da Educação e conferem aos formados um diploma de técnico de nível médio, habilitando-os para o exercício profissional na área escolhida. É importante ressaltar que muitos cursos técnicos também permitem que os estudantes sigam para cursos de graduação na mesma área, caso desejem prosseguir seus estudos.TecnológicosOs cursos tecnólogos existem no Brasil desde a década de 1960, mas nos últimos anos têm se tornando mais populares devido à procura por uma formação de curta duração e focada na prática do mercado de trabalho. Os cursos tecnólogos são uma alternativa aos cursos de graduação tradicionais, que geralmente exigem uma carga horária mais extensa e são mais teóricos.Os cursos tecnólogos têm duração média de dois anos e oferecem uma formação mais específica em áreas como tecnologia da informação, gestão empresarial, design, gastronomia, entre outras. Eles são voltados para o desenvolvimento de habilidades práticas e podem ser uma opção interessante para quem busca uma formação rápida e eficiente para ingressar no mercado de trabalho ou para se atualizar em uma área específica.Os cursos tecnólogos são reconhecidos pelo Ministério da Educação e conferem diploma de graduação aos formados, possibilitando a continuidade dos estudos em nível de pós-graduação, como especialização, mestrado e doutorado, se assim desejarem. Além disso, os tecnólogos também podem atuar em áreas em que os bacharéis atuam, porém com foco mais prático e habilidades mais específicas.Curso superior São cursos de graduação de nível superior que conferem diploma de conclusão de curso aos formados; Podem ser divididos em três tipos principais: bacharelados, licenciaturas e cursos tecnólogos; Têm duração média de 4 a 5 anos; Oferecem uma formação mais ampla e geral em uma área do conhecimento; Permitem que o estudante se aprofunde em áreas específicas dentro da sua área de estudo; Preparam os estudantes para exercer funções técnicas, operacionais ou gerenciais em diversas áreas do mercado de trabalho; Permitem que o estudante siga para cursos de pós-graduação, como especialização, mestrado e doutorado.Pós-graduação São cursos de especialização, mestrado ou doutorado, que conferem certificados ou diplomas aos formados; São voltados para aprofundamento em uma área específica do conhecimento; São oferecidos para quem já concluiu um curso de graduação; Têm duração variada, dependendo do tipo de curso, podendo ser de alguns meses até vários anos; Oferecem uma formação mais avançada e especializada em uma área do conhecimento; Podem ser lato sensu (especialização) ou stricto sensu (mestrado e doutorado); Permitem que o estudante desenvolva habilidades e conhecimentos específicos para atuar em áreas de pesquisa, ensino ou mercado de trabalho mais exigentes.Principais diferençasos cursos tecnólogos, bacharelados e licenciaturas são todos cursos de graduação de nível superior. No entanto, existem algumas diferenças importantes entre eles.Os cursos tecnólogos são cursos de curta duração, com cerca de dois anos de duração, e têm como objetivo preparar o aluno para exercer funções técnicas e operacionais em áreas específicas do mercado de trabalho, como tecnologia da informação, gestão empresarial, design, entre outras. Eles são mais práticos e focados em habilidades específicas, oferecendo uma formação mais rápida para o mercado de trabalho.Os cursos de bacharelado são cursos mais longos, com duração média de quatro anos, e oferecem uma formação mais abrangente em uma área do conhecimento, como engenharia, direito, medicina, entre outras. Os cursos de bacharelado oferecem uma formação mais teórica e também permitem que o estudante se aprofunde em áreas específicas dentro da sua área de estudo. Eles são mais indicados para quem deseja seguir carreiras que exigem uma formação mais completa e aprofundada em uma área do conhecimento.Os cursos de licenciatura são cursos de formação de professores e têm como objetivo preparar o aluno para atuar como professor em escolas de ensino fundamental e médio. Eles oferecem uma formação mais teórica e prática em relação à educação e pedagogia, e podem ter duração média de quatro anos. Os cursos de licenciatura são voltados para quem deseja seguir carreiras na área da educação, seja como professor ou em áreas relacionadas, como a coordenação pedagógica, por exemplo.É importante ressaltar que todos esses cursos são reconhecidos pelo Ministério da Educação e conferem diploma de graduação aos formados, possibilitando a continuidade dos estudos em nível de pós-graduação, como especialização, mestrado e doutorado, se assim desejarem.Como escolher o melhor cursoOs testes vocacionais podem ser uma ferramenta útil para ajudar a identificar interesses, aptidões e habilidades profissionais, mas não devem ser usados como a única fonte de informação para a escolha de um curso na carreira. É importante lembrar que os resultados dos testes podem variar de acordo com o momento da vida em que o indivíduo se encontra e as suas circunstâncias atuais.Além disso, é importante levar em consideração outros fatores na escolha do curso na carreira, como mercado de trabalho, perspectivas de crescimento profissional, valores pessoais e estilo de vida desejado.Existem diversos tipos de testes vocacionais, mas geralmente eles funcionam como ferramentas para ajudar a identificar interesses, habilidades e aptidões profissionais do indivíduo. Eles podem ser feitos presencialmente com a ajuda de um orientador vocacional ou psicólogo, ou de forma online, por meio de plataformas especializadas.Os testes vocacionais geralmente apresentam questões ou atividades que buscam avaliar aspectos como habilidades, interesses, valores, traços de personalidade, entre outros. Eles podem incluir perguntas sobre hobbies, atividades que o indivíduo gosta de realizar, tarefas que considera fácil ou difícil, entre outros aspectos relacionados à vida pessoal e profissional.Após a realização do teste, geralmente é feita uma análise dos resultados obtidos e uma devolutiva ao indivíduo, indicando quais áreas ou profissões podem ser mais compatíveis com seus interesses e habilidades identificados pelo teste.Portanto, o teste vocacional pode ser um bom ponto de partida para ajudar a refletir sobre interesses e habilidades profissionais, mas não deve ser a única fonte de informação para tomar uma decisão tão importante. É importante buscar orientação profissional de um psicólogo, conversar com profissionais que atuam na área desejada, realizar pesquisas sobre o mercado de trabalho e as possibilidades de carreira, além de fazer uma autoavaliação sincera e criteriosa sobre suas expectativas, valores e habilidades.Instituições de ensino superior no Ceará Universidade do Vale do Acaraú Universidade Federal do Ceará Universidade Estadual do Ceará Universidade Federal do CaririReferência Educa mais Brasil - Afinal, tecnólogo é graduação? Teste vocacional" }, { "title": "Conexões ponto e multiponto", "url": "/aulas/posts/conexoes-ponto-e-multiponto/", "categories": "AULAS, INFRAESTRUTURA DE REDES", "tags": "infraestrutura, protocolos", "date": "2023-02-28 10:40:00 -0300", "snippet": "As conexões multiponto são uma forma de conectar dois ou mais dispositivos para permitir a comunicação entre eles. Neste tipo de conexão, todos os dispositivos compartilham o mesmo meio de transmis...", "content": "As conexões multiponto são uma forma de conectar dois ou mais dispositivos para permitir a comunicação entre eles. Neste tipo de conexão, todos os dispositivos compartilham o mesmo meio de transmissão, o que significa que eles enviam e recebem dados através do mesmo canal.Um exemplo comum de conexão multiponto é a rede local (LAN). Nesse caso, vários dispositivos, como computadores, impressoras e servidores, são conectados a um único meio de transmissão, como um cabo Ethernet. Todos os dispositivos conectados a esse cabo podem enviar e receber dados uns dos outros.Outro exemplo de conexão multiponto é o barramento de sistema, que é comum em sistemas de computador. Nesse caso, vários dispositivos, como placas de som, placas de vídeo e discos rígidos, são conectados a um barramento compartilhado que permite que eles se comuniquem uns com os outros e com o processador central do sistema.Uma das vantagens das conexões multiponto é que elas são relativamente simples de instalar e configurar. Além disso, elas são geralmente mais econômicas do que as conexões ponto a ponto, uma vez que vários dispositivos podem compartilhar o mesmo meio de transmissão.No entanto, as conexões multiponto também apresentam algumas desvantagens. Como todos os dispositivos compartilham o mesmo meio de transmissão, o desempenho da rede pode ser afetado se muitos dispositivos estiverem enviando e recebendo dados ao mesmo tempo. Além disso, a segurança pode ser um problema, uma vez que todos os dispositivos conectados têm acesso aos mesmos dados.Conexões Ponto a PontoAs conexões ponto a ponto são uma forma de conectar dois dispositivos diretamente para permitir a comunicação entre eles. Nesse tipo de conexão, cada dispositivo tem exclusividade para ocupação do meio de transmissão, o que significa que eles enviam e recebem dados através de um canal dedicado.Um exemplo comum de conexão ponto a ponto é a conexão de modem a modem. Nesse caso, dois computadores são conectados diretamente através de um cabo telefônico e modems, permitindo que eles se comuniquem através da linha telefônica.Outro exemplo de conexão ponto a ponto é a conexão de um roteador a um modem. Nesse caso, o roteador é conectado diretamente ao modem para permitir o acesso à Internet a partir de vários dispositivos em uma rede local.Uma das vantagens das conexões ponto a ponto é que elas oferecem um alto nível de segurança, uma vez que apenas os dispositivos conectados têm acesso aos dados transmitidos. Além disso, essas conexões geralmente apresentam um melhor desempenho do que as conexões multiponto, uma vez que cada dispositivo tem seu próprio canal dedicado para transmissão de dados.No entanto, as conexões ponto a ponto podem ser mais complexas e dispendiosas de instalar e configurar do que as conexões multiponto. Além disso, elas podem ser limitadas pelo comprimento máximo do cabo ou distância que os dispositivos podem estar um do outro, o que pode afetar a flexibilidade da rede.Referências Apostila de Meios de Comunicação de Dados" }, { "title": "Como programar no Arduino - Sketch", "url": "/aulas/posts/como-programar-no-arduino/", "categories": "AULAS, NOÇÕES DE ROBÓTICA", "tags": "arduino, robótica, curso, programação", "date": "2023-02-28 10:40:00 -0300", "snippet": "A programação visual com blocos é uma forma de programação em que os programas são criados juntando blocos em uma interface gráfica. Isso permite que as pessoas criem programas sem precisar escreve...", "content": "A programação visual com blocos é uma forma de programação em que os programas são criados juntando blocos em uma interface gráfica. Isso permite que as pessoas criem programas sem precisar escrever código, tornando a programação mais acessível para iniciantes e pessoas sem experiência em programação.O Sketch e suas funçõesPara programar no Arduino, é necessário escrever um código em linguagem C/C++ conhecido como “sketch”. A estrutura básica de um sketch do Arduino é dividida em duas partes: a função setup() e a função loop().A função setup() é executada uma vez quando o Arduino é ligado e é usada para definir as configurações iniciais, como configurações de pinos, baud rate para a comunicação serial e outras inicializações necessárias. Por exemplo, para definir o pino 13 como saída, podemos usar o seguinte comando:void setup() { pinMode(13, OUTPUT);}Já a função loop() é executada continuamente após a função setup(), e é usada para escrever o código principal do programa. Por exemplo, para fazer o LED conectado ao pino 13 piscar, podemos usar o seguinte código:void loop() { digitalWrite(13, HIGH); // liga o LED delay(1000); // espera 1 segundo digitalWrite(13, LOW); // desliga o LED delay(1000); // espera 1 segundo}Este código faz com que o LED conectado ao pino 13 pisque a cada segundo.Além disso, é importante lembrar que é necessário incluir a biblioteca Arduino.h no início do sketch para que as funções do Arduino possam ser utilizadas. O código completo ficaria assim:#include &lt;Arduino.h&gt;void setup() { pinMode(13, OUTPUT);}void loop() { digitalWrite(13, HIGH); // liga o LED delay(1000); // espera 1 segundo digitalWrite(13, LOW); // desliga o LED delay(1000); // espera 1 segundo}Após escrever o código, é possível enviar o sketch para o Arduino através do cabo USB ou de outro meio de comunicação disponível.Referências Apostila de Robótica" }, { "title": "Diferenças entre os Níveis de graduação", "url": "/aulas/posts/niveis-de-graduacao-diferencas/", "categories": "AULAS, PLANEJAMENTO DE CARREIRA", "tags": "planejamento, carreira, graduação", "date": "2023-02-28 10:00:00 -0300", "snippet": "Existem vários níveis de graduação que podem ser úteis para um planejamento de carreira.Tecnólogo, Bacharel e Licenciado. Qual a diferença?IntroduçãoCurso de modalidade para um curso superior: Gra...", "content": "Existem vários níveis de graduação que podem ser úteis para um planejamento de carreira.Tecnólogo, Bacharel e Licenciado. Qual a diferença?IntroduçãoCurso de modalidade para um curso superior: Graduação Bacharel Licenciatura TecnólogoGraduação Nível superior; Duração de 4 a 6 anos; Maior conhecimento teórico e prático; Ministrado nas modalidades: Bacharelado LicenciaturaBacharelado Formação superior tradicional; Duração varia entre 4 e 6 anos; O bacharel estudo um pouco sobre tudo dentro da área escolhida, conferindo conhecimento superficial sobre todos os assuntos. Vantagens: Possibilita contato com inúmeras áreas de atuação da profissão escolhida. Ao concluir o profissional está apto a atuar em diversos ramos da mesma área de conhecimento, podendo se especializar em uma delas por meio de pós-graduações.Licenciatura Mesma duração do Bacharelado; Confere boa parte do currículo do bacharel; Voltado para área da educação (básica e média); Licenciatura x Bacharelado Curricular: disciplinas de cunho pedagógico; O aluno formado em licenciatura pode mudar a área de atuação com pós graduações, e tornar-se pesquisador ou começar a atuar na área técnica do curso.Tecnólogo Curso superior de tecnologia; Confere grau tecnólogo; Duração entre 2 e 3 anos; O profissional formado pode: Realizar cursos de pós-graduações; E participar de concursos públicos para nível superiorTipos de Diplomas Os cursos de bacharelado, licenciatura e tecnólogo conferem ao formando um diploma de nível superior. Reconhecidos pelo MEC. Os cursos nessas modalidades a distância também são válidos, desde que sejam reconhecidos pelo MEC.Diferenças Onde fazer graduação? Faculdades; Universidades; Centros Universitários; Institutos Tecnológicos;Cursos de Graduação (Bacharel) em TI Engenharia da Computação - foco em hardware e demais dispositivos tecnológicos, programação, programação de baixo nível e banco de dados. Ciências da Computação: Prepare-se para programação! Nesse curso você irá conhecer o clássico sobre programação e desenvolvimento, bem como, aprender o básico das linguagens de programação mais tradicionais (C, Java, etc). Engenharia de Software: a graduação forma profissionais responsáveis por desenhar e desenvolver programas computacionais e atuar na criação de jogos, aplicativos e plataformas digitais. Além disso, ele também cuida da sua manutenção e revisão.Cursos em TecnólogoSistemas de Informação: Faculdade composta por muitos tópicos de administração e gestão em TI. Comparando-se com as anteriores, espere menos hardware e programação baixo nível.Bacharelado em Tecnologia da Informação: Os alunos aprofundarão conhecimento em banco de dados, programação e engenharia de software que atuam para facilitar o acesso, análise e gerenciamento de informações, além de noção de negócios.Tipos de Cursos Licenciatura em TICiências da Computação: o curso é ofertado no grau licenciatura. Ao concluir, o profissional dá aulas de informática para o Ensino Básico, técnico ou em cursos livres.Tipos de Cursos em Tecnólogo Análise e Desenvolvimento de Sistemas; Arquitetura de Dados; Ciber segurança; Ciências de Dados; Computação em Nuvem; Desenvolvimento Mobile; Desenvolvimento Web;https://www.unopar.com.br/curso/devops-tecnologo/Referências https://www.mundovestibular.com.br/cursos/qual-a-diferenca-entre-bacharelado-licenciatura-e-tecnologo https://www.infoescola.com/educacao/diferencas-entre-tecnologo-bacharelado-e-licenciatura/ https://querobolsa.com.br/revista/diferenca-entre-graduacao-tecnologo-e-tecnico https://becode.com.br/principais-cursos-superiores-de-ti/ https://univesp.br/cursos/bacharel-em-tecnologia-da-informacao https://querobolsa.com.br/revista/entenda-quais-sao-as-diferencas-entre-os-cursos-da-area-de-tecnologia-da-informacao" }, { "title": "Meios físicos de comunicação", "url": "/aulas/posts/meios-fisicos-de-comunicacao/", "categories": "AULAS, INFRAESTRUTURA DE REDES", "tags": "infraestrutura, protocolos", "date": "2023-02-27 10:40:00 -0300", "snippet": "Meios físicos de comunicação e suas formas de transmissão de dados.Os bits de dadosPara definir os meios físicos é necessário entender o comportamento dos bits. Um bit viaja partir de um sistema at...", "content": "Meios físicos de comunicação e suas formas de transmissão de dados.Os bits de dadosPara definir os meios físicos é necessário entender o comportamento dos bits. Um bit viaja partir de um sistema através de uma série de links e roteadores até atingir o sistema de destino. Nesse caminho, o bit é transmitido diversas vezes. O sistema de origem transmite o bit, o primeiro roteador recebe o bit e o transmite e assim por diante. Enquanto viaja da origem para o destino, o bit passa por uma série de transmissores e receptores. Cada bit é enviado pela propagação de ondas eletromagnéticas ou pulsos ópticos através de um meiofísico.Meios físicosOs meios físicos podem ter formas distintas e não precisam ser do mesmo tipo em todo o caminho. Exemplos de meios físicos incluem: Par trançado: é um cabo de cobre composto por pares de fios torcidos, usado em redes de computadores, telefonia e outras aplicações. Possui uma boa relação custo-benefício, é fácil de instalar, mas é mais suscetível a interferências eletromagnéticas em comparação com outros meios. Cabo coaxial: é um cabo com um núcleo interno condutor, revestido por um material isolante, seguido de uma malha condutora e, por fim, uma capa externa. É usado em redes de TV a cabo, internet a cabo e outras aplicações. Possui boa imunidade a interferências eletromagnéticas, mas é mais caro e difícil de instalar em comparação com o par trançado. Fibra óptica: é um cabo composto por filamentos de vidro ou plástico que transmitem sinais de luz. É usado em redes de alta velocidade, como a internet de fibra óptica. Possui alta imunidade a interferências eletromagnéticas, maior capacidade de transmissão de dados e é muito resistente a interferências externas. No entanto, é mais caro e difícil de instalar em comparação com os outros meios. Ondas de rádio: são sinais eletromagnéticos que se propagam pelo ar. São usados em redes sem fio, como o Wi-Fi e o Bluetooth. Possuem boa mobilidade, mas possuem uma capacidade limitada de transmissão de dados e podem ser afetados por interferências de outros sinais. Satélite: é um meio de transmissão de dados que utiliza satélites artificiais em órbita terrestre. É usado em redes de TV via satélite e em algumas aplicações de internet. Possui uma grande área de cobertura, mas é mais caro e pode ser afetado pelas condições meteorológicas.Os meios físicos dividem-se em duas categorias: meios encapsulados e não encapsulados.Nos meios encapsulados, as ondas percorrem um material sólido. Os exemplos desse tipo de meio são: cabo de fibra-óptica, par-trançado e cabo coaxial.Nos meios não encapsulados, as ondas propagam-se na atmosfera e no espaço. Exemplos:LAN wireless e canal digital de satélite.O custo do link físico é relativamente baixo comparado a outros custos da rede. O custo de instalação do link físico pode ser muito superior ao custo do material.Por essa razão, muitos construtores instalam tipos variados de cabos em todas as salas de um edifício. Mesmo que, inicialmente, só um meio seja usado, existe uma boa chance de outro meio ser usado no futuro. Dessa forma, economiza-se dinheiro evitando a colocação de fios no futuro.Par trançadoO meio de transmissão por par trançado é um tipo de cabo de cobre usado para transmitir sinais digitais ou analógicos em redes de computadores, telefonia, sistemas de segurança, entre outros.Cada cabo é composto por um conjunto de pares de fios de cobre isolados e torcidos em torno de si mesmos para minimizar a interferência eletromagnética entre eles. Essa torção dos pares de fios cria uma estrutura em forma de hélice que protege os fios do cabo contra interferência externa e reduz a diafonia entre os pares de fios adjacentes.Existem dois tipos principais de par trançado: o UTP (Unshielded Twisted Pair), que é o par trançado sem blindagem, e o STP (Shielded Twisted Pair), que é o par trançado com blindagem.O UTP é o tipo mais comum de par trançado e é amplamente utilizado em redes de computadores, telefonia e outras aplicações. Ele não tem uma camada de proteção externa, o que o torna mais flexível e fácil de instalar. No entanto, ele é mais suscetível a interferência eletromagnética e não é adequado para ambientes com alta interferência.Já o STP é um cabo mais robusto, com uma camada de blindagem que protege ainda mais contra interferência eletromagnética. Ele é mais adequado para ambientes com alta interferência, como fábricas e hospitais, mas é mais difícil de instalar e mais caro.Em resumo, o par trançado é um meio de transmissão de dados muito utilizado em redes de computadores e outras aplicações, por conta de sua eficiência na redução da interferência eletromagnética e sua facilidade de instalação.Meios MagnéticosUma forma muito barata de se transportar dados de um lugar para o outro é através de fitas magnéticas ou discos flexíveis. Apesar de simples é muito confiável e, dependendo da maneira como é feita, pode ser mais eficaz que muitos meios de transmissão guiados.Por exemplo, vamos supor que um usuário queira fazer um back-up de seu HD em outro computador localizado algumas quadras de distância. Um HD de 80 GB portátil leva algumas horas para ser completamente preenchido em um computador e levando para outro. No entanto, transmitir 80GB em uma Internet ADSL comum levaria muito mais tempo.Cabo CoaxialO cabo coaxial é formado por dois condutores separados e envoltos por um material isolante. O primeiro condutor, normalmente o cobre, é mais rígido e está envolto pelo segundo condutor, este em forma de malha e normalmente de alumínio. Este segundo condutor, além de ajudar na transmissão é também responsável por proteger o primeiro condutor contra interferências magnéticas.O cabo coaxial pode ser classificado de duas formas dependendo do material do condutor em malha.Quando este material é o alumínio o cabo é dito Cabo Coaxial Grosso (Resistência de 75 ohms, transmissão numa velocidade de até 10 mbps a uma freqüência de 10 Ghz). Quando esse material é cobre o cabo é dito Cabo Coaxial Fino (Resistência de 50 ohms, transmissão numa velocidade de até 10 mbps a uma freqüência de 2 Ghz).Fibra ópticaOs cabos de fibra óptica são filamentos de vidro ou de materiais poliméricos com capacidade de transmitir sinais digitais sob a forma de sinais luminosos. Tal filamento pode apresentar diâmetros variáveis, dependendo da aplicação, indo desde diâmetros ínfimos, da ordem de micrômetros (mais finos que um fio de cabelo) até vários milímetros. Graças a essa característica, são cabos que conseguem ter uma velocidade ilimitada, se comparados com cabos elétricos. Também torna seu uso desejável quando existe a necessidade de transmitir dados a grandes distâncias.A fibra óptica é um meio de transmissão de dados que utiliza filamentos de vidro ou plástico para transmitir sinais de luz. Ela é composta por dois elementos básicos: o núcleo e o revestimento. O núcleo é o filamento de vidro ou plástico por onde a luz é transmitida. O revestimento é uma camada de material reflexivo que protege o núcleo e reflete a luz de volta para dentro da fibra.A transmissão de dados na fibra óptica funciona da seguinte forma: um dispositivo emissor converte o sinal elétrico em um sinal óptico, que é transmitido pelo núcleo da fibra. O sinal óptico é refletido no revestimento várias vezes, o que permite que ele seja transmitido através da fibra sem se dissipar. No receptor, o sinal óptico é convertido de volta em um sinal elétrico.A fibra óptica é capaz de transmitir dados a uma velocidade muito alta, pois a luz viaja através do núcleo da fibra a uma velocidade próxima da velocidade da luz. Além disso, ela é menos suscetível a interferências eletromagnéticas em comparação com outros meios de transmissão de dados, como o cabo de cobre.A instalação da fibra óptica pode ser mais cara e trabalhosa em comparação com outros meios de transmissão, devido à necessidade de equipamentos especializados e à delicadeza dos filamentos. No entanto, ela é amplamente utilizada em redes de alta velocidade, como a internet de fibra óptica, devido à sua capacidade de transmissão de dados em alta velocidade e sua resistência a interferências externas.Outra característica interessante destes tipos de cabos é que eles não sofrem interferência de campos eletromagnéticos.São cabos com custo mais alto, e com certa dificuldade de manuseio. Entretanto, seu uso vem se disseminando cada vez mais, com a necessidade cada vez maior de velocidades mais altas. Seu custo também diminui dia após dia, e a matéria-prima para a construção do cabo é abundante. Os cabos de fibra óptica são compostos por dois fios(um para a recepção e outro para a transmissão) formados por minúsculos cilindros de vidro. Possui duas camadas: Núcleo (vítreo) e Revestimento (Silicone).Multímodo DegrauPrimeiro tipo de fibra óptica que surgiu é também o mais simples dos três.Aqui, o núcleo e o revestimento estão claramente definidos. O núcleo é formado por um único tipo de material, tendo então índice de refração constante e diâmetro variável. Os raios de luz refletem no revestimento em vários ângulos, resultando em comprimentos de caminhos diferentes para o sinal. Isto causa o espalhamento do sinal ao longo do cabo e limita a largura de banda do cabo.Este fenômeno é chamado de dispersão modal. A atenuação é alta, fazendo com que essas fibras sejam utilizadas em transmissão de dados em curtas distâncias e iluminação. Banda: até 35 Mhz.km Núcleo: entre 50 e 400 mm Atenuação: maior que 5 dB/kmMultímodo Refração GradualNeste tipo de fibra óptica, a interface entre o núcleo e o revestimento é alterada para propiciar índices de refração diferentes dentro do núcleo e do revestimento. Os sinais luminosos viajam no eixo do cabo encontrando uma grande refração, tendo uma velocidade de transmissão baixa. Os raios que viajam na mesma direção do cabo tem um índice de refração menor e são propagados mais rapidamente. Com isso, todos os modos do sinal poderão viajar a uma mesma velocidade efetiva no cabo, de maneira a reduzir a dispersão modal. É normalmente empregada nas telecomunicações. Banda: até 500 Mhz.km Núcleo:entre 125 e 50 mm Atenuação: 3 dB/kmMonomodoCom um diâmetro de núcleo diminuto, o índice núcleo/revestimentopermite que apenas um modo seja propagado através da fibra, o que diminui a dispersão do pulso luminoso. A emissão de sinais em fibras do tipo monomodo só é possível com a utilização de laser. Contudo, o equipamento como um todo é mais caro que o dos sistemas multimodo. Esse tipo de fibra possui grande emprego em sistemas telefônicos. Banda: até 100 GHz.km Núcleo: 8 micrômetros (μm) Atenuação: entre 0,2 dB/km e 0,7 dB/kmTabela comparativa de cabostabela comparativa entre três tipos de cabos de rede mais comuns: Característica Cabo Coaxial Cabo UTP Cabo STP Cabo de Fibra Óptica Material do condutor Cobre Cobre Cobre Vidro ou plástico Blindagem Blindado Sem blindagem Blindado Sem blindagem Interferência eletromagnética Resistente Suscetível Resistente Resistente Largura de banda Até 100 Mbps Até 10 Gbps Até 10 Gbps Mais de 10 Gbps Distância máxima de transmissão Até 500 metros 100 metros 100 metros Mais de 10 km Preço Mais barato Mais barato Mais caro Mais caro O cabo UTP (Unshielded Twisted Pair) é o mais comum, pois é mais barato e é capaz de transmitir dados em alta velocidade por uma distância de até 100 metros. No entanto, ele é mais suscetível a interferências eletromagnéticas, o que pode afetar a qualidade da transmissão de dados.O cabo STP (Shielded Twisted Pair) é uma opção mais cara, mas oferece maior proteção contra interferências eletromagnéticas. Ele também pode transmitir dados em alta velocidade por uma distância de até 100 metros.O cabo de fibra óptica é o mais caro dos três, mas é capaz de transmitir dados a velocidades muito mais altas e por uma distância muito maior do que os cabos de cobre. Além disso, ele é resistente a interferências eletromagnéticas e é uma escolha popular para redes de longa distância e em alta velocidade, como redes de telecomunicações.Tabela comparativa de fibra ópticatabela comparativa entre dois tipos de fibra óptica comumente utilizados: Característica Fibra monomodo Fibra multimodo Diâmetro do núcleo 8-10 micrômetros 50-62,5 micrômetros Comprimento de onda de operação 1310 nm e 1550 nm 850 nm e 1300 nm Distância máxima de transmissão Mais de 10 km Até 550 metros Velocidade de transmissão Mais de 10 Gbps Até 10 Gbps Utilização Redes de longa distância e em alta velocidade Redes de curta distância e baixa velocidade A fibra monomodo tem um diâmetro de núcleo menor e é projetada para transmissões de longa distância e em alta velocidade, como em redes de telecomunicações. Já a fibra multimodo tem um diâmetro de núcleo maior e é mais adequada para redes de curta distância e baixa velocidade, como em redes locais (LANs).A fibra monomodo também é mais cara do que a fibra multimodo, devido à sua fabricação mais complexa e aos equipamentos especiais necessários para sua instalação. No entanto, ela é capaz de suportar maiores distâncias e velocidades de transmissão, tornando-a a escolha preferida para aplicações em redes de alta velocidade.Transmissão via rádioNeste tipo de transmissão utilizamos várias características físicas que as ondas de rádio podem oferecer. Elas são fáceis de serem geradas, atravessam paredes, contornam objetos, são refletidas pela atmosfera e percorrem longas distâncias. É muito útil quando se quer construir uma rede em regiões onde esticar cabos é coisa complicada, como em uma cidade cheia de prédios, ou dentro de um prédio ou em regiões montanhosas.A desvantagem é que é preciso uma visada perfeita (sem obstáculos) para uma boa qualidade de tráfego, embora fatores como chuva, neblina, serração não influenciam a via rádio.Ondas infravermelhasAs ondas infravermelhas são largamente utilizadas em controles remotos, por exemplo. Uma característica importante desta onda é que ela não pode atravessar objetos sólidos. Assim pode-se construir LAN’s mais seguras contra espionagem eletrônica. Contudo, essas transmissões estão limitadas a cerca de 30 metros, e possui largura de banda de até cerca de 30Mbps.Outros meiosAs redes também podem ser construídas por outros meios, que agora estão conquistando mercado. Entre eles:BluetoothAs redes Bluetooth (chamadas de rede PicoNet) tem suas vantagens e desvantagens não estão aqui. Dentre suas vantagens, está o preço bem acessível dos adaptadores Bluetooth, baixo consumo de energia, e a possibilidade de usar esses mesmos adaptadores para fazer a conexão com diversos gadgtes do dia-a-dia. Como desvantagem, a velocidade da conexão Bluetooth raramente passa de 700kb/s, o alcance é do no máximo 10 metros, e só podem ser ligados 8 acessos simultâneos. O Bluetooth é uma tecnologia de comunicação sem fio de curto alcance que permite a transmissão de dados entre dispositivos eletrônicos. Ele utiliza ondas de rádio de curto alcance para estabelecer uma conexão sem fio entre os dispositivos. Quando dois dispositivos com tecnologia Bluetooth desejam se comunicar, eles usam um processo chamado “emparelhamento”. Durante o emparelhamento, os dispositivos estabelecem uma conexão criptografada e trocam informações sobre suas capacidades e funções. Após o emparelhamento, os dispositivos Bluetooth podem trocar dados em um modo de transmissão conhecido como “conexão ponto a ponto”. Neste modo, um dispositivo envia os dados para outro dispositivo diretamente, sem a necessidade de um roteador ou outro dispositivo intermediário. O Bluetooth pode ser usado para conectar dispositivos de diferentes tipos, como fones de ouvido, alto-falantes, teclados, mouses, smartphones, tablets e outros dispositivos eletrônicos. Alguns dos recursos mais comuns do Bluetooth incluem a capacidade de transmitir áudio de alta qualidade, controlar dispositivos remotamente e compartilhar dados entre dispositivos. Além disso, a tecnologia Bluetooth também pode ser usada para criar redes de área pessoal (PANs) em que vários dispositivos podem se comunicar uns com os outros. Essas redes de área pessoal são geralmente limitadas a uma distância de cerca de 10 metros, mas podem ser estendidas com o uso de dispositivos intermediários, como roteadores ou repetidores.PLC (Power Line Communications)Pensando na enorme rede elétrica que já existe em todo o mundo, foi desenvolvida essa tecnologia para a transferência de dados e voz pela rede elétrica. Outra vantagem é a fácil instalação desse tipo de rede. Agora, como desvantagens, temos a quantidade de interferência que ainda existe nesse meio, e o imenso compartilhamento dele.USB (Cabo de rede USB)As portas Universal Serial Bus mais conhecidas como USB, estão presentes em todos os computadores atuais, além de ser a interface mais utilizada pelos outros periféricos. Para montar uma rede via USB, é necessário um cabo especial, que possui um hardware controlador de rede, que será o responsável pela criação de uma rede virtual entre os computadores. Apesar de ter uma alta taxa de transferência, as redes USB são limitadas a conectar apenas duas máquinas.Referências Apostila de Meios de Comunicação de Dados" }, { "title": "Níveis de graduação", "url": "/aulas/posts/niveis-de-graduacao/", "categories": "AULAS, PLANEJAMENTO DE CARREIRA", "tags": "planejamento, carreira, graduação", "date": "2023-02-27 10:00:00 -0300", "snippet": "Existem vários níveis de graduação que podem ser úteis para um planejamento de carreira.Níveis de graduação Técnicos: formação profissionalizante que visam preparar os estudantes para atuarem em á...", "content": "Existem vários níveis de graduação que podem ser úteis para um planejamento de carreira.Níveis de graduação Técnicos: formação profissionalizante que visam preparar os estudantes para atuarem em áreas específicas do mercado de trabalho; Tecnológicos: formação de curta duração e focada na prática do mercado de trabalho; Graduação: Um diploma de graduação é geralmente necessário para muitas carreiras profissionais. Ele oferece uma base sólida em uma determinada área de estudo e pode ajudar a preparar um indivíduo para uma variedade de carreiras. Pós-graduação: Um diploma de pós-graduação, como um mestrado ou doutorado, pode ajudar a aprimorar as habilidades e conhecimentos em uma área específica, permitindo que os indivíduos avancem em suas carreiras ou tenham acesso a cargos de maior responsabilidade e remuneração. Certificações: Certificações profissionais podem ser uma maneira de se destacar em um campo específico. Elas são geralmente emitidas por organizações profissionais e exigem que os candidatos passem por uma série de testes para demonstrar suas habilidades e conhecimentos. Cursos de atualização: A educação continuada é uma parte importante do planejamento de carreira. Cursos de atualização podem ajudar os profissionais a se manterem atualizados com as últimas tendências e tecnologias em seu campo. Treinamentos: Treinamentos específicos podem ser necessários para carreiras que exigem habilidades técnicas, tais como programação de computadores, design gráfico, ou outras habilidades práticas. O treinamento pode ser oferecido por organizações de treinamento ou pelo próprio empregador.Médio técnicoOs cursos técnicos de nível médio são cursos de formação profissionalizante que visam preparar os estudantes para atuarem em áreas específicas do mercado de trabalho. Eles têm duração média de três anos e podem ser oferecidos por instituições públicas ou privadas.Os cursos técnicos são voltados para a prática e desenvolvimento de habilidades específicas em áreas como saúde, tecnologia, administração, mecânica, eletrônica, entre outras. Os estudantes recebem uma formação teórica e prática que lhes permite exercer funções técnicas e operacionais em empresas, indústrias e serviços.Os cursos técnicos são uma opção interessante para quem deseja se inserir rapidamente no mercado de trabalho, já que sua duração é mais curta em comparação com cursos de graduação. Além disso, muitos cursos técnicos oferecem estágios ou programas de aprendizagem, o que pode facilitar a inserção no mercado de trabalho.Os cursos técnicos são regulamentados pelo Ministério da Educação e conferem aos formados um diploma de técnico de nível médio, habilitando-os para o exercício profissional na área escolhida. É importante ressaltar que muitos cursos técnicos também permitem que os estudantes sigam para cursos de graduação na mesma área, caso desejem prosseguir seus estudos.TecnológicosOs cursos tecnólogos existem no Brasil desde a década de 1960, mas nos últimos anos têm se tornando mais populares devido à procura por uma formação de curta duração e focada na prática do mercado de trabalho. Os cursos tecnólogos são uma alternativa aos cursos de graduação tradicionais, que geralmente exigem uma carga horária mais extensa e são mais teóricos.Os cursos tecnólogos têm duração média de dois anos e oferecem uma formação mais específica em áreas como tecnologia da informação, gestão empresarial, design, gastronomia, entre outras. Eles são voltados para o desenvolvimento de habilidades práticas e podem ser uma opção interessante para quem busca uma formação rápida e eficiente para ingressar no mercado de trabalho ou para se atualizar em uma área específica.Os cursos tecnólogos são reconhecidos pelo Ministério da Educação e conferem diploma de graduação aos formados, possibilitando a continuidade dos estudos em nível de pós-graduação, como especialização, mestrado e doutorado, se assim desejarem. Além disso, os tecnólogos também podem atuar em áreas em que os bacharéis atuam, porém com foco mais prático e habilidades mais específicas.Curso superior São cursos de graduação de nível superior que conferem diploma de conclusão de curso aos formados; Podem ser divididos em três tipos principais: bacharelados, licenciaturas e cursos tecnólogos; Têm duração média de 4 a 5 anos; Oferecem uma formação mais ampla e geral em uma área do conhecimento; Permitem que o estudante se aprofunde em áreas específicas dentro da sua área de estudo; Preparam os estudantes para exercer funções técnicas, operacionais ou gerenciais em diversas áreas do mercado de trabalho; Permitem que o estudante siga para cursos de pós-graduação, como especialização, mestrado e doutorado.Pós-graduação São cursos de especialização, mestrado ou doutorado, que conferem certificados ou diplomas aos formados; São voltados para aprofundamento em uma área específica do conhecimento; São oferecidos para quem já concluiu um curso de graduação; Têm duração variada, dependendo do tipo de curso, podendo ser de alguns meses até vários anos; Oferecem uma formação mais avançada e especializada em uma área do conhecimento; Podem ser lato sensu (especialização) ou stricto sensu (mestrado e doutorado); Permitem que o estudante desenvolva habilidades e conhecimentos específicos para atuar em áreas de pesquisa, ensino ou mercado de trabalho mais exigentes.Principais diferençasos cursos tecnólogos, bacharelados e licenciaturas são todos cursos de graduação de nível superior. No entanto, existem algumas diferenças importantes entre eles.Os cursos tecnólogos são cursos de curta duração, com cerca de dois anos de duração, e têm como objetivo preparar o aluno para exercer funções técnicas e operacionais em áreas específicas do mercado de trabalho, como tecnologia da informação, gestão empresarial, design, entre outras. Eles são mais práticos e focados em habilidades específicas, oferecendo uma formação mais rápida para o mercado de trabalho.Os cursos de bacharelado são cursos mais longos, com duração média de quatro anos, e oferecem uma formação mais abrangente em uma área do conhecimento, como engenharia, direito, medicina, entre outras. Os cursos de bacharelado oferecem uma formação mais teórica e também permitem que o estudante se aprofunde em áreas específicas dentro da sua área de estudo. Eles são mais indicados para quem deseja seguir carreiras que exigem uma formação mais completa e aprofundada em uma área do conhecimento.Os cursos de licenciatura são cursos de formação de professores e têm como objetivo preparar o aluno para atuar como professor em escolas de ensino fundamental e médio. Eles oferecem uma formação mais teórica e prática em relação à educação e pedagogia, e podem ter duração média de quatro anos. Os cursos de licenciatura são voltados para quem deseja seguir carreiras na área da educação, seja como professor ou em áreas relacionadas, como a coordenação pedagógica, por exemplo.É importante ressaltar que todos esses cursos são reconhecidos pelo Ministério da Educação e conferem diploma de graduação aos formados, possibilitando a continuidade dos estudos em nível de pós-graduação, como especialização, mestrado e doutorado, se assim desejarem.Como escolher o melhor cursoOs testes vocacionais podem ser uma ferramenta útil para ajudar a identificar interesses, aptidões e habilidades profissionais, mas não devem ser usados como a única fonte de informação para a escolha de um curso na carreira. É importante lembrar que os resultados dos testes podem variar de acordo com o momento da vida em que o indivíduo se encontra e as suas circunstâncias atuais.Além disso, é importante levar em consideração outros fatores na escolha do curso na carreira, como mercado de trabalho, perspectivas de crescimento profissional, valores pessoais e estilo de vida desejado.Existem diversos tipos de testes vocacionais, mas geralmente eles funcionam como ferramentas para ajudar a identificar interesses, habilidades e aptidões profissionais do indivíduo. Eles podem ser feitos presencialmente com a ajuda de um orientador vocacional ou psicólogo, ou de forma online, por meio de plataformas especializadas.Os testes vocacionais geralmente apresentam questões ou atividades que buscam avaliar aspectos como habilidades, interesses, valores, traços de personalidade, entre outros. Eles podem incluir perguntas sobre hobbies, atividades que o indivíduo gosta de realizar, tarefas que considera fácil ou difícil, entre outros aspectos relacionados à vida pessoal e profissional.Após a realização do teste, geralmente é feita uma análise dos resultados obtidos e uma devolutiva ao indivíduo, indicando quais áreas ou profissões podem ser mais compatíveis com seus interesses e habilidades identificados pelo teste.Portanto, o teste vocacional pode ser um bom ponto de partida para ajudar a refletir sobre interesses e habilidades profissionais, mas não deve ser a única fonte de informação para tomar uma decisão tão importante. É importante buscar orientação profissional de um psicólogo, conversar com profissionais que atuam na área desejada, realizar pesquisas sobre o mercado de trabalho e as possibilidades de carreira, além de fazer uma autoavaliação sincera e criteriosa sobre suas expectativas, valores e habilidades.Instituições de ensino superior no Ceará Universidade do Vale do Acaraú Universidade Federal do Ceará Universidade Estadual do Ceará Universidade Federal do CaririReferência Educa mais Brasil - Afinal, tecnólogo é graduação? Teste vocacional" }, { "title": "Tipos de Arduino", "url": "/aulas/posts/tipos-de-arduino/", "categories": "AULAS, NOÇÕES DE ROBÓTICA", "tags": "arduino, robótica, curso, programação", "date": "2023-02-27 09:00:00 -0300", "snippet": "O Arduino é uma empresa italiana de tecnologia que tem como objetivo facilitar o estudo eletrônico, principalmente para quem está começando. Ela renovou a indústria de desenvolvimento de hardware p...", "content": "O Arduino é uma empresa italiana de tecnologia que tem como objetivo facilitar o estudo eletrônico, principalmente para quem está começando. Ela renovou a indústria de desenvolvimento de hardware pessoal em todo o mundo e ajudou no crescimento do movimento maker.A placa do ArduinoDescrição dos componentes do Arduino, fonte arduino.ccComponentes:1 - Conector USB para o cabo tipo AB2 - Botão de reset3 - Pinos de entrada e saída digital e PWM4 - LED verde de placa ligada5 - LED laranja conectado ao pin136 - ATmega encarregado da comunicação com o computador7 - LED TX (transmissor) e RX (receptor) da comunicação serial8 - Porta ICSP para programação serial9 - Microcontrolador ATmega 328, cérebro do Arduino10 - Cristal de quartzo 16Mhz11 - Regulador de voltagem12 - Conector fêmea 2,1mm com centro positivo13 - Pinos de voltagem e terra14 - Entradas analógicasTipos de placas do ArduinoTipos de placas do Arduino, fonte arduino.cc Arduino Uno: é a placa mais comum e popular do Arduino. Possui 14 pinos digitais, 6 pinos analógicos, um microcontrolador ATMega328P e um conector USB para programação. Arduino Mega: possui 54 pinos digitais e 16 pinos analógicos, tornando-o mais adequado para projetos maiores e mais complexos. Arduino Leonardo: é semelhante ao Arduino Uno, mas possui um microcontrolador ATMega32u4 que permite que ele seja programado como um dispositivo USB HID (Human Interface Device). Arduino Due: possui um microcontrolador ARM Cortex-M3 mais poderoso e uma arquitetura de 32 bits, tornando-o adequado para projetos mais avançados que requerem alta velocidade de processamento. Arduino Nano: é uma versão menor e mais compacta do Arduino Uno, tornando-o ideal para projetos com restrições de espaço. Arduino Pro Mini: é uma versão ainda menor e mais simplificada do Arduino Uno, projetado para ser usado em projetos permanentes onde o tamanho é crítico. Arduino Lilypad: é projetado especificamente para projetos wearable (vestíveis), como roupas e acessórios, e possui uma forma circular e conexões para sensores e atuadores. Arduino Yun: combina um microcontrolador Arduino com uma placa de processamento baseada em Linux, permitindo que ele se conecte facilmente à Internet e execute tarefas mais complexas.Shields para ArduinoUm shield é uma placa que permite expandir as funcionalidades originais do Arduino. Alguns exemplos:Placa de expansão do Arduino, fonte arduino.ccOs shields são placas de expansão que se conectam ao Arduino, permitindo que ele se comunique com outros dispositivos, adicionando funcionalidades e recursos adicionais. Existem diversos tipos de shields disponíveis para o Arduino, cada um com uma finalidade específica. A seguir, descreverei alguns dos principais shields do Arduino: Shield Ethernet: este shield permite que o Arduino se conecte a uma rede Ethernet com fio. Ele inclui um chip Ethernet embutido e suporta velocidades de até 10 Mbps. Com este shield, é possível criar projetos que se conectem à Internet e enviem dados para servidores remotos ou recebam informações de dispositivos conectados à rede. Motor Shield: este shield permite que o Arduino controle motores DC e motores de passo. Ele inclui duas pontes H (H-bridge) que permitem controlar a direção e a velocidade de até quatro motores DC ou dois motores de passo. Com este shield, é possível criar projetos de robótica, automação e controle de motores. Shield Wi-Fi: este shield permite que o Arduino se conecte a uma rede Wi-Fi. Ele inclui um módulo Wi-Fi embutido e suporta protocolos como HTTP, FTP, TCP e UDP. Com este shield, é possível criar projetos que se conectem à Internet sem fio e enviem ou recebam dados de servidores remotos ou outros dispositivos conectados à rede. Shield de relés: este shield permite que o Arduino controle até 8 relés de alta potência. Com ele, é possível criar projetos que controlem equipamentos elétricos de alta potência, como lâmpadas, motores e aquecedores. Protoshield: este shield é uma placa de circuito impresso sem componentes eletrônicos, que permite criar projetos personalizados com o Arduino. Ele tem uma área de prototipagem onde é possível soldar componentes e criar circuitos personalizados para interagir com o Arduino. Shield Host USB: este shield permite que o Arduino se comunique com dispositivos USB, como câmeras, teclados, mouses e outros. Ele inclui uma porta USB host que suporta dispositivos USB 1.1 e 2.0. Shield DOF: este shield contém um sensor de orientação e movimento de 9 eixos (3 eixos de aceleração, 3 eixos de giroscópio e 3 eixos de campo magnético), permitindo que o Arduino detecte a orientação e movimento do dispositivo em que está instalado. Shield GPS: este shield contém um receptor GPS embutido, permitindo que o Arduino obtenha informações de localização precisas. Ele pode ser usado em projetos que requerem monitoramento de localização, como rastreamento de veículos, navegação e geolocalização. Shield GSM: este shield permite que o Arduino se comunique com a rede celular, permitindo enviar e receber mensagens SMS e fazer chamadas telefônicas. Ele inclui um módulo GSM embutido que suporta várias bandas de frequência e protocolos de comunicação. Shield MP3 Player: este shield permite que o Arduino reproduza arquivos de áudio MP3 de um cartão SD. Ele inclui um decodificador de MP3 embutido e um amplificador de áudio, permitindo criar projetos que reproduzam músicas, efeitos sonoros GPS Shield: Como o nome sugere, o GPS Shield é usado para adicionar recursos de GPS aos projetos do Arduino. Este shield permite que você se conecte a satélites GPS e obtenha informações de localização e tempo precisas. Ele é compatível com o Arduino Uno e Mega, e tem um conector para uma antena externa. GSM Shield: O GSM Shield é uma placa que permite ao Arduino se comunicar com redes de telefonia celular. Ele usa um módulo de comunicação GSM/GPRS SIM900 para conectar-se a redes de telefonia celular, permitindo que você envie e receba mensagens de texto, faça e receba chamadas e acesse a internet em projetos com o Arduino. MP3 Player Shield: O MP3 Player Shield permite que o Arduino reproduza arquivos de áudio em formato MP3. Ele usa o chip VS1053B para decodificar arquivos MP3 e tem um slot para cartão SD para armazenamento de arquivos de áudio. O shield tem um conector para fones de ouvido e um amplificador de áudio embutido. XBee Shield: O XBee Shield é um shield de comunicação sem fio baseado no módulo XBee da Digi. Ele permite que o Arduino se comunique com outros dispositivos usando a tecnologia Zigbee, uma rede de comunicação sem fio de baixa potência que é adequada para aplicações de IoT. Wireless SD Shield: O Wireless SD Shield é um shield que combina comunicação sem fio e armazenamento de dados em um único dispositivo. Ele tem um slot para cartão SD para armazenamento de dados e usa o módulo de comunicação sem fio NRF24L01 para se conectar a outros dispositivos sem fio.Cada shield é projetado para adicionar funcionalidades específicas aos projetos do Arduino, tornando-os mais versáteis e poderosos. Os shields são plug and play, o que significa que você pode facilmente conectá-los ao seu Arduino e começar a usá-los imediatamente. Além disso, muitos shields são empilháveis, o que significa que você pode usar vários shields ao mesmo tempo para obter mais recursos.Referências Apostila de Robótica" }, { "title": "Gerenciador de arquivos do Windows", "url": "/aulas/posts/gerenciador-de-arquivos/", "categories": "AULAS, INFORMÁTICA BÁSICA", "tags": "informática, Senac, Windows", "date": "2023-02-24 13:00:00 -0300", "snippet": "Explorador de Arquivos no Windows 11 ajuda você a obter os arquivos necessários de forma rápida e fácil.Principais características Interface de usuário moderna: O visualizador de arquivos do Windo...", "content": "Explorador de Arquivos no Windows 11 ajuda você a obter os arquivos necessários de forma rápida e fácil.Principais características Interface de usuário moderna: O visualizador de arquivos do Windows 11 possui uma interface de usuário atualizada com ícones e menus simplificados, facilitando o acesso às funções. Suporte a vários modos de exibição: Os usuários podem escolher entre diferentes modos de exibição, incluindo ícones grandes, médios e pequenos, lista e detalhes. Previews aprimoradas: As pré-visualizações de arquivos são aprimoradas, permitindo aos usuários ver imagens, vídeos e documentos sem precisar abri-los no aplicativo correspondente. Integração com o OneDrive: O visualizador de arquivos do Windows 11 possui uma integração aprimorada com o serviço de armazenamento em nuvem da Microsoft, o OneDrive, tornando mais fácil para os usuários acessarem seus arquivos em diferentes dispositivos. Suporte para múltiplas áreas de trabalho: O visualizador de arquivos funciona perfeitamente com o recurso de múltiplas áreas de trabalho do Windows 11, permitindo que os usuários organizem seus arquivos em diferentes áreas de trabalho. Melhorias na pesquisa: A barra de pesquisa na parte superior do visualizador de arquivos é mais inteligente e pode ajudar os usuários a localizar arquivos com mais facilidade.JanelasA visualização em janelas do Windows 11 é semelhante à dos sistemas operacionais Windows anteriores, mas com algumas diferenças de design e funcionalidade. Aqui estão algumas das principais características da visualização em janelas do Windows 11: Título da janela: O título da janela fica na parte superior da janela e geralmente inclui o nome do aplicativo e o nome do arquivo que está sendo exibido ou editado. Botões de controle da janela: À direita do título da janela, você pode encontrar os botões de controle da janela, como o botão Minimizar, o botão Maximizar e o botão Fechar. Esses botões permitem que você minimize, maximize ou feche a janela. Barra de ferramentas: A barra de ferramentas pode ser encontrada na parte superior ou inferior da janela, dependendo do aplicativo. Ela contém botões para realizar ações comuns, como abrir um arquivo, salvar um arquivo, imprimir um documento ou copiar e colar informações. Barras de rolagem: As barras de rolagem permitem que você role o conteúdo da janela para cima ou para baixo. Elas podem ser encontradas na lateral ou na parte inferior da janela, dependendo do tipo de conteúdo que está sendo exibido. Caixas de diálogo: As caixas de diálogo são janelas pop-up que aparecem para solicitar informações adicionais ou para confirmar uma ação. Elas podem ser usadas para selecionar opções de configuração, exibir mensagens de erro ou salvar alterações. Animações: O Windows 11 apresenta algumas animações sutis que ajudam a dar vida às janelas. Por exemplo, quando você minimiza ou maximiza uma janela, ela pode deslizar para fora da tela ou se expandir suavemente.Pastas e arquivosNo Windows 11, pastas e arquivos são tipos diferentes de objetos que você pode criar, editar e organizar em seu computador. Abaixo estão algumas das principais diferenças entre pastas e arquivos: Definição: Uma pasta é um contêiner que pode armazenar arquivos e outras pastas, enquanto um arquivo é um documento ou programa individual que contém informações em formato eletrônico. Hierarquia: As pastas podem ser organizadas em uma hierarquia, permitindo que você crie pastas dentro de pastas e organize seus arquivos de maneira estruturada. Os arquivos, por outro lado, não podem ser organizados em uma hierarquia, eles ficam dentro de uma pasta. Nomeação: As pastas e os arquivos são identificados por nomes diferentes. As pastas têm um ícone de pasta e geralmente possuem um nome que descreve seu conteúdo ou finalidade. Os arquivos são identificados por seu ícone e têm um nome que geralmente reflete o conteúdo que eles contêm. Tipo de conteúdo: As pastas geralmente contêm vários arquivos, enquanto os arquivos contêm informações em formato eletrônico, como texto, imagem, áudio ou vídeo. Função: As pastas têm a função de organizar e armazenar arquivos, enquanto os arquivos podem ter várias funções, dependendo do seu tipo. Por exemplo, um arquivo pode ser um documento de texto, um vídeo, um aplicativo ou um arquivo de música. Em resumo, as pastas são usadas para organizar e armazenar arquivos em uma hierarquia, enquanto os arquivos contêm informações em formato eletrônico e têm uma variedade de funções e formatos. Ambos são fundamentais para a organização e gerenciamento de arquivos no Windows 11.Formas de visualizar arquivosO Gerenciador de Arquivos do Windows 11 oferece diferentes formas de visualizar os arquivos armazenados em seu computador. Abaixo estão algumas das opções de visualização disponíveis: Visualização de Ícones: Exibe os arquivos como ícones com miniaturas, que podem ser ajustados em tamanho para grande, médio, pequeno ou extrapequeno. É útil para visualizar imagens ou arquivos de vídeo. Visualização de Detalhes: Exibe os arquivos em forma de lista com informações detalhadas, como nome, tamanho, tipo, data de modificação e atributos. É útil para organizar arquivos em ordem alfabética ou tamanho. Visualização de Lista: Exibe os arquivos como uma lista com informações básicas, como nome e data de modificação. É útil para ver muitos arquivos de uma só vez. Visualização de Conteúdo: Exibe os arquivos em miniaturas, mas com informações adicionais, como data de criação e modificação, tamanho e tipo de arquivo. É útil para arquivos de mídia e documentos. Visualização de Grade: Exibe os arquivos em forma de grade com miniaturas e informações básicas, como nome e data de modificação. É útil para ver muitos arquivos de uma só vez. Para alternar entre as opções de visualização, basta clicar no ícone de visualização na parte superior direita da janela do Gerenciador de Arquivos ou usar o atalho de teclado “Ctrl + Shift + número” correspondente à opção de visualização desejada. Você também pode personalizar a forma como os arquivos são exibidos e ajustar a ordem dos campos de informação em cada visualização.Protegendo arquivosPara proteger um arquivo como somente leitura no Windows 11, siga os seguintes passos: Navegue até o arquivo que você deseja proteger como somente leitura no Gerenciador de Arquivos. Clique com o botão direito do mouse no arquivo e selecione “Propriedades” no menu que aparece. Na janela de Propriedades, clique na guia “Geral”. No final da janela, encontre a seção “Atributos” e marque a caixa de seleção “Somente leitura”. Clique em “Aplicar” e em seguida em “OK” para confirmar as alterações. Após proteger o arquivo como somente leitura, você poderá visualizá-lo, mas não poderá editá-lo ou excluí-lo. Se você precisar fazer alterações no arquivo, será necessário remover a proteção somente leitura primeiro. Para fazer isso, basta desmarcar a caixa de seleção “Somente leitura” nas propriedades do arquivo.Arquivos ocultosPara visualizar arquivos ocultos no Gerenciador de Arquivos do Windows 11, siga os seguintes passos: Abra o Gerenciador de Arquivos clicando no ícone da pasta na barra de tarefas ou pressionando a tecla Windows + E. Clique na guia “Exibir” na parte superior da janela. Na seção “Mostrar/Ocultar”, marque a caixa de seleção “Itens ocultos” para exibir arquivos e pastas ocultos. Se desejar, você também pode desmarcar a caixa de seleção “Extensões de nome de arquivo” para ocultar as extensões dos arquivos, ou desmarcar a caixa de seleção “Itens de arquivo protegidos do sistema operacional” para exibir arquivos do sistema operacional. Após marcar a caixa de seleção “Itens ocultos”, os arquivos e pastas ocultos serão exibidos no Gerenciador de Arquivos, com um ícone transparente para indicar que eles estão ocultos. Observe que os arquivos ocultos podem ser arquivos importantes do sistema, portanto, tome cuidado ao editar ou excluir arquivos ocultos, pois isso pode afetar o funcionamento do sistema operacional.Localizando arquivosPara usar a localização de arquivos no Gerenciador de Arquivos do Windows 11, siga os seguintes passos: Abra o Gerenciador de Arquivos clicando no ícone da pasta na barra de tarefas ou pressionando a tecla Windows + E. Na barra de endereço na parte superior da janela, digite o nome do arquivo que deseja localizar. Você também pode digitar uma palavra-chave ou frase relacionada ao arquivo, se souber. Pressione Enter ou clique no botão de pesquisa (a lupa) ao lado da barra de endereço para iniciar a pesquisa. O Gerenciador de Arquivos exibirá os resultados da pesquisa na janela. Se houver muitos resultados, você pode usar os filtros na guia “Pesquisar” para refinar a pesquisa por tipo de arquivo, data de criação, tamanho do arquivo e outras opções. Para abrir o arquivo, clique duas vezes nele na lista de resultados da pesquisa. Além disso, você também pode usar a barra de pesquisa na parte superior da janela do Gerenciador de Arquivos para pesquisar arquivos em qualquer pasta do seu computador. Basta digitar o nome do arquivo ou palavra-chave na barra de pesquisa e os resultados serão exibidos na janela. Certifique-se de selecionar “Este PC” na barra de pesquisa para pesquisar em todas as pastas do seu computador.Caracteres especiais para pesquisaExistem alguns caracteres especiais que você pode usar ao pesquisar arquivos no Gerenciador de Arquivos do Windows 11 para refinar sua pesquisa. Aqui estão alguns exemplos: Asterisco (*): Use o asterisco para representar qualquer combinação de caracteres. Por exemplo, se você quiser encontrar todos os arquivos que começam com a palavra “relatório”, mas cujo nome termina de forma diferente, digite “relatório” na barra de pesquisa. Ponto de interrogação (?): Use o ponto de interrogação para representar um único caractere. Por exemplo, se você quiser encontrar todos os arquivos com o nome “documento” e que possuem um caractere adicional entre “documento” e a extensão do arquivo, digite “documento?” na barra de pesquisa. Sinal de arroba (@): Use o sinal de arroba para encontrar arquivos com tags específicas. Por exemplo, se você tiver adicionado a tag “Importante” a um arquivo, digite “@Importante” na barra de pesquisa para localizar esse arquivo. Sinal de cifrão ($): Use o sinal de cifrão para localizar arquivos com informações específicas do autor. Por exemplo, se você quiser encontrar todos os arquivos criados por um determinado usuário, digite “autor:$nomedeusuario” na barra de pesquisa. Lembre-se de que esses caracteres especiais podem ser combinados para criar pesquisas mais complexas e precisas. Além disso, a busca de arquivos no Windows 11 também suporta operadores de pesquisa, como AND, OR e NOT, que podem ajudá-lo a refinar ainda mais a pesquisa.Operadores especiais para pesquisaA busca de arquivos no Windows 11 também suporta operadores de pesquisa, que podem ajudar a refinar ainda mais os resultados da pesquisa. Aqui estão alguns exemplos de operadores de pesquisa que você pode usar: AND: Use o operador “AND” (em letras maiúsculas) para encontrar arquivos que correspondam a dois termos ou mais. Por exemplo, se você quiser encontrar todos os arquivos com a palavra “relatório” e a palavra “trimestral” em seu nome, digite “relatório AND trimestral” na barra de pesquisa. OR: Use o operador “OR” (em letras maiúsculas) para encontrar arquivos que correspondam a um termo ou a outro. Por exemplo, se você quiser encontrar todos os arquivos com a palavra “relatório” ou a palavra “planilha” em seu nome, digite “relatório OR planilha” na barra de pesquisa. NOT: Use o operador “NOT” (em letras maiúsculas) para encontrar arquivos que correspondam a um termo, mas não a outro. Por exemplo, se você quiser encontrar todos os arquivos com a palavra “relatório” em seu nome, mas que não contenham a palavra “anual”, digite “relatório NOT anual” na barra de pesquisa. Além disso, você também pode usar parênteses para agrupar termos de pesquisa e tornar sua pesquisa mais complexa. Por exemplo, se você quiser encontrar todos os arquivos com a palavra “relatório” em seu nome e que tenham sido criados no último mês, pode digitar “(relatório) AND data:&gt;01/01/2023 AND data:&lt;02/01/2023” na barra de pesquisa.Referências Microsoft suport: Gerenciador de arquivos no Windows 11 Apostila sobre Informática Básica Apostila sobre Informática básica Senac, intensivo Windows, pacote Office, internet" }, { "title": "Conceitos de Trabalho emprego profissão carreira", "url": "/aulas/posts/trabalho-e-emprego-copy/", "categories": "AULAS, PROFISSÃO E FORMAÇÃO", "tags": "profissão, empregabilidade", "date": "2023-02-23 10:40:00 -0300", "snippet": "title: “Trabalho emprego profissão carreira”date: 2023-02-14 10:00:00 -0300categories: [AULAS, PLANEJAMENTO DE CARREIRA]tags: [planejamento, carreira, empregabilidade]—Trabalho e emprego são conce...", "content": "title: “Trabalho emprego profissão carreira”date: 2023-02-14 10:00:00 -0300categories: [AULAS, PLANEJAMENTO DE CARREIRA]tags: [planejamento, carreira, empregabilidade]—Trabalho e emprego são conceitos semelhantes, mas com diferenças sutis.TrabalhoTrabalho é uma atividade remunerada ou não, realizada por uma pessoa, que pode ser formal ou informal, e que pode ser realizada em casa, na comunidade ou no local de trabalho. O trabalho pode ser voluntário ou obrigatório, e pode incluir tarefas domésticas, atividades comunitárias, trabalho empresarial, entre outros.EmpregoEmprego, por outro lado, é uma forma de trabalho remunerado, com um contrato de trabalho formal, que fornece segurança de renda e benefícios sociais. O emprego é normalmente associado a uma posição remunerada em uma empresa, organização ou instituição, onde a pessoa trabalha em troca de salário e outros benefícios, como férias, seguro saúde, entre outros. Em resumo, todo emprego é trabalho, mas nem todo trabalho é emprego.ProfissãoProfissão é uma atividade remunerada, realizada por uma pessoa, que exige conhecimento especializado e habilidades técnicas adquiridas através de estudos e treinamento. Alguns exemplos de profissões incluem médico, engenheiro, advogado, professor, entre outros.Carreiracarreira é o trajeto de desenvolvimento profissional de uma pessoa, incluindo sua evolução em termos de responsabilidade, autoridade e remuneração. A carreira pode incluir mudanças de emprego, promoções, desafios e desenvolvimento de novas habilidades. É uma jornada que pode durar uma vida toda, e que é influenciada por fatores como escolhas pessoais, oportunidades de mercado e habilidades. Em resumo, a profissão é a atividade específica que uma pessoa escolhe como forma de ganhar a vida, enquanto a carreira é o caminho que ela percorre ao longo do tempo dentro dessa profissão.Trabalhar e estudarMuitos estudantes escolhem combinar seus estudos com trabalho, seja para complementar sua renda, adquirir experiência profissional, ou simplesmente porque precisam trabalhar para se manter financeiramente.Trabalhar enquanto se estuda pode ser desafiador, pois exige equilibrar responsabilidades acadêmicas e profissionais. No entanto, se bem gerenciado, pode trazer muitos benefícios, tais como: Adquirir experiência profissional relevante para a sua carreira futura; Complementar sua renda e ajudar a financiar seus estudos; Desenvolver habilidades importantes como organização, gestão do tempo e resolução de problemas; Ampliar sua rede de contatos profissionais. No entanto, é importante lembrar que trabalhar e estudar ao mesmo tempo pode ser cansativo e estressante, e que é importante encontrar um equilíbrio saudável para evitar prejudicar sua saúde ou sua performance acadêmica. Se possível, é recomendável escolher um trabalho que permita flexibilidade e possibilite conciliar com seus estudos.ReferênciaDiferenças entre trabalho e emprego - Portal do Mec" }, { "title": "As camadas OSI e seus protocolos", "url": "/aulas/posts/camadas-osi-e-protocolos/", "categories": "AULAS, INFRAESTRUTURA DE REDES", "tags": "infraestrutura, protocolos", "date": "2023-02-23 10:00:00 -0300", "snippet": "As camadas do modelo OSI (Open Systems Interconnection) são uma maneira de dividir as funções de uma rede de computadores em camadas lógicas e independentes. Cada camada do modelo OSI é responsável...", "content": "As camadas do modelo OSI (Open Systems Interconnection) são uma maneira de dividir as funções de uma rede de computadores em camadas lógicas e independentes. Cada camada do modelo OSI é responsável por uma função específica e se comunica com as camadas adjacentes através de protocolos de rede.O modelo OSIO modelo OSI (Open Systems Interconnection) foi desenvolvido no final dos anos 1970 e início dos anos 1980 pela ISO (International Organization for Standardization), uma organização internacional que desenvolve padrões técnicos em várias áreas.O objetivo do modelo OSI era fornecer uma estrutura comum para a comunicação de dados entre diferentes sistemas de computadores, independentemente do fabricante ou tecnologia utilizada. Na época, havia muitas redes de computadores proprietárias e incompatíveis, o que dificultava a comunicação entre elas.O modelo OSI divide as funções de uma rede de computadores em sete camadas lógicas e independentes, cada uma com funções específicas e bem definidas. As camadas são: Camada Física: cuida da transmissão de bits brutos por meio de um canal de comunicação. Camada de Enlace de Dados: gerencia o acesso ao meio físico e a detecção e correção de erros. Camada de Rede: roteia os pacotes de dados entre redes diferentes. Camada de Transporte: fornece serviços de transporte de extremidade a extremidade, garantindo a entrega confiável de dados. Camada de Sessão: gerencia as conexões entre sistemas e coordena as comunicações entre eles. Camada de Apresentação: gerencia a forma como as informações são apresentadas ao usuário. Camada de Aplicação: fornece interfaces para aplicativos de rede. O modelo OSI não foi amplamente adotado na prática, mas influenciou o desenvolvimento de outros modelos e padrões de redes de computadores, como o TCP/IP (Transmission Control Protocol/Internet Protocol), que é amplamente utilizado na Internet.O modelo TCP/IPO modelo TCP/IP (Transmission Control Protocol/Internet Protocol) é outro modelo de referência para redes de computadores, desenvolvido pela DARPA (Defense Advanced Research Projects Agency) no final dos anos 1960 e início dos anos 1970 para interconectar redes de computadores militares nos Estados Unidos. O modelo TCP/IP é mais amplamente utilizado do que o modelo OSI na prática, especialmente na Internet.O modelo TCP/IP possui quatro camadas, que diferem em número e em nomenclatura em relação ao modelo OSI. As camadas do modelo TCP/IP são: Camada de Acesso à Rede (ou Camada de Interface de Rede): equivalente à camada de Enlace de Dados do modelo OSI. Gerencia o acesso ao meio físico e a detecção e correção de erros. Camada de Internet: equivalente à camada de Rede do modelo OSI. Roteia os pacotes de dados entre redes diferentes e fornece serviços de fragmentação e remontagem de pacotes. Camada de Transporte: equivalente à camada de Transporte do modelo OSI. Fornece serviços de transporte de extremidade a extremidade, garantindo a entrega confiável de dados. O TCP e o UDP são os protocolos mais comuns nesta camada. Camada de Aplicação: equivalente às camadas de Sessão, Apresentação e Aplicação do modelo OSI combinadas. Fornece interfaces para aplicativos de rede e gerencia a forma como as informações são apresentadas ao usuário. Comparado ao modelo OSI, o modelo TCP/IP é mais simples e prático, e possui uma abordagem mais voltada para a implementação real de redes de computadores. Por exemplo, o modelo TCP/IP não possui uma camada específica para gerenciar conexões entre sistemas, como a camada de Sessão do modelo OSI. Além disso, o modelo TCP/IP é mais adaptável a diferentes tecnologias e arquiteturas de rede, e é amplamente utilizado na Internet e em redes locais.Diagrama dos modelosgraph LR osi((Camadas)) subgraph OSI osi --&gt; apl(Aplicação) osi --&gt; apr(Apresentação) osi --&gt; ses(Sessão) osi --&gt; tr(Transporte) osi --&gt; red(Rede) osi --&gt; en(Enlace de Dados) osi --&gt; fi(Física) end subgraph TCP/IP apl --&gt; 1(Aplicação) apr --&gt; 1 ses --&gt; 1 tr --&gt; 2(Transporte) red --&gt; 3(Internet) en --&gt; 4(Acesso à Rede) fi --&gt; 4 endProtocolos de redesOs protocolos de rede são conjuntos de regras que governam a comunicação entre dispositivos em uma rede. Cada camada do modelo OSI é responsável por usar os protocolos de rede apropriados para realizar suas funções. Os protocolos de rede são implementados nas camadas correspondentes do modelo OSI.Por exemplo, a camada de transporte (camada 4) é responsável por estabelecer conexões entre dispositivos em uma rede e garantir que os dados sejam entregues de forma confiável. Os protocolos de rede usados nesta camada incluem o TCP (Transmission Control Protocol) e o UDP (User Datagram Protocol).Da mesma forma, a camada de rede (camada 3) é responsável por rotear os dados através da rede e escolher o melhor caminho para que os dados cheguem ao seu destino. Os protocolos de rede usados nesta camada incluem o IP (Internet Protocol) e o ICMP (Internet Control Message Protocol). Em resumo, as camadas do modelo OSI e os protocolos de rede estão intimamente relacionados, pois os protocolos são implementados em cada camada para executar as funções correspondentes.Protocolos de AplicaçãoA camada de aplicação é a camada mais alta do modelo OSI e é responsável por fornecer interfaces e serviços para os aplicativos de rede. Existem muitos protocolos diferentes na camada de aplicação, que podem ser classificados em várias categorias, como: Protocolos de transferência de arquivos: permitem que os usuários transfiram arquivos entre computadores, como o FTP (File Transfer Protocol), SFTP (Secure File Transfer Protocol) e TFTP (Trivial File Transfer Protocol). Protocolos de correio eletrônico: permitem que os usuários enviem e recebam e-mails, como o SMTP (Simple Mail Transfer Protocol) e o POP3 (Post Office Protocol version 3). Protocolos de mensagens instantâneas: permitem que os usuários troquem mensagens em tempo real, como o IRC (Internet Relay Chat) e o XMPP (Extensible Messaging and Presence Protocol). Protocolos de acesso remoto: permitem que os usuários acessem computadores ou redes remotas, como o Telnet e o SSH (Secure Shell). Protocolos de acesso à web: permitem que os usuários acessem e interajam com recursos da Web, como o HTTP (Hypertext Transfer Protocol) e o HTTPS (HTTP Secure). Protocolos de serviços de diretório: permitem que os usuários consultem informações de diretório, como o LDAP (Lightweight Directory Access Protocol). Protocolos de voz e vídeo: permitem que os usuários realizem chamadas de voz e vídeo em tempo real, como o SIP (Session Initiation Protocol) e o H.323. Esses são apenas alguns exemplos de protocolos de aplicação existentes. Cada protocolo fornece serviços específicos que são utilizados por diferentes aplicativos de rede.Protocolos de apresentaçãoA camada de apresentação é a sexta camada do modelo OSI e é responsável por garantir que as informações sejam apresentadas de forma adequada ao usuário. Essa camada lida com questões como a codificação e decodificação de dados, compressão e criptografia.Alguns dos protocolos comumente associados à camada de apresentação incluem: TLS (Transport Layer Security): é um protocolo de criptografia usado para proteger a privacidade dos dados em redes de computadores, fornecendo autenticação, confidencialidade e integridade dos dados transmitidos. SSL (Secure Sockets Layer): é um protocolo de criptografia que foi substituído pelo TLS, mas ainda é usado em algumas aplicações legadas. É comumente usado em servidores web para proteger a comunicação entre um navegador e um servidor. JPEG (Joint Photographic Experts Group): é um padrão de compressão de imagem usado para reduzir o tamanho de imagens digitais sem perder muita qualidade. É comumente usado em imagens enviadas por e-mail ou exibidas em sites da Web. MPEG (Moving Picture Experts Group): é um padrão de compressão de vídeo usado para reduzir o tamanho de vídeos digitais. É usado em aplicativos de vídeo em streaming e em transmissões de televisão digital. ASCII (American Standard Code for Information Interchange): é um conjunto de códigos que representa caracteres alfanuméricos em computadores. É usado para garantir que o texto seja exibido corretamente em diferentes sistemas operacionais e aplicativos. Esses são apenas alguns exemplos de protocolos associados à camada de apresentação. Cada protocolo é projetado para lidar com uma tarefa específica relacionada à apresentação de dados para o usuário.Protocolos de SessãoA camada de sessão é a quinta camada do modelo OSI e é responsável por estabelecer, gerenciar e encerrar sessões entre aplicativos em redes de computadores. Essa camada lida com questões como controle de diálogo, sincronização e gerenciamento de tokens de autenticação.Alguns dos protocolos comumente associados à camada de sessão incluem: NetBIOS (Network Basic Input/Output System): é um protocolo usado para permitir que computadores em uma rede local se comuniquem entre si. Ele oferece suporte à resolução de nomes de computador, compartilhamento de arquivos e impressoras e outros serviços de rede. RPC (Remote Procedure Call): é um protocolo que permite que um programa em um computador execute uma função em outro computador sem que o usuário precise saber como os dois computadores estão conectados. É comumente usado em aplicativos distribuídos e em sistemas cliente-servidor. NFS (Network File System): é um protocolo usado para compartilhar arquivos em uma rede de computadores. Ele permite que um computador acesse arquivos em outro computador como se estivessem localmente armazenados. SQL (Structured Query Language): é uma linguagem de programação usada para gerenciar bancos de dados relacionais. É comumente usado em aplicativos de gerenciamento de banco de dados em servidores de banco de dados. SIP (Session Initiation Protocol): é um protocolo usado para estabelecer e gerenciar sessões de comunicação em tempo real, como chamadas de voz e vídeo pela Internet. Esses são apenas alguns exemplos de protocolos associados à camada de sessão. Cada protocolo é projetado para lidar com uma tarefa específica relacionada à comunicação entre aplicativos em uma rede de computadores.Protocolos de transporteA camada de transporte é a quarta camada do modelo OSI e é responsável por fornecer serviços de comunicação fim a fim, incluindo a segmentação de dados em unidades menores para transmissão, controle de fluxo, controle de erro e estabelecimento de conexão.Alguns dos protocolos comumente associados à camada de transporte incluem: TCP (Transmission Control Protocol): é um protocolo confiável, orientado à conexão e baseado em fluxo que fornece uma comunicação fim a fim confiável e ordenada de dados entre aplicativos. É amplamente utilizado na Internet para transferência de arquivos, e-mail e navegação na Web. UDP (User Datagram Protocol): é um protocolo não confiável, não orientado à conexão e baseado em datagrama que é usado para aplicações em que a perda de alguns dados não é crítica, como vídeo em tempo real e jogos online. SCTP (Stream Control Transmission Protocol): é um protocolo orientado à conexão e baseado em fluxo semelhante ao TCP, mas projetado para fornecer maior confiabilidade e segurança para aplicações em tempo real, como telefonia IP e videoconferência. DCCP (Datagram Congestion Control Protocol): é um protocolo orientado à conexão e baseado em datagrama projetado para fornecer comunicação de baixa latência e congestionamento controlado para aplicações como streaming de vídeo e voz. SPX (Sequenced Packet Exchange): é um protocolo de transporte usado em redes Novell NetWare. Ele fornece um serviço de comunicação fim a fim confiável e ordenado de dados entre aplicativos em uma rede local. Esses são apenas alguns exemplos de protocolos associados à camada de transporte. Cada protocolo é projetado para lidar com uma tarefa específica relacionada à transferência de dados entre aplicativos em uma rede de computadores.Protocolos da camada de redesA camada de rede é a terceira camada do modelo OSI e é responsável por encaminhar dados de um nó para outro na rede. Essa camada lida com questões como roteamento de pacotes, endereçamento e controle de congestionamento.Alguns dos protocolos comumente associados à camada de rede incluem: IP (Internet Protocol): é o protocolo principal da camada de rede da Internet. Ele fornece um endereço IP único para cada dispositivo na rede e permite que pacotes de dados sejam encaminhados de um nó para outro. ICMP (Internet Control Message Protocol): é um protocolo usado para enviar mensagens de erro e informações de controle de rede entre dispositivos IP. ARP (Address Resolution Protocol): é um protocolo usado para mapear um endereço IP para um endereço MAC (Media Access Control) em uma rede local. RARP (Reverse Address Resolution Protocol): é um protocolo usado para mapear um endereço MAC para um endereço IP em uma rede local. OSPF (Open Shortest Path First): é um protocolo de roteamento dinâmico usado para determinar a melhor rota para enviar pacotes em uma rede IP. Ele usa um algoritmo de caminho mais curto para determinar as rotas mais eficientes para os pacotes de dados. Esses são apenas alguns exemplos de protocolos associados à camada de rede. Cada protocolo é projetado para lidar com uma tarefa específica relacionada à transferência de dados entre nós na rede.Protocolos de Enlace de dadosA camada de enlace de dados é a segunda camada do modelo OSI e é responsável por transmitir dados entre dispositivos em uma rede local. Essa camada lida com questões como controle de acesso ao meio, detecção de erros, divisão de quadros e endereçamento físico.Alguns dos protocolos comumente associados à camada de enlace incluem: Ethernet: é um protocolo de rede com fio que é amplamente usado em redes locais (LANs). Ele define como os dados são transmitidos na rede e fornece um endereço físico exclusivo para cada dispositivo conectado à rede. Wi-Fi: é um protocolo de rede sem fio que é usado em redes locais sem fio (WLANs). Ele define como os dados são transmitidos sem fio na rede e fornece um endereço físico exclusivo para cada dispositivo conectado à rede. PPP (Point-to-Point Protocol): é um protocolo usado para estabelecer uma conexão entre dois dispositivos de rede, geralmente um computador e um servidor ISP (Internet Service Provider). Ele é frequentemente usado para conexões de Internet discadas. HDLC (High-Level Data Link Control): é um protocolo usado em redes de longa distância (WANs) para fornecer comunicação de dados confiável e eficiente. Token Ring: é um protocolo de rede local que usa um token para controlar o acesso ao meio e garantir que apenas um dispositivo transmita dados de cada vez. Esses são apenas alguns exemplos de protocolos associados à camada de enlace de dados. Cada protocolo é projetado para lidar com uma tarefa específica relacionada à transmissão de dados entre dispositivos em uma rede local ou de longa distância.Protocolos da camada FísicaA camada física é a camada mais baixa do modelo OSI e é responsável por transmitir bits brutos de dados de um dispositivo para outro na rede. Essa camada lida com questões como a interface com o meio físico, a codificação de dados e a taxa de transmissão.Alguns dos protocolos comumente associados à camada física incluem: Ethernet: como mencionado anteriormente, o protocolo Ethernet não apenas define como os dados são transmitidos na camada de enlace, mas também especifica os padrões físicos de cabeamento, conectores e sinais elétricos usados para transmitir os dados. Wi-Fi: como mencionado anteriormente, o protocolo Wi-Fi também especifica padrões físicos de comunicação sem fio, incluindo frequências de rádio, modulação de sinais e técnicas de antena. RS-232: é um protocolo usado para comunicação serial entre dispositivos, como computadores e modems. Ele especifica os padrões físicos para cabos e conectores usados na comunicação serial. V.35: é um protocolo de comunicação serial usado em redes de longa distância. Ele define os padrões físicos para cabos e conectores usados para transmissão de dados. Fibra óptica: é um tipo de tecnologia de transmissão de dados que usa fibras ópticas para transmitir sinais de luz em vez de sinais elétricos. Existem vários padrões físicos associados à tecnologia de fibra óptica, incluindo o padrão ST, SC, LC e MTRJ. Esses são apenas alguns exemplos de protocolos associados à camada física. Cada protocolo é projetado para lidar com uma tarefa específica relacionada à transmissão de bits brutos de dados de um dispositivo para outro na rede.Diagrama do modelo OSI e protocolosgraph LROSI((Camadas))subgraph Camadas OSI OSI --&gt; 1(Aplicação) OSI --&gt; 2(Apresentação) OSI --&gt; 3(Sessão) OSI --&gt; 4(Transporte) OSI --&gt; 5(Rede) OSI --&gt; 6(Enlace de Dados) OSI --&gt; 7(Física)endsubgraph Protocolos 1 --&gt; ftp(FTP) 1 --&gt; smtp(SMTP) 1 --&gt; pop(POP3) 1 --&gt; http(HTTP) 2 --&gt; tls(TLS) 2 --&gt; jpg(JPEG) 2 --&gt; mpeg(MPEG) 3 --&gt; netbios(Netbios) 3 --&gt; rpc(RPC) 3 --&gt; sip(SIP) 4 --&gt; tcp(TCP) 4 --&gt; udp(UDP) 4 --&gt; sctp(SCTP) 5 --&gt; ip(IP) 5 --&gt; icmp(ICMP) 5 --&gt; arp(ARP) 6 --&gt; eth(Ethernet) 6 --&gt; wifi(WiFi) 6 --&gt; ppp(PPP) 7 --&gt; rs(RS-232) 7 --&gt; fib(Fibra óptica)endsubgraph descrição ftp --&gt; r1[/Transferência de arquivos/] smtp --&gt; r2[/Transmissão de emails/] pop --&gt; r3[/Recebimento de emails/] http --&gt; r4[/Páginas na internet/] tls --&gt; r5[/Segurança de transporte/] jpg --&gt; r6[/compactação de imagens/] mpeg --&gt; r7[/compactação de vídeos/] netbios --&gt; r8[/comunicação em rede local/] rpc --&gt; r9[/acesso remoto/] sip --&gt; r10[/sessão de comunicação/] tcp --&gt; r11[/transporte confiável/] udp --&gt; r12[/transporte rápido/] sctp --&gt; r13[/comunicação em tempo real/] ip --&gt; r14[/endereçamento na rede/] icmp --&gt; r15[/teste de conexão/] arp --&gt; r16[/mapeamento de dispositivos/] eth --&gt; r17[/rede cabeada/] wifi --&gt; r18[/rede sem fio/] ppp --&gt; r19[/conexão ponto a ponto/] rs --&gt; r20[/conexão serial/] fib --&gt; r21[/conexão com fibra óptica/]endReferências Apostila de Meios de Comunicação de Dados" }, { "title": "Personalizando o Windows", "url": "/aulas/posts/personalizando-o-windows/", "categories": "AULAS, INFORMÁTICA BÁSICA", "tags": "informática, Senac, Windows", "date": "2023-02-16 13:00:00 -0300", "snippet": "Existem várias forma de personalizar a aparência do Windows.Principais items Área de trabalho - é local em que podemos encontrar, além da lixeira, atalhos de diversos itens. Sobre ela poderá ter u...", "content": "Existem várias forma de personalizar a aparência do Windows.Principais items Área de trabalho - é local em que podemos encontrar, além da lixeira, atalhos de diversos itens. Sobre ela poderá ter um papel de parede cobrindo-a total ou parcialmente. Ícones - Representação gráfica de um arquivo, pasta ou programa. Você pode adicionar ícones na área de trabalho, assim como excluir. A Lixeira é ícone padrão do Windows. Botão iniciar - É o principal elemento da Barra de Tarefas. Ele dá acesso ao Menu Iniciar, a partir do qual se pode acessar outros menus que, por sua vez, acionam programas do Windows. Barra de tarefas - Mostra quais as janelas estão abertas neste momento, mesmo que algumas estejam minimizadas ou ocultas sob outra janela, permitindo assim, alternar estas janelas ou entre programas com rapidez e facilidade. Área de Notificações e Central de ações - Na área de frequência estão alguns atalhos de programas utilitários que estão em uso: Acesso à Internet, volume de som, idioma do teclado, data e hora e as ações rápidas que levam você diretamente às configurações e aos aplicativos que provavelmente você usará. Ao abrir a central de ações, você verá todas as suas ações rápidas disponíveis.Área de trabalho Clique com o botão direito do mouse em qualquer área vazia da área de trabalho e selecione “Personalizar” no menu. Na tela de Personalização, você pode escolher um papel de parede diferente para a área de trabalho. Você pode escolher uma imagem de fundo padrão ou selecionar uma imagem de sua preferência. Para personalizar ainda mais a aparência da área de trabalho, clique em “Cores” na barra lateral esquerda. Aqui, você pode escolher uma cor de destaque para a interface do Windows, bem como definir um modo claro ou escuro. Para adicionar ícones à área de trabalho, clique com o botão direito do mouse na área de trabalho e selecione “Novo” e escolha o tipo de ícone que deseja criar, como uma nova pasta ou atalho. Para organizar os ícones na área de trabalho, clique e arraste os ícones para as posições desejadas. Para alterar o tamanho dos ícones, clique com o botão direito do mouse na área de trabalho e selecione “Exibir”. Em seguida, escolha a opção “Ícones médios” ou “Ícones grandes”. Para adicionar ou remover ícones da barra de tarefas, clique com o botão direito do mouse na barra de tarefas e selecione “Configurações da barra de tarefas”. Em seguida, ative ou desative os ícones que deseja ver na barra de tarefas.TemasPara personalizar e escolher um tema no Windows 11, siga os seguintes passos: Clique com o botão direito do mouse em qualquer área vazia da área de trabalho e selecione “Personalizar” no menu. Na tela de Personalização, selecione a opção “Temas” na barra lateral esquerda. Aqui, você encontrará os temas padrão do Windows 11. Selecione o tema que deseja aplicar e a interface do sistema, incluindo cores, fontes e ícones, mudará para esse tema. Se você quiser personalizar ainda mais o tema, clique em “Personalizar seu tema” na parte inferior da tela. Aqui, você pode ajustar as cores, o plano de fundo, o som, os ícones e as fontes do tema escolhido. Para personalizar as cores, clique em “Cores” e escolha uma cor de destaque para a interface do Windows. Você também pode definir um modo claro ou escuro para o tema. Para personalizar o plano de fundo, clique em “Plano de Fundo” e escolha uma imagem da biblioteca de imagens do Windows ou selecione uma imagem de seu computador. Para personalizar os sons, clique em “Sons” e escolha os sons que deseja usar para eventos do sistema, como notificações e alertas. Para personalizar os ícones, clique em “Ícones” e escolha os ícones que deseja usar para as pastas, arquivos e programas. Quando terminar de personalizar o tema, clique em “Salvar tema” para salvar as alterações e aplicar o tema personalizado.Barra de tarefasPara personalizar a barra de tarefas no Windows 11, siga os seguintes passos: Clique com o botão direito do mouse em qualquer área vazia da barra de tarefas e selecione “Configurações da barra de tarefas” no menu. Na tela de Configurações da Barra de Tarefas, você pode personalizar as seguintes opções: Bloquear a barra de tarefas: isso impede que a barra de tarefas seja movida ou redimensionada acidentalmente. Escolher onde os ícones dos apps são exibidos: você pode escolher entre “Na barra de tarefas” (padrão) ou “Na central de ações”. Adicionar ou remover ícones da barra de tarefas: clique em “Adicionar ou remover ícones da barra de tarefas” para selecionar quais ícones deseja exibir na barra de tarefas. Você também pode ativar ou desativar a exibição de ícones de aplicativos abertos recentemente. Personalizar as áreas de notificação: clique em “Personalizar” para escolher quais ícones de notificação são exibidos na área de notificação da barra de tarefas. Personalizar a barra de tarefas em displays adicionais: se você usa vários monitores, pode personalizar a exibição da barra de tarefas em cada monitor. Para reorganizar os ícones da barra de tarefas, basta clicar e arrastar o ícone para a posição desejada. Para fixar um aplicativo na barra de tarefas, basta clicar com o botão direito do mouse no ícone do aplicativo na Central de aplicativos e selecionar “Fixar na barra de tarefas”. Se você quiser usar uma barra de tarefas mais personalizada, pode usar aplicativos de terceiros, como o TaskbarX, para personalizar a aparência da barra de tarefas. Esses são apenas alguns dos métodos de personalização disponíveis para a barra de tarefas no Windows 11. Com um pouco de experimentação, você pode criar uma barra de tarefas que seja perfeitamente adequada às suas necessidades e preferências.Criando uma nova contaPara configurar uma nova conta no Windows 11, siga os seguintes passos: Clique no botão Iniciar na barra de tarefas e selecione “Configurações” (ícone de engrenagem). Na tela de Configurações, selecione “Contas” na barra lateral esquerda. Na tela de Contas, clique em “Família e outros usuários” na barra lateral esquerda. Na seção “Outros usuários”, clique em “Adicionar outra pessoa a este PC”. Na próxima tela, selecione “Não tenho as informações de login dessa pessoa”. Em seguida, selecione “Adicionar um usuário sem conta da Microsoft”. Digite o nome do usuário e uma senha para a nova conta. Você também pode adicionar uma pergunta de segurança para recuperar a senha em caso de perda. Se você deseja que a nova conta tenha privilégios de administrador, marque a opção “Fazer esta pessoa um administrador”. Caso contrário, deixe a opção desmarcada. Clique em “Avançar” e, em seguida, clique em “Concluído”. A nova conta agora será adicionada ao seu PC. O usuário pode fazer login com o nome de usuário e senha que você forneceu. Se o usuário tiver uma conta da Microsoft, também poderá adicioná-la como uma conta secundária em seu PC, seguindo o mesmo processo e selecionando “Adicionar uma conta da Microsoft” na etapa 5.Referências Microsoft learn: Personalizar o Windows 11 Apostila sobre Informática Básica Apostila sobre Informática básica Senac, intensivo Windows, pacote Office, internet" }, { "title": "Histórico dos Sistemas Operacionais", "url": "/aulas/posts/historico-dos-sistemas-operacionais/", "categories": "AULAS, INFORMÁTICA BÁSICA", "tags": "informática, Senac, linux, Windows", "date": "2023-02-15 13:00:00 -0300", "snippet": "A história dos sistemas operacionais remonta aos anos 1950, quando os primeiros computadores foram criados. Naquela época, os computadores eram máquinas enormes e muito caras, que ocupavam salas in...", "content": "A história dos sistemas operacionais remonta aos anos 1950, quando os primeiros computadores foram criados. Naquela época, os computadores eram máquinas enormes e muito caras, que ocupavam salas inteiras. Eles eram usados principalmente para fins científicos e militares.HistóricoOs primeiros sistemas operacionais foram desenvolvidos para ajudar os programadores a lidar com a complexidade dos computadores da época. O primeiro sistema operacional reconhecido foi o GM-NAA I/O, desenvolvido pela General Motors e pelo Instituto de Administração de Aviação Nacional (NAA) em 1956 para o computador IBM 704.Na década de 1960, os sistemas operacionais evoluíram para incluir recursos como multiprocessamento, multitarefa e gerenciamento de memória. Um dos primeiros sistemas operacionais a oferecer esses recursos foi o CTSS (Compatible Time-Sharing System), desenvolvido pelo Massachusetts Institute of Technology (MIT) em 1961.Nos anos 1970, surgiram os sistemas operacionais mais populares da época: o UNIX, desenvolvido pela Bell Labs, e o MS-DOS, desenvolvido pela Microsoft. O UNIX foi projetado para ser usado em sistemas de computação em rede, enquanto o MS-DOS foi projetado para computadores pessoais.A década de 1980 viu o surgimento do Macintosh da Apple, que rodava o sistema operacional Mac OS. O Mac OS apresentava uma interface gráfica de usuário (GUI) amigável e fácil de usar, tornando-o popular entre os usuários de computador.História do LinuxO Linux é um sistema operacional de código aberto baseado no kernel do UNIX. Sua história começou em 1991, quando um estudante finlandês chamado Linus Torvalds começou a desenvolver um novo sistema operacional como um hobby. Ele queria criar um sistema operacional que fosse gratuito, de código aberto e pudesse ser executado em um PC comum.Torvalds começou desenvolvendo um kernel para seu sistema operacional, que ele chamou de “Linux”, uma combinação de seu próprio nome e o termo “UNIX”. O kernel Linux foi projetado para ser rápido, eficiente e escalável. Ele foi escrito em linguagem C, o que tornava mais fácil para outros programadores contribuírem para seu desenvolvimento.Com o tempo, outros programadores começaram a contribuir para o desenvolvimento do Linux. Eles criaram programas e ferramentas para o sistema operacional, e o Linux começou a ganhar popularidade entre os usuários de computador que queriam uma alternativa gratuita e de código aberto aos sistemas operacionais comerciais, como o Windows e o MacOS.Uma das principais características do Linux é sua flexibilidade. Como é de código aberto, qualquer um pode modificar e personalizar o sistema operacional para atender às suas necessidades específicas. O Linux também é altamente escalável, o que o torna adequado para uso em uma ampla variedade de dispositivos, desde servidores corporativos até smartphones e dispositivos de Internet das Coisas. Hoje, o Linux é amplamente utilizado em servidores corporativos, supercomputadores, smartphones Android e muitos outros dispositivos. Alguns dos principais projetos de distribuição do Linux incluem o Ubuntu, Debian, Fedora, CentOS, Arch Linux e muitos outros. O Linux continua sendo uma das principais alternativas de código aberto aos sistemas operacionais comerciais, oferecendo recursos avançados de segurança, desempenho e personalização.História do Mac OSXA história do macOS (anteriormente chamado de Mac OS X) começa em 1984, quando a Apple lançou seu primeiro sistema operacional para computadores pessoais, chamado de “Macintosh System Software”. O Macintosh System Software apresentava uma interface gráfica de usuário revolucionária, que permitia que os usuários interagissem com o computador usando ícones, menus e janelas.Nos anos seguintes, a Apple lançou várias versões do Macintosh System Software, incluindo o System 7 em 1991, que apresentava uma interface gráfica de usuário aprimorada e suporte a recursos de rede.Em 1999, a Apple lançou o Mac OS X, uma nova versão do sistema operacional baseada no kernel do Unix. O Mac OS X apresentava uma nova interface gráfica de usuário, chamada de Aqua, que apresentava botões em 3D, sombras e efeitos translúcidos. O Mac OS X também apresentava recursos avançados de segurança, como um sistema de proteção de memória e suporte a criptografia de disco.Nos anos seguintes, a Apple continuou a lançar novas versões do Mac OS X, incluindo o Leopard, o Snow Leopard, o Lion, o Mountain Lion, o Mavericks, o Yosemite, o El Capitan, o Sierra, o High Sierra, o Mojave, o Catalina e o Big Sur. Cada nova versão apresentava melhorias em desempenho, segurança e recursos. Hoje, o macOS é amplamente utilizado em computadores Macintosh da Apple em todo o mundo. O macOS é conhecido por sua interface gráfica de usuário elegante e intuitiva, sua estabilidade e segurança, e sua integração com outros produtos e serviços da Apple, como o iCloud e o iTunes. O macOS também é popular entre os desenvolvedores, pois oferece suporte a ferramentas de desenvolvimento avançadas, como o Xcode.História do WindowsA história do Windows começa em meados dos anos 1980, quando a Microsoft lançou sua primeira versão do sistema operacional, chamado de “Windows 1.0”. O Windows 1.0 foi lançado em 1985 e foi projetado para ser executado em PCs baseados em MS-DOS. Ele apresentava uma interface gráfica de usuário (GUI) baseada em janelas, que permitia que os usuários interagissem com o sistema operacional de forma mais intuitiva do que usando apenas comandos de texto.Nos anos seguintes, a Microsoft lançou várias versões do Windows, incluindo o Windows 2.0 em 1987 e o Windows 3.0 em 1990. O Windows 3.0 foi um grande sucesso para a Microsoft, vendendo mais de 10 milhões de cópias em apenas dois anos.Em 1993, a Microsoft lançou o Windows NT, um sistema operacional de rede projetado para ser executado em servidores e estações de trabalho corporativas. O Windows NT foi projetado para ser mais seguro e confiável do que as versões anteriores do Windows, e apresentava um novo sistema de arquivos, um kernel mais avançado e suporte a recursos de rede avançados.Em 1995, a Microsoft lançou o Windows 95, que se tornou o sistema operacional mais popular da empresa até então. O Windows 95 apresentava uma GUI totalmente redesenhada, com um menu Iniciar e a barra de tarefas, e também oferecia suporte a recursos avançados de hardware, como plug and play e dispositivos USB.Nos anos seguintes, a Microsoft continuou a lançar novas versões do Windows, incluindo o Windows 98, o Windows 2000, o Windows XP, o Windows Vista, o Windows 7, o Windows 8 e o Windows 10. Cada nova versão apresentava melhorias em desempenho, segurança, estabilidade e recursos. Hoje, o Windows é amplamente utilizado em computadores pessoais e corporativos em todo o mundo. A Microsoft também desenvolve outras plataformas de software, incluindo o Microsoft Office, o Microsoft Azure e o Microsoft Teams. O Windows é conhecido por sua ampla compatibilidade de hardware e software, sua interface gráfica de usuário amigável e seus recursos avançados de segurança e gerenciamento.Timeline Ano de lançamento Sistema Operacional 1956: GM-NAA I/O, um dos primeiros sistemas operacionais para mainframes 1961: CTSS (Compatible Time-Sharing System),   um dos primeiros sistemas operacionais de tempo compartilhado 1964: OS/360, um sistema operacional para mainframes desenvolvido pela IBM 1969: UNIX, um sistema operacional multiusuário e multitarefa   desenvolvido por Ken Thompson e Dennis Ritchie na Bell Labs 1971: CP/M (Control Program for Microcomputers),   um sistema operacional popular para computadores pessoais da década de 1970 1980: MS-DOS (Microsoft Disk Operating System),   um sistema operacional desenvolvido pela Microsoft para computadores pessoais 1984: Macintosh System Software, o primeiro sistema operacional   para computadores pessoais da Apple com interface gráfica de usuário 1985: Windows 1.0,   o primeiro sistema operacional para PCs com interface gráfica de usuário da Microsoft 1987: OS/2, um sistema operacional para PCs desenvolvido pela IBM e pela Microsoft 1987: Windows 2.0, segunda versão do sistema operacional para PCs com interface gráfica 1990: Windows 3.0 1991: Linux, um sistema operacional gratuito e de código aberto desenvolvido por Linus Torvalds 1992: Windows 3.1 1993: Debian Linux 1993: Windows NT, um sistema operacional de rede e estação de trabalho corporativa da Microsoft 1994: Red Hat, um sistema operacional linux 1994: Windows 3.11 1995: Mandrake linux 1995: Windows 95 1996: Windows NT 4.0 1998: SUSE linux 1998: Windows 98 2000: Windows 2000 2000: Windows ME 2001: Mac OS X, um sistema operacional da Apple baseado em Unix 2001: Windows XP, uma versão do sistema operacional da Microsoft para PCs pessoais 2003: Fedora linux (como um spin-off do Red Hat) 2004: Ubuntu (como um spin-off do Debian) 2005: CentOS (como um clone gratuito do Red Hat Enterprise Linux) 2006: Windows Vista 2007: Linux Mint (como um spin-off do Ubuntu) 2007: Android, um sistema operacional gratuito   e de código aberto desenvolvido pelo Google para dispositivos móveis 2008: Windows Server 2008 2009: Windows 7 2010: iOS, um sistema operacional da Apple para dispositivos móveis, como o iPhone e o iPad 2011: Arch Linux 2012: Windows 8 2013: Windows 8.1 2015: Windows 10, a versão mais popular do Windows 2021: Windows 11, a versão mais recente do sistema operacional da Microsoft para PCs pessoais Referências Wikimedia: Timeline das distribuições linux Wikipédia: Versões do Windows Apostila sobre Informática Básica Apostila sobre Informática básica Senac, intensivo Windows, pacote Office, internet" }, { "title": "Arquitetura do computador", "url": "/aulas/posts/arquitetura-do-computador/", "categories": "AULAS, INFORMÁTICA BÁSICA", "tags": "informática, Senac, manutenção", "date": "2023-02-14 13:00:00 -0300", "snippet": "Um Sistema Informático trata-se de um conjuntos de equipamentos mecânicos e eletrônicos adequados e capazes de processar dados afim de que estes se tornem informação, de forma automática.Objetivos ...", "content": "Um Sistema Informático trata-se de um conjuntos de equipamentos mecânicos e eletrônicos adequados e capazes de processar dados afim de que estes se tornem informação, de forma automática.Objetivos Conhecer a organização interna de um Sistema Informático; Reconhecer os componentes internos do sistemas informáticos; Compreender o processo de administração de dados no sistema informático; Entender o funcionamento e a importância dos componentes; Entender o dimensionamento e a compatibilidade.CaracterísticasArquitetura de Von NeumannArquitetura de Von NeumannA figura mostra como funciona o sistema onde são introduzidos os dados na Entrada, usando um ou mais dispositivos destinados a esse fim, e são trabalhados dentro de um dispositivo de processamento (UCP). Após o processamento, os dados são exibidos em dispositivos de Saída.Os equipamentos que são utilizados como entrada podem ser: mouse, teclado, scanner, webcam, etc. Já os de saída temos como exemplo: monitor, impressora, fone de ouvido, etc.Esse modelo é definido desde a arquitetura de criada por Von Neuman.O Sistema Informático é formado basicamente por 2 componentes: o Hardware e Software.Hardware é a parte física do computador, isto é, os componentes e equipamentos necessário para o funcionamento do sistema informático. Os programas que comandam o hardware, damos o nome de software. A Arquitetura de von Neumann (de John von Neumann, pronunciado Nóimánn) é uma arquitetura de computador que se caracteriza pela possibilidade de uma máquina digital armazenar seus programas no mesmo espaço de memória que os dados, podendo assim manipular tais programas. Esta arquitetura é um projeto modelo de um computador digital de programa armazenado que utiliza uma unidade de processamento (CPU) e uma de armazenamento (“memória”) para comportar, respectivamente, instruções e dados. 1Principais elementosArquitetura da comunicação com barramentos no computador Hardware - dispositivos físicos de entrada, processamento, memória e Saída; Software - comanda o Hardware, composto de Sistema Operacional e Aplicativos.EntradaNa entrada ocorre a interação com o usuário e a alimentação de dados através de: Teclado; Mouse; DVD-Rom; Rede; Web-Cam; Pen-Drive.ProcessamentoO processamento é composto de uma placa onde são montados: o processador, a memória e o barramento de alimentação e de comunicação entre todos os componentes.Placa mãeEsquema da placa-mãe do computadorÉ uma placa principal que interliga todos os outros componentes. A motherboard ou mainboard é uma placa de circuito impresso e pode apresentar diferentes configurações dependendo da marca e do modelo. Para se poder aproveitar todos os recursos e suas potencialidades, é essencial portar o Manual da mesma, nele obtemos, por exemplo, qual(is) processador(es) podem ser instalados, os tipos de memórias, a velocidade dos barramentos, etc.CPU ou ProcessadorEsquema da comunicação do processador com as memóriasOs processadores ou CPUs (Central Processing Unit) são circuitos integrados previamenteprogramados para realizar todas as tarefas relativas a manipulação e processamento dainformação em um computador. Através do seu uso é possível a manipulação da máquinacom dispositivos de entradas e dados em dispositivos de saída.BarramentoEsquema da comunicação através dos barramentos da placa-mãeOs barramentos ou bus, são sistemas de condutores que possibilita a comunicação e o tráfego de dados entre os componentes do sistema informático. Esse meio permite a comunicação entre processador CPU, memória principal, Slots de Expansão, etc. Podemos ter os seguintes tipos de barramentos: Barramento Local: é o barramento utilizado pelo processador para se comunicar com os dispositivos capitais, como memória principal e cache. Barramento de Dados: Esse barramento serve para transmissão de dados em duas direções em uma comunicação bidirecional full duplex. Barramento de Controle: Realiza o controle da comunicação de dados. Seu tráfego é simplex. Barramento de Endereço: Nesse barramento são enviados sinais relativos ao endereço da memória e da mesma forma do barramento de controle, utiliza comunicação simplex. Barramento de Expansão: é o canal por onde dispositivos de expansão são conectados, como placa de vídeo, som, rede, etc. Barramento de alimentação: trilhas de alimentação elétrica entre a fonte e os componentes eletrônicos.Chipsets ponte norte e sulTemos também os microcontroladores chamados de ponte norte e ponte sul, que controlam a comunicação entre os barramentos. A ponte norte que vem integrada nos computadores modernos controla a comunicação entre o processador e a memória principal, e a ponte sul a comunicação com os periféricos.Chipsets e as memóriasMemóriaChipsets e as memóriasHard Disc e SSDA memória é o elemento de suporte ao processamento dotado de capacidade para armazenamento de todo tipo de informação, seja eles dados simples ou programas. Computador possui basicamente dois tipos de memória: A Principal e a Secundária. Principal: Também conhecida como Primária ou Central, esse tipo de memória trata os dados diretamente com o processador, tornando-se indispensável para o sistema informático. Consistem em módulos ou pentes e a esses são agregados chips ou circuitos integrados que se conectam diretamente à placa-mãe. Secundária: é também chamada de suporte, pois sua função é armazenar informações, que se encontram na memória principal, de forma permanente. Essa informação é guardada para uso de antes ou depois de processamento. Geralmente são armazenadas em HDD, leitores de CD/DVD.SaídaNa saída as informações são fornecidas ou realimentão a entrada de um novo processamento. São exemplos de saídas: Monitor; Impressora; Pen-drive; Rede; Som.Software Software de Sistema: Função principal é servir de interface entre o usuário e o e hardware e também os softwares aplicativos e o maior exemplo dessa classe é o Sistema Operacional. Software de Aplicação: desempenha tarefas de aplicações do interesse do usuário, tais como editor de textos, planilhas, banco de dados.Principais componentes do computadorReferências Apresentação sobre Sistemas Informáticos Apostila sobre Montagem e Instalação de Sistemas Informáticos Monte seu PC - meupc.net Arquitetura de von Neumann - Wikipédia &#8617; " }, { "title": "Programação visual com blocos", "url": "/aulas/posts/programacao-em-blocos/", "categories": "AULAS, NOÇÕES DE ROBÓTICA", "tags": "arduino, robótica, curso, programação", "date": "2023-02-14 10:40:00 -0300", "snippet": "A programação visual com blocos é uma forma de programação em que os programas são criados juntando blocos em uma interface gráfica. Isso permite que as pessoas criem programas sem precisar escreve...", "content": "A programação visual com blocos é uma forma de programação em que os programas são criados juntando blocos em uma interface gráfica. Isso permite que as pessoas criem programas sem precisar escrever código, tornando a programação mais acessível para iniciantes e pessoas sem experiência em programação.Editores visuaisExistem várias ferramentas disponíveis para a programação visual com blocos, incluindo: Scratch: é uma plataforma de programação visual com blocos desenvolvida pelo MIT. Ele é projetado para ajudar as crianças a aprender a programar, mas também é usado por adultos para criar jogos, animações e aplicativos. Picoblox: baseado na linguagem de programação Scratch e inclui uma ampla variedade de recursos e ferramentas para criar projetos; Blockly: é uma biblioteca de programação visual com blocos desenvolvida pelo Google. É usada em várias ferramentas, incluindo o App Inventor para Android e o Code.org. App Inventor: é uma ferramenta de programação visual com blocos criada pelo MIT. É usada para criar aplicativos Android sem precisar escrever código.Como programar Para programar visualmente com blocos, você deve primeiro escolher a ferramenta que deseja usar. Em seguida, você pode começar a criar seu programa arrastando e soltando blocos na interface gráfica. Cada bloco representa uma ação ou instrução específica, como “mover para a frente”, “repetir até”, “esperar” e assim por diante. Você pode conectar os blocos uns aos outros para criar uma sequência de ações que o programa seguirá. Uma vez que você tenha criado seu programa com blocos, você pode executá-lo para ver como ele funciona. Algumas ferramentas de programação visual com blocos também permitem que você exporte seu código para uma linguagem de programação real, como Python ou JavaScript, se você quiser desenvolver suas habilidades em programação textual.Programando com ScratchScratch é uma plataforma de programação visual com blocos desenvolvida pelo MIT (Instituto de Tecnologia de Massachusetts). Ele é projetado para ensinar crianças e jovens a programar de maneira divertida e criativa, permitindo que eles criem jogos, animações, histórias interativas e muito mais.O Scratch oferece uma interface gráfica e intuitiva que permite que os usuários arrastem e soltem blocos para criar programas sem a necessidade de digitar linhas de código. Cada bloco representa uma ação ou instrução específica, como “mover para a frente”, “esperar”, “repetir até” e assim por diante. Os blocos podem ser combinados para criar sequências de ações que formam o programa.Além disso, o Scratch também inclui uma grande variedade de gráficos, sons e animações que os usuários podem usar em seus projetos. Eles também podem criar seus próprios recursos personalizados, como personagens, cenários e efeitos sonoros.Uma das características únicas do Scratch é sua comunidade online. Os usuários podem compartilhar seus projetos com outros membros da comunidade, receber feedback, ver e remixar projetos de outras pessoas, além de participar de desafios e competições. Isso torna o Scratch uma ferramenta ideal para a aprendizagem social e colaborativa.O Scratch é amplamente utilizado em escolas e outras instituições educacionais como uma ferramenta para ensinar programação e pensamento computacional. Ele ajuda os alunos a desenvolver habilidades importantes, como a resolução de problemas, a lógica e a criatividade, além de introduzi-los à programação de maneira divertida e envolvente.Em resumo, o Scratch é uma plataforma de programação visual com blocos que torna a programação acessível e divertida para crianças e jovens, permitindo que eles criem projetos interativos e desenvolvam habilidades importantes, como a resolução de problemas e a criatividade. Para acessar o Scratch entre em https://scratch.mit.edu/Robótica com PictobloxO PictoBlox é uma plataforma de programação visual com blocos projetada para ensinar crianças e jovens a programar de maneira divertida e educativa. Ele é baseado na linguagem de programação Scratch e inclui uma ampla variedade de recursos e ferramentas para criar projetos envolventes, como jogos, animações, robôs e projetos de IoT (Internet das Coisas).O PictoBlox oferece uma interface intuitiva e fácil de usar, com uma grande variedade de blocos que representam diferentes ações e instruções de programação. Os blocos podem ser arrastados e soltos para criar programas, sem a necessidade de digitar linhas de código.Uma das principais características do PictoBlox é a sua integração com o kit de robótica DIY (faça você mesmo) chamado “evive”. O evive é uma placa que funciona como um cérebro de robôs e projetos de IoT, permitindo que os usuários adicionem sensores, motores e outros componentes eletrônicos para criar robôs e dispositivos inteligentes. O PictoBlox inclui blocos específicos para controlar o evive e seus componentes, tornando mais fácil a criação de projetos de robótica e IoT.O PictoBlox também oferece uma série de tutoriais e recursos educacionais para ajudar os usuários a aprenderem a programar. Esses recursos incluem exemplos de projetos, vídeos tutoriais, atividades interativas e desafios de programação.Em resumo, o PictoBlox é uma plataforma de programação visual com blocos que permite que crianças e jovens aprendam a programar de maneira divertida e educativa, incluindo a possibilidade de trabalhar com projetos de robótica e IoT.Exemplo de programação com Pictoblox: Para acessar o Pictoblox entre em https://pictoblox.ai/BlocklyBlockly é uma biblioteca de código aberto que permite a criação de editores visuais de programação baseados em blocos. Ela foi desenvolvida pelo Google e é amplamente utilizada em diversas plataformas de programação visual com blocos, como o Code.org e o MIT App Inventor.O Blockly é projetado para ser altamente personalizável e extensível. Ele oferece uma ampla variedade de blocos de programação pré-definidos que podem ser usados para criar programas em várias linguagens de programação, incluindo JavaScript, Python, PHP e Dart. Os usuários também podem criar seus próprios blocos personalizados, definindo suas próprias ações e instruções.Uma das características únicas do Blockly é que ele oferece uma interface de usuário altamente intuitiva. Os usuários podem criar programas arrastando e soltando blocos para criar uma sequência de ações que representam o programa. Cada bloco é colorido e rotulado com uma instrução de programação específica, tornando mais fácil a compreensão do que está acontecendo em cada parte do programa.Além disso, o Blockly também permite a criação de editores visuais de programação personalizados, que podem ser integrados em outras aplicações e plataformas. Isso permite que os usuários criem experiências de programação personalizadas e únicas, adaptadas para atender às suas necessidades específicas.O Blockly é amplamente utilizado em diversas aplicações de programação visual com blocos, incluindo jogos educativos, ferramentas de robótica e plataformas de aprendizado de programação. Ele oferece uma maneira acessível e intuitiva para que os usuários aprendam a programar e desenvolvam habilidades importantes, como a resolução de problemas, a lógica e a criatividade.App InventorO App Inventor é uma plataforma de desenvolvimento de aplicativos móveis baseada em programação visual com blocos, desenvolvida pelo MIT (Instituto de Tecnologia de Massachusetts). Ele permite que os usuários criem aplicativos móveis para Android de maneira fácil e intuitiva, sem a necessidade de conhecimentos de programação avançados.O App Inventor oferece uma interface gráfica de usuário em que os usuários podem arrastar e soltar blocos de programação para criar a lógica do aplicativo. Cada bloco representa uma ação específica, como “mostrar uma mensagem”, “tocar um som”, “enviar uma mensagem de texto” e assim por diante. Esses blocos podem ser combinados para criar uma sequência de ações que forma o aplicativo.O App Inventor também inclui uma ampla variedade de componentes de interface do usuário, como botões, caixas de texto, imagens e outros elementos, que os usuários podem usar para criar a aparência do aplicativo. Além disso, os usuários podem integrar vários recursos do dispositivo, como a câmera, o microfone e o GPS, em seus aplicativos.Uma das características únicas do App Inventor é a sua comunidade online. Os usuários podem compartilhar seus aplicativos com outros membros da comunidade, obter feedback, aprender com tutoriais e exemplos e até mesmo colaborar em projetos. Isso torna o App Inventor uma ferramenta ideal para a aprendizagem social e colaborativa.O App Inventor é amplamente utilizado em escolas e outras instituições educacionais como uma ferramenta para ensinar programação e pensamento computacional. Ele ajuda os alunos a desenvolver habilidades importantes, como a resolução de problemas, a lógica e a criatividade, além de introduzi-los à programação de maneira divertida e envolvente.Referências Scratch Picoblox Blockly App Inventor" }, { "title": "Trabalho emprego profissão carreira", "url": "/aulas/posts/trabalho-e-emprego/", "categories": "AULAS, PLANEJAMENTO DE CARREIRA", "tags": "planejamento, carreira, empregabilidade", "date": "2023-02-14 10:00:00 -0300", "snippet": "Trabalho e emprego são conceitos semelhantes, mas com diferenças sutis.TrabalhoTrabalho é uma atividade remunerada ou não, realizada por uma pessoa, que pode ser formal ou informal, e que pode ser ...", "content": "Trabalho e emprego são conceitos semelhantes, mas com diferenças sutis.TrabalhoTrabalho é uma atividade remunerada ou não, realizada por uma pessoa, que pode ser formal ou informal, e que pode ser realizada em casa, na comunidade ou no local de trabalho. O trabalho pode ser voluntário ou obrigatório, e pode incluir tarefas domésticas, atividades comunitárias, trabalho empresarial, entre outros.EmpregoEmprego, por outro lado, é uma forma de trabalho remunerado, com um contrato de trabalho formal, que fornece segurança de renda e benefícios sociais. O emprego é normalmente associado a uma posição remunerada em uma empresa, organização ou instituição, onde a pessoa trabalha em troca de salário e outros benefícios, como férias, seguro saúde, entre outros. Em resumo, todo emprego é trabalho, mas nem todo trabalho é emprego.ProfissãoProfissão é uma atividade remunerada, realizada por uma pessoa, que exige conhecimento especializado e habilidades técnicas adquiridas através de estudos e treinamento. Alguns exemplos de profissões incluem médico, engenheiro, advogado, professor, entre outros.Carreiracarreira é o trajeto de desenvolvimento profissional de uma pessoa, incluindo sua evolução em termos de responsabilidade, autoridade e remuneração. A carreira pode incluir mudanças de emprego, promoções, desafios e desenvolvimento de novas habilidades. É uma jornada que pode durar uma vida toda, e que é influenciada por fatores como escolhas pessoais, oportunidades de mercado e habilidades. Em resumo, a profissão é a atividade específica que uma pessoa escolhe como forma de ganhar a vida, enquanto a carreira é o caminho que ela percorre ao longo do tempo dentro dessa profissão.Trabalhar e estudarMuitos estudantes escolhem combinar seus estudos com trabalho, seja para complementar sua renda, adquirir experiência profissional, ou simplesmente porque precisam trabalhar para se manter financeiramente.Trabalhar enquanto se estuda pode ser desafiador, pois exige equilibrar responsabilidades acadêmicas e profissionais. No entanto, se bem gerenciado, pode trazer muitos benefícios, tais como: Adquirir experiência profissional relevante para a sua carreira futura; Complementar sua renda e ajudar a financiar seus estudos; Desenvolver habilidades importantes como organização, gestão do tempo e resolução de problemas; Ampliar sua rede de contatos profissionais. No entanto, é importante lembrar que trabalhar e estudar ao mesmo tempo pode ser cansativo e estressante, e que é importante encontrar um equilíbrio saudável para evitar prejudicar sua saúde ou sua performance acadêmica. Se possível, é recomendável escolher um trabalho que permita flexibilidade e possibilite conciliar com seus estudos.ReferênciaDiferenças entre trabalho e emprego - Portal do Mec" }, { "title": "Arquitetura de redes", "url": "/aulas/posts/arquitetura-de-redes/", "categories": "AULAS, INFRAESTRUTURA DE REDES", "tags": "redes, infraestrutura", "date": "2023-02-14 09:00:00 -0300", "snippet": "A arquitetura de redes de computadores é composta por diversos componentes que trabalham juntos para garantir a comunicação eficiente entre dispositivos na rede.Componentes Dispositivos de rede: E...", "content": "A arquitetura de redes de computadores é composta por diversos componentes que trabalham juntos para garantir a comunicação eficiente entre dispositivos na rede.Componentes Dispositivos de rede: Estes incluem roteadores, switches, hubs, pontes, modems, etc. Eles são responsáveis por fornecer conexão física entre dispositivos na rede e controlar o tráfego de dados. Protocolos de rede: Estes são conjuntos de regras que governam a comunicação na rede. Os protocolos mais comuns são o TCP/IP, o UDP, o HTTP, o FTP, o DNS, entre outros. Endereços IP: Cada dispositivo na rede tem um endereço IP único, que é usado para identificá-lo e permitir que ele seja encontrado por outros dispositivos. Servidores: Estes são computadores que fornecem serviços aos dispositivos da rede, como o armazenamento de arquivos, o gerenciamento de impressoras, o gerenciamento de usuários, entre outros. Segurança: É importante proteger a rede contra acesso não autorizado, invasões de segurança e outras ameaças. Para isso, são utilizadas diversas técnicas de segurança, como firewalls, criptografia, autenticação de usuários, entre outros.Protocolos de redeOs protocolos de rede são regras e padrões que definem como os dispositivos na rede se comunicam entre si. Eles especificam como os dados são transmitidos, formatados e recebidos, garantindo que a comunicação seja eficiente e confiável.Os protocolos de rede são usados em diferentes camadas da Pilha de Protocolos TCP/IP, cada um responsável por diferentes aspectos da comunicação de dados. Alguns exemplos de protocolos de rede incluem: HTTP (HyperText Transfer Protocol): usado para transferir dados na Web, especificamente páginas da web e outros conteúdos da Internet. FTP (File Transfer Protocol): usado para transferir arquivos entre dispositivos na rede. SMTP (Simple Mail Transfer Protocol): usado para transferir e-mails entre servidores de correio eletrônico. TCP (Transmission Control Protocol): responsável por garantir que os dados sejam transmitidos de maneira confiável, garantindo que todos os pacotes de dados cheguem ao destinatário na ordem correta. IP (Internet Protocol): responsável por rotear pacotes de dados através da rede, identificando o destinatário e garantindo que eles cheguem ao local correto. A utilização de protocolos padronizados é fundamental para a interoperabilidade entre dispositivos de diferentes fabricantes e para garantir a confiabilidade e eficiência da comunicação de dados na rede.O modelo OSIO Modelo OSI (Open Systems Interconnection) é um modelo de referência para redes de computadores, projetado para facilitar a compreensão e a interoperabilidade entre sistemas diferentes. Ele é composto por sete camadas, cada uma delas responsável por diferentes aspectos da comunicação de dados.As sete camadas do Modelo OSI são: Camada de Aplicação: é responsável por fornecer a interface para aplicações, como o navegador da Web ou o cliente de e-mail. Camada de Apresentação: responsável por formatar os dados para que possam ser lidos pelas aplicações na camada de aplicação. Camada de Sessão: responsável por estabelecer, gerenciar e encerrar sessões entre aplicações, garantindo que as mensagens sejam entregues corretamente. Camada de Transporte: responsável por garantir a entrega confiável dos dados, independentemente da complexidade da rede. Camada de Rede: responsável por rotear pacotes de dados através da rede, identificando o destinatário e garantindo que eles cheguem ao local correto. Camada de Enlace de Dados: responsável por gerenciar o acesso à mídia de rede, como o cabo Ethernet ou o WiFi. Camada Física: responsável por representar a física da mídia de rede, como os pinos e os sinais elétricos que transmitem os dados. O Modelo OSI é uma abstração do funcionamento de uma rede de computadores e é amplamente utilizado como uma ferramenta para ensinar a arquitetura de redes e para garantir a interoperabilidade entre sistemas diferentes. Embora os sistemas reais não sigam rigorosamente o Modelo OSI, ele é útil como uma forma de organizar e compreender a complexidade da comunicação de dados em redes de computadores.O modelo TCPIPO Modelo TCP/IP (Transmission Control Protocol/Internet Protocol) é um modelo de referência para redes de computadores que é amplamente utilizado na Internet. Ele é composto por quatro camadas, cada uma delas responsável por diferentes aspectos da comunicação de dados.As quatro camadas do Modelo TCP/IP são: Camada de Aplicação: é responsável por fornecer a interface para aplicações, como o navegador da Web ou o cliente de e-mail. Camada de Transporte: responsável por garantir a entrega confiável dos dados, independentemente da complexidade da rede. O TCP (Transmission Control Protocol) é o protocolo utilizado nesta camada. Camada de Rede: responsável por rotear pacotes de dados através da rede, identificando o destinatário e garantindo que eles cheguem ao local correto. O IP (Internet Protocol) é o protocolo utilizado nesta camada. Camada Física: responsável por representar a física da mídia de rede, como os pinos e os sinais elétricos que transmitem os dados. A diferença principal entre o Modelo TCP/IP e o Modelo OSI é que o Modelo TCP/IP é mais simples e focado na interoperabilidade entre sistemas, enquanto o Modelo OSI é mais complexo e abrangente. O modelo TCP/IP é amplamente utilizado como uma forma de organizar e compreender a comunicação de dados na Internet.Referências Arquitetura de Redes de Computadores - Ana Julia F Alves Ferreira Apostila de Meios de Comunicação de Dados" }, { "title": "Informática Básica", "url": "/aulas/posts/informatica-basica/", "categories": "AULAS, INFORMÁTICA BÁSICA", "tags": "informática, Senac", "date": "2023-02-13 13:00:00 -0300", "snippet": "Desenvolver competências e habilidades para utilizar as ferramentas do sistema operacional Windows e dos aplicativos de escritório Word, Excel, Power Point e navegador WEB.Objetivo profissionalOs c...", "content": "Desenvolver competências e habilidades para utilizar as ferramentas do sistema operacional Windows e dos aplicativos de escritório Word, Excel, Power Point e navegador WEB.Objetivo profissionalOs computadores e o meio digital em si transformaram a sociedade nos últimos anos. A partir dessa mudança, surgiu a necessidade tanto pessoal, quanto profissional do domínio da informática básica, que envolve conhecimentos da parte física do computador, até seus programas básicos e ferramentas. Neste contexto, há um aumento significativo no uso do computador nas tarefas do cotidiano das empresas, por isso uma das principais exigências do mundo do trabalho é conhecer e utilizar o computador e seus principais recursos. Objetivos: Utilizar ferramentas básicas de sistemas operacionais cliente na operação de computadores; Utilizar ferramentas e serviços da internet, aplicando práticas de segurança da informação; Utilizar ferramentas do aplicativo de correio eletrônico de acordo com práticas de segurança da informação; Elaborar e edita textos, utilizando ferramentas do aplicativo de edição de textos; Elaborar e edita planilhas, utilizando as ferramentas do aplicativo de planilhas eletrônicas; Criar e edita apresentações multimídia, utilizando as ferramentas do aplicativo de apresentação eletrônica; Transferir dados utilizando periféricos, de acordo com a especificidade do trabalho; Utilizar aplicativos utilitários na operação do computador respeitando normas e regras de segurança. Organização curricular: Introdução a Processamento de Dados - IPD Definição e evolução do computador; Processamento de dados; Representação dos Dados (Bit e Byte); Hardware (UCP e Dispositivos Periféricos); Classificação de Software; Sistema Operacional Windows Conceito de Sistema Operacional; Área de trabalho (ícone, barra de tarefas); Personalização do desktop (plano de fundo, protetor de tela); Operações com janelas; Atalhos; Barra de tarefas; Acessórios (calculadora, wordpad e paint). Windows Explorer - Gerenciamento de pastas, arquivos e dispositivos; Localização de arquivos e pastas; Lixeira; Painel de Controle. Processador de Textos Word Elementos da tela; Manipulação com arquivo de texto; Recursos de seleção de texto; Copiar, recortar e colar texto; Ferramenta Zoom; Desfaz e refaz ações; Formatação de fonte e parágrafos; Tabulação; Bordas, plano de fundo (sombreamento) e moldura na página e no texto; Cabeçalho e rodapé; Quebra de página; Operações com figuras; Numeração de páginas; Listas numeradas e com marcadores; Inserir e formatar Tabelas; Revisor ortográfico; Configuração de página e de impressão; Planilha Eletrônica Excel Conceito de Planilha eletrônica; Principais elementos do espaço de trabalho (Pasta, planilha, célula, barras, menus); Navegação; Edição de dados nas células; Seleção de célula, intervalo(s), coluna(s), linha(s), toda planilha; Operações com colunas e linhas; Cópia e movimentação de dados das células; Desfazer e refazer ações realizadas; Alça de preenchimento; Área de transferência do Excel; Formatação de células (fonte, alinhamento, número, plano de fundo, bordas); Construção de fórmulas matemáticas, usando operadores matemáticos (+, -, *, /, %, ^) e os operadores relacionais (&gt;, &lt;, &lt;&gt;, =, &lt;=, &gt;=); Algumas funções do Excel (Soma, Média, Máximo, Mínimo, Se simples e aninhado), usando também o assistente de funções; Criação e formatação de Gráficos; Configuração de página, visualização e impressão. Fundamentos de Internet Conceitos básicos; Navegação Internet Explorer; Serviços de Pesquisa; Download; Correio Eletrônico (e-mail) Criação de conta, envio e recebimento, respondendo, enviando com anexo. Gerenciador de apresentação Power Point Conhecendo o ambiente, os elementos e as ferramentas do gerenciador; Criando slides com auto-layouts; Modos de classificação e exibição de slides; Trabalhando com marcadores; Utilizando as ferramentas de desenho; Utilizando a biblioteca de figuras; Conhecendo os modelos de estrutura; Efeitos especiais; Configurando a apresentação; Trabalhando com gráficos; Inserindo Hyperlinks; Criando ações. Bibliografia: Apostila de Informática Básica Intensivo - Windows. 003791. Ed. SENAC. Apostila de Informática Básica. Ensino Médio Integrado à Educação Profissional, SEDUC - CE. Apostila sobre Informática Básica Apostila sobre Informática básica Senac, intensivo Windows, pacote Office, internet" }, { "title": "Conceitos básicos de redes da Cisco", "url": "/aulas/posts/basico-de-redes/", "categories": "AULAS, INFRAESTRUTURA DE REDES", "tags": "redes, infraestrutura, Cisco, curso", "date": "2023-02-13 10:40:00 -0300", "snippet": "Este curso mostra como conectar e configurar dispositivos em sua rede, incluindo dispositivos sem fio, e como verificar sua conectividade. Você aprenderá sobre pacotes e como eles trafegam em uma r...", "content": "Este curso mostra como conectar e configurar dispositivos em sua rede, incluindo dispositivos sem fio, e como verificar sua conectividade. Você aprenderá sobre pacotes e como eles trafegam em uma rede.CaracterísticasA Cisco oferece o programa “Skill for All”, que oferece cursos gratuitos para ajudar as pessoas a desenvolver habilidades digitais e melhorar sua empregabilidade. Suas características são: Iniciante; Gratuito; 4 idiomas inclusive português; Prática no simulador Packet Tracer; Vídeo aulas online; Testes de aprendizado; Texto didático; Plano de carreira em segurança cibernética.Como acessarPara ter acesso a esses cursos, você pode seguir os seguintes passos: Visite o site da Cisco: Acesse o site oficial da Cisco e procure pelo programa “Skill for All”. Crie uma conta: entre com sua conta da Google ou crie uma conta gratuita na plataforma de aprendizado da Cisco. Escolha o curso: Escolha o curso que deseja fazer entre as opções disponíveis no programa “Skill for All”. Inscreva-se: Clique no botão “Inscreva-se” para se inscrever no curso. Comece a aprender: Assim que estiver inscrito, você pode começar a aprender imediatamente.Conceitos básicos de redesO curso de “Conceitos Básicos de Redes” da Cisco é projetado para ensinar aos alunos os conceitos fundamentais de redes de computadores.O curso normalmente abrange tópicos como: Fundamentos de rede: Introdução às redes de computadores, incluindo terminologia, topologias e padrões de comunicação. Protocolos de rede: Conhecimento básico dos protocolos de rede mais comuns, como o TCP/IP e o DHCP. Roteamento e comutação: Introdução ao roteamento e à comutação em redes, incluindo as funções de roteadores e switches. Segurança de rede: Conceitos básicos de segurança de rede, incluindo firewall, criptografia e autenticação. Wireless: Introdução às redes sem fio, incluindo tecnologias como Wi-Fi e Bluetooth.Este curso é destinado a pessoas sem conhecimento prévio em redes e é uma boa opção para aqueles que desejam entrar no campo da tecnologia da informação ou melhorar suas habilidades em redes.Simulador de redesO Cisco Packet Tracer é um simulador de redes que permite que os usuários criem, modifiquem e visualize redes de computadores em um ambiente virtual. É uma ferramenta educacional desenvolvida pela Cisco para ajudar os alunos a compreender como as redes de computadores funcionam.Aqui estão algumas das características do Cisco Packet Tracer: Design de rede: O simulador permite que os usuários desenhem suas próprias redes, incluindo dispositivos como roteadores, switches e firewalls. Simulação: O Cisco Packet Tracer simula o funcionamento das redes, permitindo que os usuários vejam como os pacotes de dados se movem através da rede. Análise de desempenho: A ferramenta permite que os usuários avaliam o desempenho da rede, incluindo a velocidade de transferência de dados e a utilização da largura de banda. Aprendizagem interativa: O Cisco Packet Tracer fornece uma interface intuitiva e fácil de usar que ajuda os alunos a aprender sobre redes de maneira interativa. Integração com outros recursos: O simulador pode ser integrado a outros recursos da Cisco, como o laboratório virtual, para fornecer uma experiência de aprendizagem mais completa. O Cisco Packet Tracer é uma ferramenta valiosa para os alunos que estudam redes de computadores, pois lhes permite experimentar e aprender de forma segura e controlada, sem o risco de prejudicar a rede real. Além disso, é uma boa opção para profissionais que desejam aprimorar suas habilidades em redes.Referências Conceitos Básicos de Redes - Habilidades para todos da Cisco Explorando redes no Simulador de redes Packet Tracer" }, { "title": "Empregabilidade", "url": "/aulas/posts/empregabilidade/", "categories": "AULAS, PLANEJAMENTO DE CARREIRA", "tags": "planejamento, carreira, empregabilidade", "date": "2023-02-13 10:00:00 -0300", "snippet": "Empregabilidade é a capacidade de uma pessoa de conseguir e manter um emprego.CaracterísticasA empregabilidade inclui as habilidades, competências, qualificações e atitudes que fazem com que uma pe...", "content": "Empregabilidade é a capacidade de uma pessoa de conseguir e manter um emprego.CaracterísticasA empregabilidade inclui as habilidades, competências, qualificações e atitudes que fazem com que uma pessoa seja atraente para empregadores. Alguns fatores que afetam a empregabilidade incluem: formação acadêmica, experiência profissional, habilidades técnicas, habilidades de comunicação, flexibilidade e capacidade de resolução de problemas. É importante notar que a empregabilidade varia de acordo com a indústria, o mercado de trabalho e as tendências econômicas. Por isso, é importante estar sempre buscando maneiras de melhorar a sua empregabilidade e se adaptar às mudanças no mercado de trabalho.A buscaExiste a tendência das pessoas buscarem ser empregáveis ao longo de toda a vida, em vez de se dedicarem a uma única empresa ou carreira. Isso se deve, em parte, às mudanças na economia e ao aumento da competitividade no mercado de trabalho, que exige que as pessoas sejam flexíveis e capazes de se adaptar a novos cenários e oportunidades. Além disso, com a evolução da tecnologia e a automação de muitas profissões, é importante que as pessoas tenham habilidades e competências que possam ser transferíveis para diferentes setores e posições, para garantir a sua empregabilidade ao longo da vida. A busca por uma carreira diversificada e por novas oportunidades de aprendizado e crescimento também está se tornando cada vez mais comum.Como ter empregabilidade Mantenha-se atualizado: É importante estar sempre atualizado com as últimas tendências e tecnologias relacionadas à sua área de atuação. Isso pode ser feito através de cursos, workshops, conferências e leitura de livros e artigos relevantes. Desenvolva habilidades transferíveis: Além de habilidades técnicas específicas da sua área, é importante desenvolver habilidades transferíveis, como comunicação efetiva, resolução de problemas, trabalho em equipe e liderança. Networking: Mantenha uma rede de contatos profissionais e participe de eventos e comunidades relacionadas à sua área de atuação. Isso pode ajudá-lo a ficar ciente de novas oportunidades de emprego e a construir relacionamentos valiosos com colegas e possíveis empregadores. Aprenda continuamente: Aprender continuamente é fundamental para manter a sua empregabilidade. Além de aprimorar suas habilidades e conhecimentos, isso também mostra aos empregadores que você é uma pessoa comprometida e interessada em crescer profissionalmente. Tenha uma presença online positiva: Mantenha uma presença profissional online, como um perfil no LinkedIn, e cuide para que suas postagens nas redes sociais sejam apropriadas e profissionais. Lembre-se de que manter a empregabilidade é um processo contínuo e requer dedicação e esforço constante. Ao seguir essas dicas, você pode aumentar suas chances de conseguir e manter um emprego que lhe permita crescer profissionalmente e atingir seus objetivos de carreira.Exigências do mercado de trabalhoAs exigências do mercado de trabalho para manter a empregabilidade variam de acordo com a indústria e a área de atuação, mas algumas habilidades e competências são comuns a muitos setores e posições. Aqui estão algumas das exigências mais comuns: Habilidades técnicas: Conhecimento e habilidades específicas da sua área, como programação, design, contabilidade, etc. Habilidades digitais: Conhecimento e habilidade em tecnologia da informação e ferramentas digitais, como software de produtividade, análise de dados, etc. Comunicação efetiva: Capacidade de se comunicar claramente, escrever de forma coerente e falar em público. Resolução de problemas: Capacidade de identificar e solucionar problemas de forma efetiva. Trabalho em equipe: Capacidade de trabalhar em equipe e colaborar com colegas e gerentes. Aprendizado contínuo: Vontade de aprender continuamente e buscar novos conhecimentos e habilidades. Adaptabilidade: Capacidade de se adaptar a mudanças no ambiente de trabalho e a novos desafios. Liderança: Habilidade em liderança e capacidade de motivar e dirigir equipes. Lembre-se de que essas exigências podem variar de acordo com a indústria e a posição, e que é importante estar sempre atualizado sobre as tendências e exigências do mercado de trabalho em sua área de atuação.Referência Aula 2 - Introdução ao Mercado de Trabalho - de Charles Lima " }, { "title": "Arduino", "url": "/aulas/posts/arduino/", "categories": "AULAS, NOÇÕES DE ROBÓTICA", "tags": "eletrônica, arduino, robótica", "date": "2023-02-13 09:00:00 -0300", "snippet": "Arduino é uma plataforma de prototipagem eletrônica de código aberto que permite a criação de dispositivos eletrônicos interativos.CaracterísticasEle é composto por uma placa de circuito impresso q...", "content": "Arduino é uma plataforma de prototipagem eletrônica de código aberto que permite a criação de dispositivos eletrônicos interativos.CaracterísticasEle é composto por uma placa de circuito impresso que contém um microcontrolador, juntamente com componentes adicionais, como entradas e saídas digitais e analógicas, que podem ser facilmente programados usando uma linguagem de programação baseada em C/C++.O Arduino é projetado para ser uma ferramenta acessível e fácil de usar para criadores, estudantes e profissionais de todas as habilidades e níveis de experiência. Ele permite que os usuários criem projetos que interagem com o mundo físico ao seu redor, como sensores, luzes, motores, telas e outros dispositivos, tornando possível construir tudo, desde robôs a instalações artísticas interativas.Como uma plataforma de código aberto, o Arduino também é altamente personalizável e flexível, permitindo que os usuários adaptem o hardware e o software para atender às suas necessidades específicas. Isso significa que é possível criar projetos personalizados, compartilhar suas criações com outros usuários e contribuir para a comunidade de desenvolvedores de Arduino em todo o mundo.HistóricoO Arduino tem uma história de evolução contínua desde o seu lançamento em 2005. Aqui está uma visão geral das principais versões do Arduino e seus recursos: Arduino 2005: Foi a primeira versão do Arduino, desenvolvida por Massimo Banzi e David Cuartielles em 2005. Essa versão inicial era baseada no microcontrolador ATmega8 e possuía uma interface serial para programação. Arduino NG 2005: Em 2005, a equipe do Arduino lançou o Arduino NG (Next Generation), que incluía uma nova porta USB para programação e uma interface de alimentação simplificada. Arduino Diecimila 2007: Em 2007, foi lançada a placa Arduino Diecimila, que apresentava um novo regulador de tensão e um LED de status. Arduino Duemilanove 2009: Em 2009, foi lançada a placa Arduino Duemilanove, que apresentava um novo regulador de tensão e um botão de reset. Arduino Uno 2010: Em 2010, foi lançada a placa Arduino Uno, que apresentava um novo microcontrolador ATmega328P, um novo circuito de reset e uma porta USB mais robusta. Arduino Leonardo 2012: Em 2012, foi lançada a placa Arduino Leonardo, que apresentava um microcontrolador ATmega32U4 com suporte a USB nativo, tornando possível a comunicação com o computador sem a necessidade de um chip USB externo. Arduino Due 2012: Em 2012, foi lançada a placa Arduino Due, que apresentava um microcontrolador ARM Cortex-M3 de 32 bits com maior poder de processamento e recursos de memória. Arduino Zero 2014: Em 2014, foi lançada a placa Arduino Zero, que apresentava um microcontrolador ARM Cortex-M0+ de 32 bits, com recursos de memória e velocidade de clock aprimorados. Arduino MKR1000 2016: Em 2016, foi lançada a placa Arduino MKR1000, que apresentava conectividade Wi-Fi integrada e recursos avançados de segurança. Arduino Nano 2018: Em 2018, foi lançada a placa Arduino Nano, que apresentava um formato menor e mais compacto, tornando-a ideal para projetos com espaço limitado.Linha do tempo do Arduino, fonte arduino.cc Essas são apenas algumas das principais versões do Arduino ao longo dos anos. Desde o seu lançamento, o Arduino tem evoluído constantemente, com novos recursos e funcionalidades sendo adicionados regularmente, o que o torna uma plataforma de prototipagem eletrônica altamente versátil e flexível.FuncionalidadesUma das grandes vantagens do Arduino é a sua capacidade de expansão e flexibilidade. É possível conectar uma grande variedade de sensores, módulos e shields à placa principal, permitindo que os usuários adicionem novas funcionalidades ao seu projeto sem precisar trocar a placa.Os shields, por exemplo, são placas de expansão que se encaixam diretamente na placa principal do Arduino e adicionam novas funcionalidades, como conectividade Wi-Fi, Ethernet, Bluetooth, GPS, entre outras. Além disso, o Arduino também suporta a comunicação com outros dispositivos e sistemas, permitindo que ele se integre facilmente com outros dispositivos eletrônicos e softwares.Uma vez programado, o Arduino pode ser utilizado sem a necessidade de um computador, tornando-o uma solução autônoma para muitas aplicações. Tudo o que é necessário é uma fonte de alimentação adequada para a placa, e ela pode executar o programa instalado em loop sem parar. Isso torna o Arduino uma opção muito versátil para uma ampla gama de projetos eletrônicos e de automação.Open sourceO Arduino foi desenvolvido com base no conceito open-source, que permite que o projeto da placa e o firmware sejam utilizados livremente por outros desenvolvedores e fabricantes. Isso significa que qualquer pessoa pode usar e modificar o projeto do Arduino, contribuir com novos recursos e funcionalidades, e até mesmo criar variações e versões personalizadas da placa.Essa filosofia de código aberto é fundamental para o movimento maker, que valoriza a criatividade, a experimentação e a colaboração. Com o Arduino, os makers podem facilmente criar projetos eletrônicos personalizados, compartilhar suas ideias com a comunidade e se inspirar em outros projetos existentes. Isso incentiva a inovação e promove a criação de soluções criativas para os mais diversos problemas e necessidades.Além disso, o modelo de desenvolvimento de código aberto também tem tido um impacto significativo na indústria como um todo. Empresas e fabricantes agora têm a oportunidade de colaborar e criar soluções inovadoras juntas, e muitos produtos e tecnologias são desenvolvidos com base em projetos e tecnologias de código aberto. Isso está levando a uma nova era de inovação e progresso tecnológico, que é impulsionada pela comunidade maker e pelo conceito de código aberto.ComponentesAnatomia do Arduino, fonte arduino.ccO Arduino é uma placa eletrônica que contém vários componentes para permitir que ele funcione como uma plataforma de prototipagem eletrônica. Aqui estão alguns dos principais componentes do Arduino: Microcontrolador: O componente principal do Arduino é o microcontrolador, que é responsável por executar o programa carregado na placa. Os modelos mais comuns de Arduino utilizam microcontroladores da família AVR da Atmel, como o ATmega328P. Oscilador: O oscilador é um componente que fornece um sinal de clock estável para o microcontrolador, permitindo que ele execute as instruções do programa em um ritmo constante. Portas de entrada/saída (E/S ou I/O): As portas de entrada e saída são usadas para conectar dispositivos externos ao Arduino, como sensores, LEDs, motores, entre outros. A maioria das placas Arduino possui várias portas de E/S digitais, que podem ser configuradas como entrada ou saída, bem como algumas portas de E/S analógicas. Conectores: O Arduino possui vários conectores para permitir que ele seja conectado a outros dispositivos. Isso inclui um conector USB para programação e alimentação, conectores de alimentação para entrada de energia, conectores para portas de entrada/saída, entre outros. Regulador de tensão: O regulador de tensão é um componente que permite que o Arduino seja alimentado por uma variedade de fontes de energia, como baterias ou adaptadores AC/DC. Ele é responsável por regular a tensão de entrada para uma tensão constante que o microcontrolador possa usar. Botão de reset: O botão de reset permite que o programa seja reiniciado manualmente, o que pode ser útil para testar o código em situações específicas. LEDs: O Arduino possui alguns LEDs incorporados para indicar o status da placa. Por exemplo, a maioria das placas possui um LED indicador de energia e um LED indicador de atividade do programa. Capacitores: Os capacitores são usados para estabilizar a tensão no circuito e proteger o microcontrolador contra ruído elétrico.Esses são apenas alguns dos principais componentes do Arduino. Dependendo do modelo da placa, outros componentes, como resistores, cristais, transistores, entre outros, podem estar presentes para permitir que o Arduino seja usado em uma ampla variedade de projetos eletrônicos.MicrocontroladorO microcontrolador é o componente principal do Arduino e é o responsável por executar o programa que foi carregado na placa. Ele é responsável por interpretar os comandos contidos no código do programa e por controlar as portas de entrada e saída, que são chamadas de E/S (Entrada/Saída) ou I/O (Input/Output). As portas de entrada permitem que o microcontrolador receba sinais de sensores, botões ou outros dispositivos, enquanto as portas de saída permitem que o microcontrolador envie sinais para ativar ou desativar dispositivos externos, como LEDs, motores, relés, entre outros. O microcontrolador é programável, o que significa que podemos escrever e carregar diferentes programas na placa para realizar diferentes tarefas, permitindo que o Arduino seja usado em uma variedade de projetos eletrônicos.Portas de entrada e saídaAs placas Arduino têm vários tipos de portas de entrada/saída (E/S ou I/O), cada uma com sua própria finalidade. A seguir estão os principais tipos de portas e suas utilizações: Portas digitais: As portas digitais podem ser usadas para enviar ou receber sinais digitais, que têm apenas dois estados (ligado ou desligado). Cada porta digital pode ser configurada como entrada ou saída. Elas são utilizadas principalmente para controlar dispositivos digitais, como LEDs, relés, motores, botões e sensores. Portas analógicas: As portas analógicas permitem que o Arduino leia sinais analógicos, que podem ter um número infinito de valores entre zero e o máximo permitido. Isso é útil para medir coisas como temperatura, luz ou som. As placas Arduino mais simples têm apenas algumas portas analógicas, enquanto as mais avançadas podem ter várias. Portas PWM (Modulação por Largura de Pulso): As portas PWM são uma forma de simular uma saída analógica usando uma saída digital. Elas permitem que o Arduino controle a intensidade de um sinal digital pulsando rapidamente a saída. Isso é útil para controlar a velocidade de um motor, por exemplo, ou para criar efeitos de luz com LEDs. Portas de comunicação serial: As portas de comunicação serial permitem que o Arduino se comunique com outros dispositivos usando um protocolo de comunicação serial. Elas são usadas principalmente para se comunicar com o computador ou outros microcontroladores. Porta I2C: A porta I2C é uma forma de comunicação serial que permite que o Arduino se comunique com vários dispositivos diferentes usando apenas duas portas. Isso é útil para conectar vários sensores ou dispositivos ao Arduino sem precisar de muitas portas. Porta SPI: A porta SPI é outra forma de comunicação serial que é usada principalmente para se comunicar com dispositivos como displays LCD ou cartões de memória SD. Ela usa quatro portas para se comunicar com o dispositivo externo.MemóriaO Arduino “padrão” normalmente possui duas memórias: SRAM e memória Flash: A SRAM (Static Random-Access Memory) é usada para, por exemplo, armazenar o valor de uma variável (como o estado de um booleano). Quando desligada, essa memória é redefinida. A memória Flash é usada principalmente para armazenar o programa principal ou as instruções para o microcontrolador. Esta memória não é apagada ao desligar, de forma que as instruções para o microcontrolador sejam executadas assim que a placa for energizada. Quanta memória está disponível em um Arduino varia de placa para placa. Por exemplo, o Arduino UNO possui um flash de 32kB / 2kB SRAM, enquanto um Nano 33 IoT possui um flash de 256kB / 32kB SRAM. Você encontrará essas informações em cada uma das páginas de documentação do produto, que estão disponíveis em Arduino Hardware Documentation. Além da SRAM e memória Flash, muitas placas Arduino também possuem uma memória EEPROM (Electrically-Erasable Programmable Read-Only Memory), que pode ser usada para armazenar dados persistentes que precisam ser mantidos mesmo quando a placa é desligada, como configurações de calibração ou configurações de usuário. A quantidade de memória EEPROM também varia de placa para placa. Por exemplo, o Arduino UNO tem 1kB de memória EEPROM, enquanto o Arduino Mega tem 4kB.Usando o simuladorExistem várias opções de simuladores de Arduino disponíveis online, como o Tinkercad, o ArduinoSim e o Virtual Breadboard. Esses simuladores permitem que os usuários criem e testem projetos de Arduino sem a necessidade de possuir um hardware físico.Para usar o Tinkercad, por exemplo, siga estes passos: Acesse o site do Tinkercad e crie uma conta gratuita. Clique em “Circuits” na parte superior da tela e selecione “Create New Circuit”. Selecione “Arduino Uno” na lista de componentes disponíveis e arraste-o para a área de trabalho. Adicione outros componentes ao seu projeto, como LEDs, botões e sensores, arrastando-os da biblioteca para a área de trabalho. Conecte os componentes ao Arduino arrastando os fios da biblioteca e soltando-os nos pinos correspondentes. Programe o seu circuito clicando no ícone “Code” na parte superior da tela e digitando o código ou arrastando blocos de código da biblioteca de blocos disponíveis. Salve o seu projeto e clique no botão “Simulate” para testar o seu circuito. Com o simulador, você pode testar o seu código e ver como o seu circuito funciona sem precisar construir um protótipo físico. Isso pode economizar tempo e dinheiro na fase de prototipagem.Como programarPara programar o Arduino, você precisa seguir os seguintes passos: Baixe o software Arduino IDE em https://www.arduino.cc/en/software Conecte a placa Arduino ao seu computador com um cabo USB. Abra o software Arduino IDE e selecione o tipo de placa e porta serial na aba Ferramentas. Escreva o código que deseja programar na área de trabalho do Arduino IDE. Exemplos de código estão disponíveis na aba Arquivo &gt; Exemplos. Verifique o código para garantir que ele não contenha erros de sintaxe. Carregue o código na placa Arduino pressionando o botão “Carregar” ou “Upload” no software Arduino IDE. Após o processo de carregamento, o código será gravado na memória flash do microcontrolador da placa Arduino e será executado assim que a placa for ligada ou resetada. É importante lembrar que o código deve ser escrito em linguagem C/C++, com algumas funções e bibliotecas específicas do Arduino para acesso às portas de entrada/saída e outros recursos da placa. A documentação completa do software e hardware do Arduino pode ser encontrada em https://www.arduino.cc/en/Reference .Programando em blocos no simuladorPara programar o Arduino usando o PictoBlox no Tinkercad, siga as etapas abaixo: Abra o Tinkercad em seu navegador e crie um novo projeto. Adicione o Arduino ao seu projeto e conecte-o a um computador usando o cabo USB. Clique no botão “Code” (Código) na parte superior do menu. Selecione a opção “PictoBlox” na lista suspensa. O PictoBlox será aberto em uma nova guia. Clique em “Conectar” na parte superior da página para conectar o PictoBlox ao Tinkercad. Agora você pode começar a programar o Arduino usando blocos gráficos no PictoBlox. Arraste e solte os blocos na área de trabalho para criar seu código. Quando estiver satisfeito com o seu código, clique no botão “Carregar para Arduino” na parte superior do menu. O código será compilado e carregado no Arduino. Você pode verificar se o código está funcionando corretamente observando o comportamento do Arduino em seu projeto no Tinkercad. Lembre-se de que o PictoBlox é uma ferramenta poderosa para programar o Arduino usando blocos gráficos. Com ela, você pode criar projetos incríveis e aprender muito sobre programação e eletrônica.Programando com blocos na placaO Arduino IDE também suporta a programação visual com blocos, através da ferramenta “Blockly para Arduino”. Com ela, é possível criar programas para a placa Arduino sem a necessidade de escrever código em linguagem C/C++.Para programar com blocos no Arduino, siga os seguintes passos: Baixe e instale o software Arduino IDE em https://www.arduino.cc/en/software Abra o Arduino IDE e selecione o menu Arquivo &gt; Preferências. Na caixa de diálogo “Preferências”, cole o seguinte endereço na seção “URLs adicionais para Gerenciador de Placas”: https://arduino.github.io/arduino-board-index/package_esp8266com_index.json Abra a janela Gerenciador de Placas através do menu Ferramentas &gt; Placa &gt; Gerenciador de Placas. Procure por “ESP8266” e instale o pacote “ESP8266 Community”. Reinicie o Arduino IDE. Na janela principal do Arduino IDE, selecione o menu Arquivo &gt; Exemplos &gt; Blockly &gt; ESP8266 &gt; Blink. O código de exemplo será carregado na área de trabalho. Selecione o botão “Modo de Programação de Blocos” na parte inferior da janela para mudar para o modo de programação visual com blocos. Arraste e solte os blocos necessários para criar o programa desejado. Os blocos são organizados em categorias como “Lógica”, “Matemática”, “Portas” e “Variáveis”. Verifique se o programa está correto e carregue-o na placa Arduino pressionando o botão “Carregar” ou “Upload” no software Arduino IDE. É importante lembrar que a programação visual com blocos pode ter limitações em relação à programação em linguagem C/C++. Além disso, nem todas as placas Arduino são compatíveis com a ferramenta “Blockly para Arduino”. Verifique a documentação do produto para obter mais informações.Experiências práticasExistem muitas experiências práticas populares que podem ser feitas com o Arduino, desde projetos simples até projetos mais complexos e avançados. Algumas das experiências práticas mais populares feitas com o Arduino são: Controlar um LED: Essa é uma experiência simples que envolve conectar um LED a uma porta de saída digital do Arduino e usar o código para controlar o LED. É uma ótima maneira de começar a aprender sobre como o Arduino funciona. Sensor de temperatura: Usando um sensor de temperatura, é possível medir a temperatura ambiente e exibir os resultados em um display LCD ou por meio de LEDs. Controle de servo motor: Usando um servo motor, é possível construir um braço robótico simples ou outro dispositivo controlado por movimentos. Isso pode ser feito usando uma porta PWM do Arduino para controlar a posição do servo. Sistema de segurança doméstica: Usando sensores de movimento, um alarme e uma placa de relé, é possível construir um sistema de segurança doméstica que alerta os proprietários quando alguém entra em sua casa. Estação meteorológica: Usando sensores de temperatura, umidade e pressão atmosférica, é possível construir uma estação meteorológica que mede e exibe as condições climáticas. Sistema de irrigação automático: Usando sensores de umidade do solo e válvulas solenoides, é possível construir um sistema de irrigação automático para plantas. Sistema de monitoramento remoto: Usando sensores e um módulo de comunicação sem fio, é possível construir um sistema de monitoramento remoto que permite aos usuários monitorar e controlar dispositivos de qualquer lugar. Essas são apenas algumas das muitas experiências práticas que podem ser feitas com o Arduino. O limite é a sua imaginação e criatividade!Referências Arduino: Getting Started with Arduino Makerhero: O que é Arduino, para que serve e primeiros passos professora Keila: Experiências e Projetos Maker Tinkercad: Simulando uma porta AND no Arduino Brincando com ideias Eletrônica fácil" }, { "title": "Mercado de trabalho de TI", "url": "/aulas/posts/mercado-de-trabalho/", "categories": "AULAS, PROFISSÃO E FORMAÇÃO", "tags": "profissão, formação", "date": "2023-02-09 10:40:00 -0300", "snippet": "Conceitos básicos de mercado de trabalho. Introdução ao mercado de tecnologia da informação.Demanda de mercadoExiste uma alta demanda por profissionais do setor, e ao mesmo tempo, não existe gente ...", "content": "Conceitos básicos de mercado de trabalho. Introdução ao mercado de tecnologia da informação.Demanda de mercadoExiste uma alta demanda por profissionais do setor, e ao mesmo tempo, não existe gente qualificada o suficiente para suprir essa demanda.Isso faz com que a área seja valorizada cada vez mais, e como ela é indispensável para uma empresa que visa se modernizar e se manter, as empresas não têm deixado de investir tanto na formação de novos profissionais e na contratação de pessoas mais experientes.Devido à alta demanda por profissionais de TI, a área tem se tornado cada vez mais valorizada, e muitas empresas têm investido na formação e contratação de novos profissionais para suprir essa demanda. Além disso, a modernização e a manutenção das empresas dependem cada vez mais de tecnologia, o que torna a área de TI indispensável e estratégica para o sucesso dos negócios.Números do setor de TIDe acordo com dados do relatório Global Information Technology Report 2016 do Fórum Econômico Mundial, o setor brasileiro de Tecnologia da Informação já é o sétimo maior do mundo em termos de tamanho, ficando atrás apenas dos Estados Unidos, Japão, China, Reino Unido, Alemanha e França. O setor tem apresentado um crescimento significativo nos últimos anos e tem grande potencial de desenvolvimento no país. O setor brasileiro de Tecnologia da Informação já é o sétimo maior do mundo. Existe uma lacuna de 117.200 trabalhadores especializados; 90% dos alunos de graduação conseguem emprego antes de colar grau; 51% dos profissionais de TI ganham mais do que R$ 5.000 mensais; 84% das empresas acham que IA (Inteligência Artificial) é determinante para manter a competitividade; O investimento de big data em 2018 ultrapassou mais de 3 bilhões de reais no Brasil; Fontes: Canal Tech, Fast Help, Computer WorldInvestimentos de big dataDe acordo com um estudo da Associação Brasileira das Empresas de Software (ABES) e da IDC, divulgado em 2019, o mercado de big data e analytics no Brasil movimentou cerca de R$ 3,3 bilhões em 2018, representando um crescimento de 10,3% em relação ao ano anterior. Esse crescimento foi impulsionado pela demanda por soluções de análise de dados em diversos setores, como finanças, varejo, saúde e telecomunicações, entre outros.Profissões com maior demanda em TIExistem diversas profissões em TI com alta demanda no mercado de trabalho, algumas delas são: Desenvolvedor de software: responsável por criar, programar e testar softwares e aplicativos para diversos fins. Analista de sistemas: profissional responsável por analisar, projetar, documentar e especificar requisitos de sistemas de informação. Especialista em cibersegurança: profissional responsável por garantir a segurança dos sistemas e redes de computadores contra ataques e invasões. Engenheiro de dados: responsável por gerenciar, coletar, processar e analisar grandes volumes de dados em empresas. Arquiteto de soluções em nuvem: profissional responsável por planejar, projetar e implementar soluções em nuvem para empresas. Especialista em inteligência artificial e aprendizado de máquina: profissional responsável por desenvolver e implementar soluções de inteligência artificial em empresas. Especialista em automação de processos: profissional responsável por automatizar processos de negócios e tornar as empresas mais eficientes.Essas são apenas algumas das profissões em TI com alta demanda no mercado de trabalho. No entanto, é importante destacar que o mercado de TI é dinâmico e novas áreas de atuação podem surgir em decorrência da evolução tecnológica e da demanda do mercado.Novas profissões em TICom a constante evolução tecnológica, novas profissões têm surgido no mercado de TI. Algumas dessas profissões emergentes são: Especialista em cibersegurança em nuvem: com a crescente adoção de serviços em nuvem pelas empresas, surge a necessidade de profissionais especializados em segurança da informação para garantir a proteção dos dados armazenados na nuvem. Especialista em ética em IA: com a popularização da inteligência artificial, torna-se importante garantir que as decisões tomadas por algoritmos sejam éticas e justas. Profissionais especializados em ética em IA podem auxiliar na definição de diretrizes e regulamentações para o uso da tecnologia. Desenvolvedor de aplicativos para dispositivos móveis: com a crescente adoção de smartphones e tablets, há uma demanda cada vez maior por aplicativos móveis para diversas finalidades, como vendas, entretenimento e educação. Especialista em ciência de dados: com a grande quantidade de dados gerados pelas empresas, surge a necessidade de profissionais especializados em coletar, armazenar, processar e analisar esses dados para extrair insights e tomadas de decisão. Engenheiro de inteligência artificial: com a crescente adoção da inteligência artificial em diversos setores, torna-se necessário profissionais especializados em desenvolver soluções personalizadas para as necessidades de cada empresa.Essas são apenas algumas das novas profissões que estão surgindo no mercado de TI. É importante estar atento às tendências e às demandas do mercado para identificar as oportunidades e se capacitar para essas novas profissões.Investimento em capacitaçãoAtualmente é comum encontrar empresas de tecnologia que buscam profissionais autodidatas, capazes de aprender novas tecnologias de forma ágil e eficiente. Isso se deve ao fato de que o mercado de TI está em constante evolução, com novas tecnologias e linguagens surgindo a todo momento, o que exige dos profissionais da área uma constante atualização.Saber aprender por conta própria e de forma ágil é uma habilidade essencial para qualquer aspirante a profissional de TI, pois permite que ele se adapte rapidamente às mudanças do mercado e esteja sempre atualizado em relação às tecnologias mais recentes.No entanto, é importante destacar que a habilidade de aprender por conta própria deve ser complementada por uma formação sólida e pela participação em cursos, workshops e eventos da área, que permitem que o profissional aprimore seus conhecimentos e interaja com outros profissionais da área. Dessa forma, é possível construir uma carreira de sucesso em TI, aproveitando as oportunidades do mercado e contribuindo para a transformação digital das empresas.Formação em TIBuscar uma boa formação é essencial para ingressar e ter sucesso no mercado de TI. Algumas opções para buscar uma formação na área são: Graduação em TI: Uma graduação em Tecnologia da Informação pode ser uma boa opção para quem busca uma formação sólida na área. O curso oferece uma base ampla de conhecimentos e prepara o aluno para atuar em diversas áreas, como programação, banco de dados, redes, segurança da informação e outras. Cursos online: Existem diversas plataformas de ensino online que oferecem cursos de TI, muitos deles gratuitos ou com preços acessíveis. Esses cursos podem ser uma boa opção para quem deseja aprender uma tecnologia específica ou complementar seus conhecimentos em alguma área da TI. Bootcamps: Os bootcamps são cursos intensivos de curta duração que preparam os alunos para atuar em áreas específicas da TI, como desenvolvimento web, ciência de dados, segurança da informação, entre outras. Eles costumam ser bastante práticos e proporcionar uma imersão no mercado de trabalho. Certificações: As certificações em TI são reconhecidas pelo mercado e podem ajudar a comprovar os conhecimentos e habilidades do profissional. Existem diversas certificações para diferentes áreas da TI, como redes, segurança, programação, banco de dados, entre outras.Além disso, é importante participar de eventos da área, como conferências e meetups, e buscar oportunidades de estágio e trabalho para adquirir experiência prática na área. É fundamental estar sempre atualizado sobre as tendências e inovações do mercado de TI, e isso pode ser feito por meio de leitura de blogs e revistas especializadas, cursos de atualização e a participação em comunidades online de TI.Mais informaçõesGovernança de TI Introdução do Gerenciamento de Serviços de TI - SliderPayer" }, { "title": "Características principais da rede", "url": "/aulas/posts/caracteristicas-da-rede/", "categories": "AULAS, INFRAESTRUTURA DE REDES", "tags": "redes, planejamento, infraestrutura", "date": "2023-02-09 10:00:00 -0300", "snippet": "As redes de computadores se diferenciam em formas de transmissão, arquitetura, topologia e escopo de abrangência.Tipos de Transmissão de DadosPara que haja comunicação são necessários os seguintes ...", "content": "As redes de computadores se diferenciam em formas de transmissão, arquitetura, topologia e escopo de abrangência.Tipos de Transmissão de DadosPara que haja comunicação são necessários os seguintes elementos: Transmissor: é o dispositivo (computador, telefone, câmera) que envia a informação. Receptor: é o dispositivo a quem foi endereçada a informação. O receptor vai receber a mensagem enviada pelo transmissor. Mensagem: são os dados e as informações que precisam ser enviados. Meio: é o meio físico, ou seja, o caminho pelo qual a mensagem trafegará do transmissor até chegar ao receptor. Protocolo: controla o envio e recepção da mensagem e define alguns aspectos como formato da mensagem e ordem de chegada. Tanto o transmissor quanto o receptor devem estar seguindo o mesmo protocolo.Para que a comunicação de dados obtenha sucesso ela necessita de três atributos: Entrega: os dados devem estar endereçados corretamente. Deve-se ter a certeza de que a informação será entregue ao destinatário correto. Confiabilidade: os dados devem chegar ao destino, e mais do que simplesmente chegar, os dados devem estar intactos, sem nenhum tipo de alteração e sem faltar nenhuma parte da informação. Controle do Atraso: o tempo que a informação possui para chegar ao destino não pode ser indeterminado. Deve haver um tempo limite para que o destinatário a receba, principalmente no caso de aplicações multimídia em tempo real como áudio e vídeo. Não seria interessante, por exemplo, ao receber um vídeo, ver primeiro as imagens e só depois ouvir o áudio.Taxa de transmissãoAo se transmitir um arquivo, seja ele de que tipo for, pela rede, na realidade estão sendo transmitidos vários bits que, em conjunto, comporão o arquivo depois de processados. A taxa de transmissão de uma rede é a velocidade com a qual esses bits trafegam pelos meios de comunicação e é medida em bps (bits por segundo), ou seja, a quantidade de bits que são enviados em um segundo, portanto quanto maior a taxa de transmissão de uma rede, mais rápido o arquivo consegue ser transmitido do emissor para o receptor.Modos de operaçãoapostila de Meios de Comunicação da SeducExistem três tipos de operação na transmissão de dados: simplex, half-duplex e full-duplex. Vejamos como funciona cada uma delas: Simplex: a transmissão é unidirecional. Só existe um transmissor e um canal de transmissão. Quaisquer outros componentes que apareçam na comunicação serão receptores. Exemplos: televisão e radiodifusão. Half-duplex: a transmissão é bidirecional, ou seja, as duas partes transmitem e também são receptoras, mas, assim como no modo simplex, existe somente um canal de transmissão, portanto só é possível transmitir um por vez. Exemplo: walkie-talkie. Full-duplex: é o modo de transmissão mais completo, já que ambas as partes podem transmitir e receber dados simultaneamente, pois existem dois canais de transmissão. Exemplo: telefone.Arquitetura de redes de computadoresREDES PONTO-A-PONTOapostila de Meios de Comunicação da SeducExistem 2 tipos fundamentais de redes. O primeiro tipo é a rede ponto-a-ponto, onde os computadores são ligados entre si para a troca de informações, porém a maioria dos recursos não pode ser compartilhada fazendo com que cada host deva possuir os próprios recursos e aplicações como um programa, por exemplo. HOST: Palavra inglesa que significa hospedeiro.Em informática, um host é um computador ou outro equipamento conectado na rede e que pode compartilhar informações, serviços e recursos.REDES CLIENTE-SERVIDORapostila de Meios de Comunicação da SeducO segundo tipo é a arquitetura cliente-servidor, onde todos os hosts, chamados de clientes, se comunicam com uma máquina principal, chamada de servidor. O servidor provê todas as aplicações e serviços e consegue gerenciar o acesso aos recursos da rede como impressoras, por exemplo. Neste tipo de arquitetura os hosts não trocam informações entre si de uma forma direta.Cada cliente se comunica com o servidor e este devolve respostas atendendo as requisições de cada um. Por exemplo, em um servidor de banco de dados, o cliente pode acessar a aplicação (programa) e alterar um dado. Esta alteração será feita no servidor. Caso outro cliente acesse a aplicação, ele já verá o dado alterado, pois está buscando a informação diretamente no servidor.Normalmente um servidor é uma máquina mais robusta que as máquinas clientes, pois ela armazena e processa um grande número de informações, além de precisar estar sempre ligada para que haja tráfego de informações na rede.Topologia de redesA topologia de uma rede nada mais é do que a forma como se define o layout da rede, ou como se organiza estruturalmente os computadores, dispositivos de rede e suas conexões. Uma topologia pode física ou lógica.A topologia física é como os computadores e dispositivos se encontram fisicamente, configurando uma espécie de desenho que é caracterizado pela disposição dos equipamentos. A topologia lógica é a forma como os dados trafegam na rede, logo, uma rede pode obedecer a uma determinada topologia apenas de forma lógica, não sendo necessário que os equipamentos estejam organizados deacordo com a topologia física. Há varias formas de se estruturar uma rede, veja as principais:Escopo de abrangência de redesA abrangência de alcance das redes de caracterizam em: LAN – Rede Local interliga computadores presentes dentro de um mesmo espaço físico. MAN – Rede Metropolitana, abrangem bairros ou uma cidade. WAN – A Wide Area Network, ou Rede de Longa Distância, abrange um país ou até mesmo um continente. WLAN – Rede Local Sem Fio. WMAN – Rede Metropolitana Sem Fio, é a versão sem fio da MAN, com um alcance de dezenas de quilômetros. WWAN – Rede de Longa Distância Sem Fio, alcança diversas partes do mundo. Justamente por isso, a WWAN está mais sujeita a ruídos. SAN – Rede de Área de Armazenamento, são utilizadas para fazer a comunicação de um servidor e outros computadores. PAN – Rede de Área Pessoal, de curtas distâncias mais utilizadas por periféricos.Referência Apostila da disciplina de Redes de Computadores Panorama de tráfego de redes Brasileiro - RNP " }, { "title": "Prática no simulador Tinkercad", "url": "/aulas/posts/pratica-no-simulador/", "categories": "AULAS, NOÇÕES DE ROBÓTICA", "tags": "arduino, robótica, curso, programação", "date": "2023-02-07 10:40:00 -0300", "snippet": "A interface do simulador Tinkercad é organizada em várias áreas para facilitar a visualização e interação do usuário com os componentes e o código do projeto.Interface do Tinkercad Área de trabalh...", "content": "A interface do simulador Tinkercad é organizada em várias áreas para facilitar a visualização e interação do usuário com os componentes e o código do projeto.Interface do Tinkercad Área de trabalho: É a área principal da tela, onde são adicionados os componentes e criado o projeto. Nessa área, é possível posicionar os componentes, criar conexões entre eles e testar o funcionamento do projeto. Biblioteca de componentes: É a área onde são encontrados todos os componentes disponíveis para uso no projeto. A biblioteca é dividida em categorias, como “Eletrônica”, “Mecânica” e “Artesanato”, e permite buscar e filtrar os componentes por nome ou categoria. Propriedades do componente: É a área onde são exibidas as propriedades e configurações do componente selecionado na área de trabalho. Nessa área, é possível alterar as propriedades do componente, como nome, valor, cor e tamanho. Console serial: É a área onde são exibidas as mensagens enviadas pelo código do projeto para a porta serial do Arduino. Essa área é útil para depurar o código e verificar o funcionamento do projeto. Editor de código: É a área onde é editado o código do projeto. O editor de código possui recursos de sintaxe de destaque, auto-completar, e depuração do código. Nessa área, é possível escrever e editar o código do projeto em linguagem C++. Botões de controle: São os botões localizados na parte superior direita da tela, que permitem controlar a simulação do projeto. Os botões incluem “Start Simulation” (Iniciar Simulação), “Stop Simulation” (Parar Simulação), “Step Forward” (Avançar um Passo), “Step Backward” (Voltar um Passo) e “Reset” (Redefinir).Essa é uma descrição básica da interface do simulador Tinkercad. A ferramenta possui outras funcionalidades e recursos que podem variar de acordo com a versão e atualizações do software.Simular um sinal de trânsitoExemplo de prática utilizando o simulador Tinkercad é simular um sinal com LEDs, como um semáforo de trânsito. Para isso, podemos utilizar três LEDs, um para cada cor do semáforo: vermelho, amarelo e verde. O programa deve acionar os LEDs em sequência, de acordo com o tempo de cada fase do semáforo. Adicione três LEDs na placa do Arduino, conectando o anodo de cada LED nos pinos 13, 12 e 11, e o catodo de cada LED no GND. Abra o código do programa clicando no botão “Code” na parte inferior esquerda da tela. No campo “setup()”, defina os pinos dos LEDs como saída:void setup(){ pinMode(13, OUTPUT); // LED vermelho pinMode(12, OUTPUT); // LED amarelo pinMode(11, OUTPUT); // LED verde} No campo “loop()”, acione os LEDs em sequência, de acordo com o tempo de cada fase do semáforo. Por exemplo, podemos definir um tempo de 10 segundos para o sinal verde, 2 segundos para o amarelo e 8 segundos para o vermelho:void loop(){ digitalWrite(11, HIGH); // liga o LED verde delay(10000); // espera 10 segundos digitalWrite(11, LOW); // desliga o LED verde digitalWrite(12, HIGH); // liga o LED amarelo delay(2000); // espera 2 segundos digitalWrite(12, LOW); // desliga o LED amarelo digitalWrite(13, HIGH); // liga o LED vermelho delay(8000); // espera 8 segundos digitalWrite(13, LOW); // desliga o LED vermelho} Clique no botão “Start Simulation” na parte superior direita da tela para iniciar a simulação. Observe os LEDs acendendo e apagando em sequência, de acordo com o tempo de cada fase do semáforo.Este é um exemplo de como simular um sinal com LEDs utilizando o simulador Tinkercad. Com essa ferramenta é possível criar diversos projetos e experimentar diferentes configurações de componentes e programação.Referências Apostila de Robótica" }, { "title": "História da Robótica", "url": "/aulas/posts/historia-da-robotica/", "categories": "AULAS, NOÇÕES DE ROBÓTICA", "tags": "eletrônica, planejamento, robótica", "date": "2023-02-07 10:40:00 -0300", "snippet": "A robótica é uma área interdisciplinar que combina conhecimentos de engenharia mecânica, elétrica, computação e inteligência artificial para desenvolver máquinas capazes de executar tarefas com aut...", "content": "A robótica é uma área interdisciplinar que combina conhecimentos de engenharia mecânica, elétrica, computação e inteligência artificial para desenvolver máquinas capazes de executar tarefas com autonomia e precisão.DefiniçãoO termo “robô” foi introduzido pelo escritor checo Karel Čapek em sua peça de teatro “Rossum’s Universal Robots” em 1920. Desde então, o termo se popularizou e passou a ser utilizado para se referir a máquinas programáveis capazes de realizar tarefas sem a necessidade de intervenção humana.HistóricoA robótica surgiu no final da década de 1940, quando o cientista americano Isaac Asimov publicou sua série de histórias de ficção científica sobre robôs, estabelecendo as leis da robótica. Nos anos seguintes, o desenvolvimento de microprocessadores e tecnologias avançadas de computação permitiram a criação de robôs cada vez mais sofisticados e capazes.Hoje em dia, a robótica é utilizada em uma ampla variedade de setores, incluindo manufatura, agricultura, saúde, transporte, entre outros. Alguns robôs são projetados para realizar tarefas repetitivas e perigosas, enquanto outros são desenvolvidos para serem utilizados como assistentes pessoais ou para ajudar pessoas com necessidades especiais.Desde então, a robótica evoluiu rapidamente e se tornou cada vez mais sofisticada e versátil, possibilitando o desenvolvimento de robôs cada vez mais capazes e autônomos, com aplicações em uma ampla variedade de setores, incluindo manufatura, logística, saúde, entre outros. A robótica também tem potencial para revolucionar a forma como as pessoas trabalham e vivem, tornando possível a realização de tarefas antes consideradas impossíveis ou perigosas para seres humanos.No futuro, a robótica é capaz de avançar ainda mais, oferecendo soluções inovadoras para muitos desafios atuais e futuros. Isso inclui o uso de robôs autônomos em missões espaciais, ajuda em operações cirúrgicas, e até mesmo a criação de robôs com inteligência artificial avançada para realizar tarefas domésticas ou até mesmo auxiliar em cuidados de idosos ou pessoas com necessidades especiais.Primeiros robôsO Unimate, desenvolvido por George Devol, foi o primeiro robô industrial comercialmente bem-sucedido e foi instalado na linha de produção da General Motors em 1961. Este robô revolucionou a indústria automotiva e marcou o início da era da robótica industrial.O Elektro foi o primeiro robô humanoide criado e apresentado ao público em 1939 pela Westinghouse Electric Corporation. Embora ele não tenha sido projetado para fins práticos, o Elektro foi uma grande conquista tecnológica da época e ajudou a popularizar a ideia de robôs humanóides na cultura popular.Desde então, a robótica humanoide tem avançado rapidamente, e hoje existem robôs humanóides capazes de realizar tarefas cada vez mais complexas e humanas, como andar, falar, reconhecer rostos, entre outras. A robótica humanoide também tem um potencial incrível para revolucionar a forma como as pessoas vivem e trabalham, oferecendo soluções inovadoras para muitos desafios atuais e futuros.Leis da robóticaA evolução da robótica também pode trazer desafios, como a necessidade de se desenvolver novas leis e regulamentações para garantir a segurança das pessoas e a privacidade dos dados. Além disso, a automação pode ter impactos significativos na força de trabalho, com a possível substituição de empregos humanos por robôs.As “Leis da Robótica” são uma série de regras fictícias que foram criadas pelo escritor Isaac Asimov em 1942 para regulamentar a interação entre robôs e seres humanos em sua ficção científica. As três leis da robótica são:Um robô não pode causar dano a um ser humano, nem permitir, por inação, que um ser humano venha a sofrer dano.Um robô deve obedecer às ordens dadas por seres humanos, exceto quando tais ordens conflitarem com a Primeira Lei.Um robô deve proteger sua própria existência, desde que tal proteção não entre em conflito com a Primeira ou Segunda Lei.Estas leis foram concebidas como uma forma de abordar questões éticas e de segurança relacionadas ao desenvolvimento e uso de robôs, e são amplamente conhecidas e reconhecidas como uma referência na ficção científica. No entanto, é importante lembrar que as “Leis da Robótica” são fictícias e não há, atualmente, leis ou regulamentos equivalentes no mundo real. Embora a robótica esteja avançando rapidamente, ainda existe um longo caminho a percorrer para desenvolver e aplicar normas éticas e regulamentos para garantir que a robótica seja usada de forma responsável e segura.Componentes da robóticaHá uma grande diferença entre máquinas comuns e robôs. Para ser classificado como um robô, é necessário ser composto por três elementos básicos: sensores, software e manipuladores.SensoresSensores são dispositivos que permitem que o robô colete informações do ambiente, incluindo dados visuais, térmicos, acústicos e outros. Esses dados são usados para permitir que o robô tome decisões informadas e realiza suas tarefas de maneira eficiente.SoftwareO software é o sistema de controle que determina como o robô processa e interpreta as informações coletadas pelos sensores, e é responsável por fazer com que o robô realiza suas tarefas. O software é a “mente” do robô, e pode ser programado para realizar tarefas específicas ou ser equipado com inteligência artificial para permitir que ele aprenda e evolua.ManipuladoresManipuladores, por fim, são os “braços” e “pernas” do robô, responsáveis por sua capacidade de manipular objetos no ambiente. Eles podem ser projetados de diferentes maneiras, dependendo da tarefa que o robô está destinado a realizar, mas todos eles têm como objetivo permitir que o robô execute ações físicas.Juntos, esses três componentes permitem que o robô colete informações do ambiente, tome decisões informadas e execute tarefas específicas, tornando-o uma ferramenta poderosa e versátil para muitas aplicações diferentes.Automação vs robóticaA automação e a robótica são conceitos relacionados, mas distintos.A automação se refere ao uso de tecnologias para automatizar processos manuais ou repetitivos. Por exemplo, o uso de uma máquina para fazer uma tarefa que antes era realizada por um ser humano, como a fabricação de uma peça em uma linha de produção.Já a robótica é uma área da tecnologia que se concentra especificamente em desenvolver robôs, que são máquinas programadas para realizar tarefas específicas. A robótica é amplamente usada para automatizar processos, mas também inclui o desenvolvimento de robôs para aplicações médicas, militares, científicas e de entretenimento, entre outras.Em resumo, a automação é uma aplicação da tecnologia para tornar processos mais eficientes, enquanto a robótica é uma área específica da tecnologia que se concentra no desenvolvimento de robôs. Ambas podem ser usadas juntas para automatizar processos de maneira ainda mais eficiente.Olimpíada brasileira de robóticaOlimpíada Brasileira de Robótica (OBR)A Olimpíada Brasileira de Robótica (OBR) é um evento nacional de robótica que visa incentivar o estudo e o desenvolvimento de robôs por estudantes do ensino fundamental e médio, bem como fomentar a popularização da robótica no Brasil. A OBR oferece aos estudantes a oportunidade de desenvolver habilidades técnicas e criativas, trabalhar em equipe e aprender sobre robótica de uma forma lúdica e desafiadora.Os participantes são desafiados a construir robôs para realizar tarefas específicas, como percorrer um circuito, resolver labirintos ou jogar uma partida de futebol robótico, por exemplo. Além de competir, os estudantes também têm a chance de apresentar seus projetos e compartilhar suas ideias e conhecimentos com outros participantes e especialistas na área.A OBR é uma excelente oportunidade para os estudantes aprenderem sobre robótica, desenvolverem habilidades técnicas e criativas e fazerem novas amizades. Além disso, a participação na OBR pode ser um ótimo incentivo para seguir uma carreira na área de robótica ou em outras áreas relacionadas à tecnologia.Referências O que é Robótica: Conceito, História e evolução - Eletrogate Olimpíada brasileira de robótica - OBR" }, { "title": "Componentes principais de uma rede", "url": "/aulas/posts/componentes-de-redes/", "categories": "AULAS, INFRAESTRUTURA DE REDES", "tags": "redes, planejamento, infraestrutura", "date": "2023-02-07 09:00:00 -0300", "snippet": "Dispositivos e tecnologias que podem ser usados dependendo das necessidades específicas de uma rede de computadores.Equipamentos de redes Placa de rede: dispositivo de interface de conexão de rede...", "content": "Dispositivos e tecnologias que podem ser usados dependendo das necessidades específicas de uma rede de computadores.Equipamentos de redes Placa de rede: dispositivo de interface de conexão de rede para conectar o computador com a rede. Roteadores: responsáveis por encaminhar pacotes de dados entre redes e controlar o tráfego de rede. Switches: encaminham pacotes de dados entre dispositivos na mesma rede. Hubs: concentram e transmitem pacotes de dados para todos os dispositivos conectados na rede. Modems: permitem que as redes de computadores se conectem à internet ou a outras redes externas. Firewalls: protegem as redes de ameaças externas, como vírus e ataques de hackers. Bridges: conectam duas redes separadas e permitem que os dispositivos compartilhem informações. Access Points (APs): permitem que dispositivos sem fio se conectem à rede. Cabeamento: incluindo cabos de cobre e fibra óptica, é utilizado para conectar os dispositivos de rede entre si. Servidores: armazenam e gerenciam informações, arquivos e recursos compartilhados na rede.Placa de redeJupiterimages/Photos.com/Getty ImagesCada dispositivo em uma rede precisa ter uma interface de rede, que é responsável por fornecer a conexão física entre o dispositivo e a rede.A NIC (Network Interface Card), também conhecida como placa de interface de rede, é o componente que lida com a transmissão e recepção de dados na rede. Ela pode ser integrada à placa-mãe do computador ou ser uma placa separada que é instalada em uma slot de expansão dentro do computador. A NIC é responsável por codificar os dados em um formato que pode ser transmitido através da rede e também é responsável por decodificar os dados recebidos.Além disso, é importante destacar que existem duas formas de conectar dispositivos em uma rede: via cabo de rede ou através de uma rede sem fio. No caso de uma conexão via cabo, a NIC usa uma porta Ethernet para enviar e receber dados através de um cabo de rede. Já no caso de uma rede sem fio, a NIC usa uma placa de rede sem fio (também conhecida como placa Wi-Fi) para enviar e receber dados através do ar, sem a necessidade de cabos físicos.HubsFS community - media.fs.comOs hubs são dispositivos de rede simples que permitem a conexão de vários computadores em uma rede. Eles funcionam como um ponto central para onde todos os dados são enviados e, em seguida, replicados para todos os outros dispositivos conectados.Os hubs básicos funcionam no nível de camada física (camada 1) do modelo OSI, replicando todos os pacotes de dados recebidos para todas as portas conectadas. Cada dispositivo na rede (como uma placa de rede) precisa então determinar se a informação recebida é destinada a ele ou não, descartando os pacotes que não são relevantes.No entanto, é importante observar que os hubs básicos são limitados em sua capacidade de controlar o tráfego de rede e podem resultar em colisões de pacotes de dados, o que pode afetar negativamente a performance da rede. Por essa razão, hoje em dia, os switches são mais comumente usados em redes de computadores.SwitchesUnião Geek - uniaogeek.com.brOs switches são considerados dispositivos mais inteligentes do que os hubs, pois possuem a capacidade de realizar a comutação de pacotes de dados em vez de simplesmente replicá-los para todas as portas conectadas.Os switches criam tabelas de endereços MAC (Media Access Control) de todos os dispositivos conectados a cada porta, o que lhes permite entender qual computador está conectado a cada porta. Quando um pacote de dados é recebido por um switch, ele usa a informação da tabela para encaminhar o pacote apenas para a porta destinada ao dispositivo de destino, em vez de replicá-lo para todas as outras portas. Isso ajuda a reduzir a congestão da rede e melhora a performance geral da rede.De fato, as redes de 10 ou mais computadores tendem a ser mais complexas e requerem uma gestão mais eficiente do tráfego de rede. Por isso, é recomendável utilizar switches em vez de hubs em redes deste tamanho, a fim de garantir uma comunicação confiável e eficiente entre os dispositivos.RoteadoresIntelbrasProjeto de redes em projetoderedes.com.brOs roteadores são switches inteligentes. Além de ter as funções de um switch, que é encaminhar pacotes de dados entre dispositivos na mesma rede, os roteadores também têm a capacidade de conhecer e compreender o endereço IP dos dispositivos em diferentes redes e de encaminhar pacotes de dados entre elas. Eles realizam o roteamento de pacotes de dados baseado em informações como o endereço IP de destino, a máscara de sub-rede e as informações de roteamento armazenadas na tabela de roteamento.Em resumo, os roteadores são switches inteligentes que possuem a capacidade de se conectar a várias redes e de encaminhar pacotes de dados de forma eficiente e segura, garantindo a comunicação confiável entre dispositivos em diferentes redes.Referências União Geek - principais dispositivos de redes de computadores FS Community - Hub vs Switch vs Router Projeto de redes - roteadores Slide player - Hubs Slide player - Histórico de Hubs e Switches Slide player - Componentes de uma rede Apostila de Meios de Comunicação de Dados" }, { "title": "Planejamento de Carreira", "url": "/aulas/posts/planejamento-de-carreira/", "categories": "AULAS, PLANEJAMENTO DE CARREIRA", "tags": "planejamento, carreira", "date": "2023-02-06 10:00:00 -0300", "snippet": "Conceitos básicos de mercado de trabalho. Introdução ao mercado de tecnologia da informação. Explanações sobre níveis de formação acadêmica. Áreas de atuação em tecnologia da informação. Ambiente p...", "content": "Conceitos básicos de mercado de trabalho. Introdução ao mercado de tecnologia da informação. Explanações sobre níveis de formação acadêmica. Áreas de atuação em tecnologia da informação. Ambiente profissional, comunicação, ética profissional, networking e inserção no mercado de trabalho.Objetivo profissionalAdquirir competência permitindo situar-se em relação ao mercado trabalho de tecnologia da informação, levando em conta as precisões e participando das atividades propostas segundo o planejamento do módulo, as condições e critérios que seguem.Objetivos específicos Conhecer o mercado de trabalho na área de TI: tipos de empresas, perspectivas da profissão, remuneração, possibilidades de adiantamento e mutação, critérios e processos de seleção dos candidatos; Conhecer os níveis de formação acadêmica; Informar-se sobre os diversos cursos de nível superior na área de TI; Compreender a importância da certificação para os profissionais de TI; Conhecer as principais certificações de acordo com a área de atuação; Conhecer as áreas de atuação profissional em TI; Informar-se sobre a natureza e exigência da profissão; Levar o aluno a debater e refletir sobre os principais pilares da construção de uma carreira no contexto atual das organizações e a importância do seu papel (enquanto indivíduo) na elaboração do próprio projeto de carreira; Promover o autoconhecimento e desenvolvimento pessoal e profissional dos alunos; Auxiliar na identificação e escolha de uma área profissional compatível com suas aspirações, valores, personalidade, habilidades e interesses conjugados à realidade do mercado de trabalho; Planejar e preparar estratégias para inserção no mercado de trabalho; Elaborar um projeto de carreira individualOrganização curricular O Mundo do trabalho e introdução a empregabilidade O que é o Mercado de Trabalho (conceito e exigências); Trabalho x Emprego; Profissão x Carreira. Níveis de formação Médio/técnico; Nível superior; Tecnólogos; Bacharelados; Licenciaturas; Certificações. Mercado de tecnologia da informação e comunicação O mercado de T.I.; Áreas de atuação em T.I. Designer Gráfico (criação de artes e vídeos para redes sociais); Computação Gráfica; Desenvolvimento de Games; Assistência Técnica em Informática(notebook, computadores e impressoras); Projetista de Rede (projeto e cabeamento estruturado); Administração de Redes (servidores e suporte técnico); Provedores (configuração e gestão, técnico de instalação/suporte); Segurança da Informação; Desenvolvimento Web Full-Stack; Desenvolvimento Desktop; Desenvolvimento Mobile; Análise de Sistemas; Ciência de Dados (machine learning). Perfil profissional em T.I. Autoconhecimento; Diferencial do profissional de TI; Perfil profissional requisitado pelas empresas de TI; Descobrindo e aprimorando o perfil profissional; Ferramentas de produtividade: Técnica Kanban; Ferramenta Trello; Método PDCA. Desenvolvendo perfil profissional de acordo com a área escolhida. O ambiente profissional Postura profissional; Networking; Ética profissional; A comunicação e seus componentes. Ingressando no mercado de trabalho Criando currículo, carta de apresentação e recomendação; LinkedIn; GitHub Entrevista de emprego; Estágio supervisionado; Jovem Aprendiz; Concurso público e seleção pública; Vivências profissionais. BibliografiaO Mercado de trabalho brasileiro. Just Landed,2022. Disponível em: https://www.justlanded.com/portugues/Brasil/Guia-Brasil/Empregos/Introducao/. Acesso em: 20 de jun. de 2018.SILVA, André Koide da. Projeto de redes de computadores: abordagem top-down-Revista Infra Magazine 8. DevMedia, 2022. Disponível em: https://www.devmedia.com.br/projeto-de-redes-de-computadores-abordagem-top-down-revista-infra-magazine-8/26300/. Acesso em: 20 de jan. de 2022" }, { "title": "Topologia e arquitetura de redes", "url": "/aulas/posts/topologia-e-arquitetura-de-redes/", "categories": "AULAS, INFRAESTRUTURA DE REDES", "tags": "redes, infraestrutura", "date": "2023-02-06 09:00:00 -0300", "snippet": "As redes de computadores se diferenciam em formas de transmissão, arquitetura, topologia e escopo de abrangência.Objetivo profissionalAdquirir competência permitindo situar-se em relação ao mercado...", "content": "As redes de computadores se diferenciam em formas de transmissão, arquitetura, topologia e escopo de abrangência.Objetivo profissionalAdquirir competência permitindo situar-se em relação ao mercado trabalho de tecnologia da informação, levando em conta as precisões e participando das atividades propostas segundo o planejamento do módulo, as condições e critérios que seguem.Objetivos específicos Entender/compreender os conceitos fundamentais de infraestrutura de redes, entendendo suas principais diferenças de utilização e implementação em redes locais com segurança. Entender/compreender os conceitos básicos sobre infraestrutura de redes Conceituação Topologias Componentes principais de uma rede Topologia de redesA topologia de uma rede nada mais é do que a forma como se define o layout da rede, ou como se organiza estruturalmente os computadores, dispositivos de rede e suas conexões. Uma topologia pode física ou lógica.A topologia física é como os computadores e dispositivos se encontram fisicamente, configurando uma espécie de desenho que é caracterizado pela disposição dos equipamentos. A topologia lógica é a forma como os dados trafegam na rede, logo, uma rede pode obedecer a uma determinada topologia apenas de forma lógica, não sendo necessário que os equipamentos estejam organizados de acordo com a topologia física. Há varias formas de se estruturar uma rede, veja as principais:Arquitetura de redes de computadoresREDES PONTO-A-PONTOExistem 2 tipos fundamentais de redes. O primeiro tipo é a rede ponto-a-ponto, onde os computadores são ligados entre si para a troca de informações, porém a maioria dos recursos não pode ser compartilhada fazendo com que cada host deva possuir os próprios recursos e aplicações como um programa, por exemplo. HOST: Palavra inglesa que significa hospedeiro.Em informática, um host é um computador ou outro equipamento conectado na rede e que pode compartilhar informações, serviços e recursos.REDES CLIENTE-SERVIDORO segundo tipo é a arquitetura cliente-servidor, onde todos os hosts, chamados de clientes, se comunicam com uma máquina principal, chamada de servidor. O servidor provê todas as aplicações e serviços e consegue gerenciar o acesso aos recursos da rede como impressoras, por exemplo. Neste tipo de arquitetura os hosts não trocam informações entre si de uma forma direta.Cada cliente se comunica com o servidor e este devolve respostas atendendo as requisições de cada um. Por exemplo, em um servidor de banco de dados, o cliente pode acessar a aplicação (programa) e alterar um dado. Esta alteração será feita no servidor. Caso outro cliente acesse a aplicação, ele já verá o dado alterado, pois está buscando a informação diretamente no servidor. Normalmente um servidor é uma máquina mais robusta que as máquinas clientes, pois ela armazena e processa um grande número de informações, além de precisar estar sempre ligada para que haja tráfego de informações na rede.Referências Tipos de redes Apostila do Curso de Redes de Computadores Apostila de Meios de Comunicação de Dados" }, { "title": "Noções de Robótica", "url": "/aulas/posts/nocoes-de-robotica/", "categories": "AULAS, NOÇÕES DE ROBÓTICA", "tags": "eletrônica, planejamento, robótica", "date": "2023-02-06 09:00:00 -0300", "snippet": "conhecimentos de conceitos eletrônicos e o uso de sensores e atuadores que juntos podem realizar ações automatizadas levando ao conhecimento da programação com uso do simulador online TINKERCAD, fe...", "content": "conhecimentos de conceitos eletrônicos e o uso de sensores e atuadores que juntos podem realizar ações automatizadas levando ao conhecimento da programação com uso do simulador online TINKERCAD, ferramenta essa que possibilita a utilização de componentes eletrônicos, sensores e linha de código com ferramentas de testes.Objetivo profissionalAdquirir competência permitindo situar-se em relação ao mercado trabalho de tecnologia da informação, levando em conta as precisões e participando das atividades propostas segundo o planejamento do módulo, as condições e critérios que seguem.Objetivos específicos Promover um ambiente de aprendizagem colaborativa onde os alunos poderão desenvolver projetos através da noção da robótica usando a eletrônicos baseados em uma plataforma open source e online de hardware e software simples; Desenvolver o conhecimento básico sobre eletrônica (básica e digital); Estudar as placas Arduíno, seu funcionamento e formas de comunicação; Estudar a programação em linguagem C++ para Arduino;Organização curricular Introdução a Robótica História da Robótica Conceito - Leis da Robótica Arduino na Robótica Introdução ao Arduíno. Breve história; Site oficial, Fórum, Download e instalação; Documentação da biblioteca padrão; Placa Arduino O que é arduino? Tipos de Arduinos. Aplicações de Projetos com arduino. Arquitetura do arduino (Estrutura) Ambiente IDE Arduino Site oficial do arduino Apresentação do simulador Linguagem do Arduino (C++) Linguagem de Programação Tipos de dados; Sintaxe básica; Controle de fluxo; Funções da biblioteca padrão; Principais bibliotecas Funcionamento da linguagem de programação C++ Estrutura - Sketch Setup Loop Variáveis Variáveis numéricas Variáveis não numéricas Declarações de variáveis Entrada e saída de dados Operações Estrutura de condição Estrutura de repetição Funções Bibliotecas Conceito de Eletrônica Básica e Componentes Conceitos Básicos de Eletrônica Protoboard; Mantendo o padrão de cores dos fios; Resistência com o código de cores; Multímetro; Resistência, Tensão e Corrente; Matriz de Linha - Protoboard Corrente, Tensão e Resistência Componentes Eletrônicos Resistores Diodos Leds Botões Potenciômetros Led RGB LDR Buzzer Servo Motor Sensor Ultrasonico Eletrônica Digital Entradas e Saídas Digitais; Saídas digitais do Arduino; Utilizando PWM para controlar cores do LED; Lógica Digital; Fundamentos básicos de eletrônica e lógica digital; Operações básicas; Funções lógicas; Projeto - Leds Como funciona o LED - Aula prática Atividade (Perguntas). Desafio Prático - Semáforo Simples Projeto Resistores Função do Resistor Divisão de Tensão Calcular e Reconhecer o Resistor Atividades (Perguntas) Botão Ligar o led com o botão pull up ou down Desafio prático - Interruptor Eletrônica Analógica Introdução; Os conversores analógico-digitais do Arduino; Lendo dados de sensores; Potenciômetro; Luminosidade; Temperatura; Controle de motores; Motores DC; Controlando a velocidade de motores DC com PWM; Potenciômetro Entrada analógica Monitor Serial Led RGB Oscilação de cores Usando saída PWM Controle com potenciômetro Desafio prático - Semáforo Simples com RGB LDR Usando o led Exercício prático - Simulação do Poste de iluminação Buzzer Frequência de som digital Sinal de Alerta Usando botões Desafio prático - Piano musical Servo Motor - Sensor de Ré Usando Botão Usando potenciômetro Usando LDR Desafio prático - Cancela de estacionamento Sensor Ultrassônico Uso do Sensor ultrassônico Uso de led Uso de Buzzer Desafio prático - Sensor de Ré Projeto final 01 - Semáforo Completo Carros Pedestre Sinal de Acessibilidade Temporizador Cancela Travessia de Trem Projeto final 02 - Automação Residencial Alarme Luzes automatizadas Portas com sensores Portões automatizados Referência BibliográficaARDUINO - http://www.arduino.cc/. Disponível em: Acesso em: 09 Setembro de 2022ARDUINO - TEACHING, INSPIRING AND EMPOWERING! - http://www.arduino.cc/ Disponível em: Acesso em: 10 Setembro de 2022.BANZI, Massimo. Primeiros passos com o Arduino. São Paulo: Novatec, p. p1, 2011.BONATTO, a. et al. Interdisciplinaridade no ambiente escolar. In: IX SEMINÁRIO DE PESQUISA EM EDUCAÇÃO DA REGIÃO SUL. Caxias do Sul (RS): Universidade de Caxias do Sul. Anais. 2012.CASTRO, M. Aplicação de arquitetura pedagógica em curso de robótica educacional com hardware livre, 2011. 158p, il. Dissertação (Mestrado). Núcleo de Computação Eletrônica da Universidade Federal do Rio de Janeiro (UFRJ), Rio de Janeiro (RJ).MORAN, J. Educação inovadora presencial e a distância. Disponível em: . Acesso em 11 de junho de 2016. SILVA, T. Como fazer um Robot? Arduino Portugal, 2015.DE RODRIGUES, Rafael Frank; CUNHA, Silvio Luiz Souza. Arduino para físicos. 2015.MCROBERTS, Michael. Arduino Básico. Tradução Rafael Zanolli. São Paulo: Editora Novatec, 2011MONK, Simon. 30 PROJETOS COM ARDUINO, tradução: Anatólio Laschuk 2ª edição, Editora Bookman, Porto Alegre 2014." }, { "title": "Profissão e Formação", "url": "/aulas/posts/profissao-e-formacao/", "categories": "AULAS, PROFISSÃO E FORMAÇÃO", "tags": "profissão, planejamento, formação", "date": "2023-02-02 10:40:00 -0300", "snippet": "Conceitos básicos de mercado de trabalho. Introdução ao mercado de tecnologia da informação. Explanações sobre níveis de formação acadêmica. Áreas de atuação em tecnologia da informação. Ambiente p...", "content": "Conceitos básicos de mercado de trabalho. Introdução ao mercado de tecnologia da informação. Explanações sobre níveis de formação acadêmica. Áreas de atuação em tecnologia da informação. Ambiente profissional, comunicação, ética profissional, networking e inserção no mercado de trabalho.Objetivo profissionalAdquirir competência permitindo situar-se em relação ao mercado trabalho de tecnologia da informação, levando em conta as precisões e participando das atividades propostas segundo o planejamento do módulo, as condições e critérios que seguem.Objetivos específicos Conhecer o mercado de trabalho na área de TI: tipos de empresas, perspectivas da profissão, remuneração, possibilidades de adiantamento e mutação, critérios e processos de seleção dos candidatos; Conhecer os níveis de formação acadêmica; Informar-se sobre os diversos cursos de nível superior na área de TI; Compreender a importância da certificação para os profissionais de TI; Conhecer as principais certificações de acordo com a área de atuação; Conhecer as áreas de atuação profissional em TI; Informar-se sobre a natureza e exigência da profissão; Levar o aluno a debater e refletir sobre os principais pilares da construção de uma carreira no contexto atual das organizações e a importância do seu papel (enquanto indivíduo) na elaboração do próprio projeto de carreira; Promover o autoconhecimento e desenvolvimento pessoal e profissional dos alunos; Auxiliar na identificação e escolha de uma área profissional compatível com suas aspirações, valores, personalidade, habilidades e interesses conjugados à realidade do mercado de trabalho; Planejar e preparar estratégias para inserção no mercado de trabalho; Elaborar um projeto de carreira individualOrganização curricular O Mundo do trabalho e introdução a empregabilidade O que é o Mercado de Trabalho (conceito e exigências); Trabalho x Emprego; Profissão x Carreira. Níveis de formação Médio/técnico; Nível superior; Tecnólogos; Bacharelados; Licenciaturas; Certificações. Mercado de tecnologia da informação e comunicação O mercado de T.I.; Áreas de atuação em T.I. Designer Gráfico (criação de artes e vídeos para redes sociais); Computação Gráfica; Desenvolvimento de Games; Assistência Técnica em Informática(notebook, computadores e impressoras); Projetista de Rede (projeto e cabeamento estruturado); Administração de Redes (servidores e suporte técnico); Provedores (configuração e gestão, técnico de instalação/suporte); Segurança da Informação; Desenvolvimento Web Full-Stack; Desenvolvimento Desktop; Desenvolvimento Mobile; Análise de Sistemas; Ciência de Dados (machine learning). Perfil profissional em T.I. Autoconhecimento; Diferencial do profissional de TI; Perfil profissional requisitado pelas empresas de TI; Descobrindo e aprimorando o perfil profissional; Ferramentas de produtividade: Técnica Kanban; Ferramenta Trello; Método PDCA. Desenvolvendo perfil profissional de acordo com a área escolhida. O ambiente profissional Postura profissional; Networking; Ética profissional; A comunicação e seus componentes. Ingressando no mercado de trabalho Criando currículo, carta de apresentação e recomendação; LinkedIn; GitHub Entrevista de emprego; Estágio supervisionado; Jovem Aprendiz; Concurso público e seleção pública; Vivências profissionais. BibliografiaO Mercado de trabalho brasileiro. Just Landed,2022. Disponível em: https://www.justlanded.com/portugues/Brasil/Guia-Brasil/Empregos/Introducao/. Acesso em: 20 de jun. de 2018.SILVA, André Koide da. Projeto de redes de computadores: abordagem top-down-Revista Infra Magazine 8. DevMedia, 2022. Disponível em: https://www.devmedia.com.br/projeto-de-redes-de-computadores-abordagem-top-down-revista-infra-magazine-8/26300/. Acesso em: 20 de jan. de 2022" }, { "title": "Infraestrutura de redes", "url": "/aulas/posts/infraestrutura-de-redes/", "categories": "AULAS, INFRAESTRUTURA DE REDES", "tags": "redes, planejamento, infraestrutura", "date": "2023-02-02 10:00:00 -0300", "snippet": "Implementação de redes locais; Introdução à segurança de infraestruturas de redes de computadores; Introdução à comunicação de dados; Modelo OSI/ISO; Arquitetura IEEE 802; Arquitetura TCP/IP; Meios...", "content": "Implementação de redes locais; Introdução à segurança de infraestruturas de redes de computadores; Introdução à comunicação de dados; Modelo OSI/ISO; Arquitetura IEEE 802; Arquitetura TCP/IP; Meios físicos e tecnologias de transmissão; Cabeamento estruturado; Rack; Firewall; Acesso remoto; Criptografia; LGPD.Objetivo profissionalAdquirir competência permitindo situar-se em relação ao mercado trabalho de tecnologia da informação, levando em conta as precisões e participando das atividades propostas segundo o planejamento do módulo, as condições e critérios que seguem. Objetivos: Entender/compreender os conceitos fundamentais de infraestrutura de redes, entendendo suas principais diferenças de utilização e implementação em redes locais com segurança. Entender/compreender os conceitos básicos sobre infraestrutura de redes Conhecer os recursos utilizados no projeto físico de uma rede Conhecer normas de padronização de cabeamento estruturado Conhecer tecnologias de redes sem fios Conhecer princípios de Administração e Gerência de Redes de computadores Implementar na prática uma pequena Rede de Computadores Organização curricular: Conceitos básicos em redes de computadores Conceituação Topologias Componentes principais de uma rede Introdução à comunicação de dados Arquiteturas de redes de computadores Modelo OSI/ISO Arquitetura IEEE 802 Arquitetura TCP/IP Meios físicos e tecnologias de transmissão Tipos de conectores Interfaces de redes Meios físicos cabeados Padronização do cabeamento estruturado Elementos do projeto de cabeamento estruturado Tecnologias de redes sem fio Tecnologias alternativas de meios físicos Ferramentas para confecção e certificação de cabos de par trançado Alicate de crimpagem Testador de cabos Implementação de redes locais Construção de uma rede ponto a ponto Construção de uma rede com Hub/Switch/Roteador Uso de ferramentas básicas para coleta de estatísticas de rede, ping e traceroute Introdução à segurança de redes de computadores Patch Cord Patch Panel Rack Armazenamento de Dados / Backup Suporte Nível 1, 2 e 3 Firewall Criptografia de Disco Rígidos / SSDs Balanceamento de Cargas Acesso Remoto Lei Geral de Proteção de Dados Bibliografia: SOUSA, Lindeberg Barros de. Redes de computadores - dados, voz e imagem. Érica. ROSS, Keith; KUROSE, James. Redes de Computadores e a Internet - uma nova abordagem top-down. Addison Wesley. LACERDA, Ivan Max Freire de. Cabeamento estruturado - Projeto, Implantação e Certificação. Natal, 2002. (Livro-texto) Catálogo de produtos da Furukawa. Disponível em &lt;http://www.furukawa.com.br&gt; Catálogo de produtos da Pial. Disponível em www.pial.com.br VASCONCELOS, Laércio. Como montar e configurar sua rede de PCs - Rápido e fácil, MAKRON Books. DANTAS, Mario. Tecnologias de redes de comunicação e computadores, AXCEL Books. DERFLER, Frank. Tudo sobre cabeamento de redes. Editora Campus. 1993. PINHEIRO, José Maurício. Guia Completo de Cabeamento de Redes. Editora Campus, 2003. TORRES, Gabriel. Redes de Computadores, Ed. Axcel Books. ANDERSON, Al e BENEDETTI, Ryan. Use a cabeça! Redes de Computadores. Alta Books, 2010 MENDES, Douglas Rocha. Redes de computadores - teoria e prática. Novatec. 2007. " }, { "title": "Animações", "url": "/aulas/posts/animacoes/", "categories": "AULAS, EDITOR GRÁFICO", "tags": "Senac, animações, vídeos", "date": "2023-01-09 13:00:00 -0300", "snippet": "Para criar animações interativas para jogos, programas de TV e a Web, como desenhos animados e anúncios de banner, além de conteúdo de e-learning e infográficos dinâmicos.AnimateUm exemplo de progr...", "content": "Para criar animações interativas para jogos, programas de TV e a Web, como desenhos animados e anúncios de banner, além de conteúdo de e-learning e infográficos dinâmicos.AnimateUm exemplo de programa editor é o Animate Adobe Animate.AtividadeCriar animações básicas 2D utilizando os tutoriais da Adobe.AftereffectsOutro programa do pacote de Design profissional da Adobe é o Aftereffects, com ele podemos fazer imagens girar e títulos rodopiar, e criar efeitos visuais que dão vida à ideia de vídeo.Google WebdesignerUma ferrramenta de animações online muito poderosa é o Google Webdsigner, inicialmente criada com a proposta de criar banners para marketing mas que possui muitos recursos de animação para tornar tornar páginas mais cheias de efeitos visuais.Referências Aplicativos de animação Tutoriais do Animate Auterntivas ao Aftereffects Tutoriais Aftereffects" }, { "title": "Estilos de Web Designer", "url": "/aulas/posts/estilos-web/", "categories": "AULAS, WEB DESIGNER", "tags": "Senac, estilos, css", "date": "2022-12-15 18:00:00 -0300", "snippet": "CSS W3C - CSS Referência Guia Mozila CSSBoothStrapO Bootstrap não é um código, é um framework que utiliza as linguagens HTML, CSS e JS. Ele foi desenvolvido pela empresa Twitter e foi mais um div...", "content": "CSS W3C - CSS Referência Guia Mozila CSSBoothStrapO Bootstrap não é um código, é um framework que utiliza as linguagens HTML, CSS e JS. Ele foi desenvolvido pela empresa Twitter e foi mais um divisor de águas no desenvolvimento web: enquanto o HTML5 surgiu para padronizar a estrutura e tornar o código semântico, o Bootstrap surgiu para padronizar o layout, proporcionando um conjunto de regras de formatação que são aplicadas usando uma simples classe, além de facilitar a aplicação de recursos de interatividade que exigiriam um esforço maior dos webdesigners.Santiago, JeffersonWeb Standards cap 5 W3schools - Alternativa para o bootstrapExemplos DevSuperior - exemplos de nivelamento HTML e CSS Exemplo de site de curriculo com HTML e CSS Workshop de site de curriculo no GitHub Link do github do site do curriculo Visualização do site do curriculo Exemplo com BootStrap do livro WebStandards cap. 5 Visualização do exemplo acimaFlexbox Guia do Flexbox" }, { "title": "HTML5", "url": "/aulas/posts/html5/", "categories": "AULAS, WEB DESIGNER", "tags": "Senac, html, estilos", "date": "2022-12-12 12:00:00 -0300", "snippet": "HTML é o Hipertexto, são conjuntos de elemento em uma linguagem para publicação de conteúdo, como texto, imagem, vídeo e áudio na Web.Objetivo O HTML - define a estrutura, o CSS - os estilos, o...", "content": "HTML é o Hipertexto, são conjuntos de elemento em uma linguagem para publicação de conteúdo, como texto, imagem, vídeo e áudio na Web.Objetivo O HTML - define a estrutura, o CSS - os estilos, o JavaScript - os comportamentos.Histórico 1990 - Marc Andreessen desenvolveu o o Mosaic - browser; Tim Berners-Lee desenvolveu o HTML para organizar o conteúdo em páginas. Entre 1993 e 1995 - versões HTML+, HTML2.0 e HTML3.0 com diversas mudanças para enriquecer as possibilidades da linguagem; 1997 - o grupo de trabalho do W3 responsável por manter o padrão do código 1; 2004 - desenvolvedores de empresas como Mozilla, Apple e Opera que formaram o grupo WHATWG 2 para desenvolver o HTML5 e o Web Controls 1.0; 2006 - passou a ser reconhecido como W3C que trabalhou no HTML5 e no XHTML 2. 2009 - descontinuação do XHTML 2 em favor do HTML5.Roteiro Introdução a linguagem de marcação HTML Um pouco sobre internet e a Web História do HTML A Linguagem HTML O que é e como funciona a linguagem HTML Estrutura do documento HTML Semântica, TAGs e atributos Cabeçalho, Parágrafos e quebras de linha Cabeçalho Parágrafos Quebra de linha Linhas horizontais Formatação de Texto Negrito, itálico, sublinhado e tachado Texto pré - formatado Símbolos especiais Imagem O marcador IMG Atributos Listas Ordenadas Não Ordenadas De Definição Links URL Âncora Navegação Download Agrupamentos de elementos Agrupamento/destaque em linha (span) Agrupamento de elementos (div) Tabelas e suas importância 1. O que são, sua importância e seu uso 2. Table 3. Linha e Coluna Formulários 1. O que são, para que serve e exemplos 2. Form 3. Entrada de dados 4. Atributos únicos e comuns entre tags 5. Seleções 6. Caixas de Marcação 7. Botões Linguagem de marcação HTML5 Diferença entre HTML e HTML5 Versões e Principais Diferenças - Evoluções 1 Vantagens da Linguagem HTML Introdução ao HTML5 e Semântica Importância das TAGS e de sua Web Semântica Header Nav Main Aside Article Section Footer Novos Elementos para Formatação de Texto HTML5 Importante Destaque Menor Marcado Excluído Inserido subscrito e sobrescrito Estruturação de tabelas HTML5 Cabeçalho, corpo e rodapé Atributos e Acessibilidade Colunas de grupo Conteúdo HTML5 Áudio Vídeo Figuras Novos tipos de campos HTML5 Campo Email Campos Search Campo Number Campo Tel Campos URL Campo File Campos de data, hora, mês Estrutura básica&lt;!DOCTYPE html&gt;&lt;html lang=\"pt-br\"&gt;&lt;meta charset=\"UTF-8\"&gt;&lt;title&gt;Page Title&lt;/title&gt;&lt;meta name=\"viewport\" content=\"width=device-width,initial-scale=1\"&gt;&lt;link rel=\"stylesheet\" href=\"\"&gt;&lt;style&gt;&lt;/style&gt;&lt;script src=\"\"&gt;&lt;/script&gt;&lt;body&gt;&lt;img src=\"img_la.jpg\" alt=\"LA\" style=\"width:100%\"&gt;&lt;div class=\"\"&gt; &lt;h1&gt;This is a Heading&lt;/h1&gt; &lt;p&gt;This is a paragraph.&lt;/p&gt; &lt;p&gt;This is another paragraph.&lt;/p&gt;&lt;/div&gt;&lt;/body&gt;&lt;/html&gt;Esqueleto HTMLElementosOs elementos que compões as páginas HTML seguem regras de definição de linha ou bloco.Elementos de linhaMarcam principalmente elementos de texto, por exemplo: a, strong, em, img, input, abbr, span. Os elementos de linha podem conter outros elementos de linha, dependendo da categoria que ele se encontra. Por exemplo: o elemento a não pode conter o elemento label; Os elementos de linha nunca podem conter elementos de bloco.Elementos de blocoOs elementos de blocos são como caixas, que dividem o conteúdo nas seções do layout. Elementos de bloco sempre podem conter elementos de linha. Elementos de bloco podem conter elementos de bloco, dependendo da categoria que ele se encontra. Por exemplo, um parágrafo não pode conter um DIV. Mas o contrário é possível.Categorias de ElementosEstes dois grandes grupos podem ser divididos em categorias. Estas categorias dizem qual modelo de conteúdo o elemento trabalha e como pode ser seu comportamento.MetadataOs metadados em HTML 5 são especificados dentro da tag &lt;head&gt; do documento HTML e geralmente incluem informações sobre o título da página, descrição, autor, palavras-chave e codificação do documento. Os metadados podem ser definidos usando as tags &lt;title&gt;, &lt;meta&gt;, &lt;link&gt;, &lt;style&gt; e &lt;script&gt;, entre outras. Por exemplo, a tag &lt;meta&gt; pode ser usada para especificar a descrição da página, como no seguinte exemplo:&lt;head&gt; &lt;title&gt;Exemplo de página&lt;/title&gt; &lt;meta name=\"description\" content=\"Esta é uma página de exemplo para demonstrar metadados em HTML 5.\"&gt;&lt;/head&gt; identificam o documento e seu conteúdo, formado por: base command link meta noscript script style title FlowOs elementos de fluxo em HTML 5 são elementos que definem o conteúdo principal de uma página e que são renderizados em ordem sequencial. Alguns exemplos de elementos de fluxo incluem: &lt;p&gt;: define um parágrafo de texto &lt;h1&gt;, &lt;h2&gt;, &lt;h3&gt;, &lt;h4&gt;, &lt;h5&gt;, &lt;h6&gt;: definem os títulos de seção, em ordem decrescente de importância &lt;ul&gt; e &lt;ol&gt;: definem listas não-ordenadas e ordenadas, respectivamente &lt;li&gt;: define um item de lista em &lt;ul&gt; ou &lt;ol&gt; &lt;div&gt;: define uma seção genérica de conteúdo &lt;span&gt;: define uma pequena seção de conteúdo, geralmente dentro de um parágrafo ou outra tag de texto &lt;a&gt;: define um link para outra página ou recurso &lt;img&gt;: define uma imagem para ser exibida na páginaEsses elementos são chamados de “elementos de fluxo” porque eles são renderizados como uma sequência de blocos em linha. Outros elementos, como &lt;header&gt;, &lt;footer&gt;, &lt;aside&gt;, &lt;nav&gt; e &lt;section&gt;, são considerados “elementos de seção” e podem conter outros elementos de fluxo e de seção. elementos de fluxo utilizado no body: a abbr address area (se for um decendente de um elemento de mapa) article aside audio b bdo blockquote br button canvas cite code command datalist del details dfn div dl em embed fieldset figure footer form h1, h2, h3, h4, h5, h6, hgroup header hr i iframe img input ins kbd keygen label link (Se o atributo itemprop for utilizado) map mark math menu meta (Se o atributo itemprop for utilizado) meter nav noscript object ol output p pre progress q ruby samp script section select small span strong style (Se o atributo scoped for utilizado) sub sup svg table textarea time ul var video wbr Text SectioningOs elementos de seção em HTML 5 são elementos que definem seções de conteúdo em uma página. Eles ajudam a estruturar o conteúdo da página em partes lógicas e significativas, permitindo que o navegador e outros dispositivos de acessibilidade entendam melhor o conteúdo e apresentem-no de forma mais adequada. Alguns exemplos de elementos de seção incluem: &lt;article&gt;: define um artigo ou postagem de blog &lt;section&gt;: define uma seção genérica de conteúdo &lt;nav&gt;: define uma seção de navegação &lt;aside&gt;: define um conteúdo lateral relacionado ao conteúdo principal da página &lt;header&gt;: define o cabeçalho da página ou de uma seção específica &lt;footer&gt;: define o rodapé da página ou de uma seção específica &lt;main&gt;: define o conteúdo principal da página Nota: Esses elementos podem ser usados em conjunto com elementos de fluxo para criar uma estrutura de página bem definida e semântica. Além disso, eles podem ser aninhados uns dentro dos outros para criar uma estrutura de conteúdo ainda mais complexa.Heading definem a seção de títulos de cabeçalho h1, h2, h3, h4, h5, h6, hgroup Phrasing marcam o texto a abbr area (se ele for descendente de um elemento de mapa) audio b bdo br button canvas cite code command datalist del (se ele contiver um elemento da categoria de Phrasing) dfn em embed i iframe img input ins (se ele contiver um elemento da categoria de Phrasing) kbd keygen label link (se o atributo itemprop for utilizado) map (se apenas ele contiver um elemento da categoria de Phrasing) mark math meta (se o atributo itemprop for utilizado) meter noscript object output progress q ruby samp script select small span strong sub sup svg textarea time var video wbr Text Embedded importam outra fonte de informação audio canvas embed iframe img math object svg video Interactive interagem com o usuário, geralmente em formulários a audio (se o atributo control for utilizado) button details embed iframe img (se o atributo usemap for utilizado) input (se o atributo type não tiver o valor hidden) keygen label menu (se o atributo type tiver o valor toolbar) object (se o atributo usemap for utilizado) select textarea video (se o atributo control for utilizado) Novos atributos do HTML5 section - seção de bloco de elementos; article - bloco de postagem de blog, artigo, comentários, ou de texto; aside - coluna lateral contendo o menu nav ou publicidade; nav - contém um menu de links; hgroup - grupo de titulos; footer - rodapé da páginaReferências HTML 5, Curso W3C Escritório Brasil; Tutorial de HTML do w3schools Editor HTML, CSS e JavaScript; Padronização W3C; &#8617; WHATWG; &#8617; " }, { "title": "Planejamento de Editor de Projeto Visual Gráfico", "url": "/aulas/posts/planejamento-de-editor-grafico/", "categories": "AULAS, EDITOR GRÁFICO", "tags": "Senac, planejamento", "date": "2022-11-16 13:00:00 -0300", "snippet": "O profissional editor gráfico atua nas áreas de criaçao e arte, comunicação, design, gráfica, confecção, silk-screen, e opera softwares vetoriais e bitmaps…Objetivo profissionalA ocupação está situ...", "content": "O profissional editor gráfico atua nas áreas de criaçao e arte, comunicação, design, gráfica, confecção, silk-screen, e opera softwares vetoriais e bitmaps…Objetivo profissionalA ocupação está situada no eixo tecnológico Produção Cultural e Design, cuja natureza é “criar” e pertence ao segmento Comunicação.Competências: Elaborar projeto visual gráfico. Desenvolver peça gráfica. Finalizar peça gráfica.Área de atuaçãoEsse profissional pode criar, entre outros, logomarcas, manuais de identidade visual, cartões de visitas e demais materiais de comunicação impressa, como banners, cartazes, catálogos, folders etc. Esse profissional pode atuar em um departamento de comunicação de uma empresa ou, ainda, prestar serviços pontuais para várias companhias. Pode atuar em agências de publicidade, editoras, departamentos de arte e de comunicação em empresas, empresas de embalagens, gráficas, entre outras.Organização curricularUC 1: Elaborar projeto visual gráfico (36 horas): Design Gráfico: princípios do Design Gráfico (composição, alinhamento, peso, nivelamento, hierarquia, contraste). Teoria da cor: aspectos físicos e psicológicos. Lay-out: técnicas de criação. Tipografia: conceito e classificação. Briefing: conceito e interpretação.UC 2: Desenvolver peça gráfica (72 horas): Software de edição de imagens: interface, familiarização e ferramentas de manipulação, tratamento e restauração. Teoria das cores: gerenciamento de cores, colorização de imagens, modelos de cores (Cmyk, Lab, RGB, Grayscale, e cores especiais - Pantone). Composição de imagens: técnicas de seleção, camadas, máscaras, canais, filtros e objetos inteligentes. Ajustes de luz e cor (brilho e contraste, níveis, sombra e realce, matiz/saturação). Software de desenho vetorial: interface, familiarização, formas geométricas, demarcadores, caminhos compostos, gradientes, padronagem e cores. Edição de texto: caixas de texto e tipografia. Peça gráfica: criação e desenvolvimento. Resolução do arquivo: pixel/polegada, pontos/cmUC 3: Finalizar peça gráfica (36 horas): Sistemas de impressão: offset, serigrafia, flexografia, rotogravura e digital. Tipo de papel: gramatura, formatos, composição. Arquivos para impressão: sangria, cor especial, marcas para impressão. Arquivos abertos e fechados: eps, pdf, jpeg, tiff, psd, ai, cdr, png. Conversão de cores para sistemas de impressão. Lay-out: desenvolvimento e diagramação.UC 4: Projeto Integrador (16 horas) Proposta 1: Criação de manual de identidade visual Proposta 2: Desenvolvimento de portfólio de peças gráficasDiagramaReferências Atividades profissionais da indústria gráfica Concurso público Carreira de designer Agata Yamashiro - Guia Prático: Como Criar um MEI para Designer Freelancer Camila Costa - TOP 10 Sites para Encontrar Trabalho Freelance PDF Princípios de Design - composição • unidade • harmonia • equilíbrio • contraste Elementos básicos IFRN - Princípios do Designe e projeto gráfico Princípios e elementos do designe YAMANE, Laura Ayako. Estamparia Têxtil. São Paulo, 2008. Cores, formas harmonia ROSA, Safira Maria de Lima. Design de superfície como ferramenta para a valorização institucional. UFPE, Caruaru - PE, 2017 Corel A referência do designe gráfico Princípios do design - Meira da Rocha" }, { "title": "As memórias do computador", "url": "/aulas/posts/memorias/", "categories": "AULAS 2022, MONTAGEM E INSTALAÇÃO DE SISTEMAS", "tags": "componentes, memória", "date": "2022-11-14 10:00:00 -0300", "snippet": "A memória é a parte do computador responsável por armazenar dados e instruções, ela pode ser volátil - que é apagada ao ser desligada, ou permanente.Tipos principais Memória rápida - acesso direto...", "content": "A memória é a parte do computador responsável por armazenar dados e instruções, ela pode ser volátil - que é apagada ao ser desligada, ou permanente.Tipos principais Memória rápida - acesso direto no ship do processador: Registadores - dados de programas, Cache L1, L2 - dados mais acessados; principal - fundamental para o funcionamento de um computador: RAM - onde é carregado tudo que está em uso no momento, ROM (BIOS/UEFI) - inicialização do computador; Secundária - necessidade de armazenar os dados para uso futuro (permanente): HD (Hard Disk), SSD, Pendrive, CD, DVD, nuvem - internet, etc. Características da memória Capacidade: expressa em função de bytes: 1 GB, 2 GB ou 4 GB; tamanho da palavra: 8, 16, 32 ou 64 bits. Métodos de acesso: acesso sequencial: Ex: unidade de fita. acesso direto: Ex: HD. acesso aleatório: memória principal e alguns sistemas de cache. associativo: Ex: memórias cache Desempenho: Tempo de acesso Tempo gasto para efetuar uma operação de leitura ou de escrita; Tempo de ciclo de memória Tempo adicional requerido antes que um segundo acesso possa ser iniciado. Taxa de transferência: taxa na qual os dados podem ser transferidos de ou para a unidade de memória. Tecnologias da memória semicondutor; superfície magnética; memórias ópticas; e magneto‐ópticas. Volátil, não‐volátil, apagável e não‐apagávelHierarquias da memória Seu objetivo é conseguir uma maior eficiência (velocidade vs. custo); Sua estruturação hierárquica: o termo hierarquia de memória também serve para facilitar a compreensão, relacionar as características e tipos de memória. São organizadas em relação às características principais: capacidade; tempo de acesso; e custo;Funcionamento Lógica de sistema eficiente: as informações acessadas com maior frequência ficam mais próximas do processador e armazenadas em memórias rápidas: Ex: Registradores, cache L1, L2 ou L3, ou ainda na RAM; as informações acessadas com menor frequência ficam mais distantes do processador e são armazenadas em memórias mais lentas: Ex: HD, SSD, CD/DVD, Pendrive, nuvem. Como funciona: o processador ao solicitar um determinado dado verifica se este dado está na memória mais próxima, se não, verifica as demais memórias até completar o ciclo. Hierarquiamemória rápida Registrador: memória temporária usada pelo processador no processamento das instruções. Eprom/Rom/CMOS: : memória onde se guardam as instruções de inicialização do computador. Cache L1, L2 ou L3: : Armazena partes da memória principal que são usados frequentemente pelo processador. memória principal RAM acesso mais rápido, porém, ainda com capacidade reduzida de armazenamento; armazena informações temporariamente durante a execução de um processo; volátil.Memória Secundária também conhecida por memória de massa; armazenar grande quantidade de dados; não volátil; não é acessada diretamente pelo processador, pois não é possível endereçá-la diretamente; acesso lento (uso de barramento); Hard Disk (HD) é um exemplo de memória secundária; alta capacidade de armazenamento; programas e arquivos pessoais são armazenados nele, inclusive o Sistema Operacional.Taxa de Transferência Taxa de Transferência Interna: indica a taxa que a cabeça de leitura e gravação consegue atingir; Unidade: RPM - rotações por minuto; Taxa de Transferência Externa: indica a taxa máxima que o HD atinge para transferir os dados para fora e viceversa(barramento externo); Taxa de Transferência prática(real): estabelece um tipo de média entre as taxas interna e externa;As memórias e os processadores Os processadores (ou CPUs, de Central Processing Unit) são chips responsáveis pela execução de cálculos, decisões lógicas e instruções que resultam em todas as tarefas que um computador pode fazer e, por esse motivo, são também referenciados como “cérebros” dessas máquinas. Para fazer esses trabalhos, o processador utiliza uma linguagem numérica, chamada de binária, que transforma em zeros e uns, toda a informação que circula pelo computador, sejam números, letras ou instruções. O processador é um chip de silício responsável pela execução das tarefas de um computador. Para entender como um processador funciona, é conveniente dividirmos um computador em três partes: processador, memória e um conjunto de dispositivos de entrada e saída (ou I/O, de Input/Output). Através dos dispositivos de entrada chegam as instruções para serem processadas, essas instruções são carregadas na memória, então o processador interpreta as instruções, gerando uma saída correspondente, que pode ser armazenada no HD, ser impressa ou etc.Referências Apostila Montagem e Instalação de Sistemas Informáticos. Governo do Estado do Ceará Aulas anteriores de Montagem e Instalação de Sistemas Informáticos" }, { "title": "Proposta comercial", "url": "/aulas/posts/proposta-comercial/", "categories": "AULAS, WEB DESIGNER", "tags": "Senac, planejamento, projeto", "date": "2022-11-03 18:00:00 -0300", "snippet": "Uma das etapas mais importantes é a apresentação da proposta comercial, vamos ver o que é necessário para um bom desempenho.BriefingParte essencial da preparação para a negociação, contém um resumo...", "content": "Uma das etapas mais importantes é a apresentação da proposta comercial, vamos ver o que é necessário para um bom desempenho.BriefingParte essencial da preparação para a negociação, contém um resumo de todas as informações sobre os envolvidos: o cliente, o produto ou serviço a ser contratado, detalhes dos requisitos apontados por uma reunião ou questionário. Pode ser um documento, um documento, um quadro, uma planilha, etc. Pode conter diagramas que resumem graficamente objetivos, cronogramas, ideias e objetivos.ApresentaçãoDiferente da proposta comercial, a apresentação é a porta de entrada da negociação, para o seu cliente conhecer a sua empresa, seus serviços, produtos, pode ser um portifólio, um web site, um folder.Proposta comercialGeralmente é apresentada no final do processo de negociação, constitui um documento contendo: Logo da empresa no topo; Título da proposta; Identificação da empresa e do cliente; Termo de confidencialidade (recomendado); Justificativa - as necessidades atendidas; Preço ou mensalidade; Serviços ou produtos contratados; Suporte oferecido com a aquisição do serviço ou produto; Escopo do serviço ou produto - o que inclui além do principal; Período para implantação; Cronograma ou prazo para desenvolvimento; Termos e condições de uso; Assinaturas.CronogramaParte essencial na proposta, estabelece prazos e metas a serem cumpridas e define o tempo de desenvolvimento e implantação do serviço ou produto.SuporteEssencial para um bom serviço de pós-venda, demonstra que a empresa está a disposição para a resolução de eventuais problemas, e no caso da prestação de serviço, define os horários de atendimento, forma de contato, e prazo e forma de resposta.Contém: Garantias; Especificações do que o suporte cobre; Forma de contato; Prazos de resposta; Tipos de pagamento se está ou não incluído no preço principal;InvestimentoO preço deve ser claro e sem gerar dúvidas, pode ser demonstrado por uma tabela contendo os preços diversos e os pontos onde foram negociados em reuniões anteriores.Contrato comercialNo caso do sucesso da proposta, esta pode ser usada para a redação de um contrato formal, ou a própria proposta pode ser usada como contrato final. Sendo que no contrato consta a multa contratual para o caso da desistência de uma das partes durante a sua vigência.Referências CAMPOS, Joaquim. Ambiente de negócio: proposta, negociação e projeto. Ed. Senac, São Paulo - SP, 2020. Pg 88 - proposta inicial; pg 106 - análise de questões para a negociação e a contratação do projeto; Vídeo no YouTube: Modelo de PROPOSTA + APRESENTAÇÃO comercial: como montar + template pronto. Canal Fleeg Oficial." }, { "title": "Planejamento de Web Designer", "url": "/aulas/posts/planejamento-de-webdesigner/", "categories": "AULAS, WEB DESIGNER", "tags": "Senac, planejamento", "date": "2022-11-03 18:00:00 -0300", "snippet": "O curso de desenhista de páginas da internet possui carga horária de 160 horas e faz parte do eixo tecnológico de produção cultural e design.Objetivo profissionalO profissional Web Designer é respo...", "content": "O curso de desenhista de páginas da internet possui carga horária de 160 horas e faz parte do eixo tecnológico de produção cultural e design.Objetivo profissionalO profissional Web Designer é responsável por projetos visuais e funcionais de websites, pela produção de peças gráficas para mídias digitais e também de layouts e protótipos para aplicativos, considerando as necessidades do cliente e o público-alvo a ser atingido. Tal perspectiva propicia o comprometimento do aluno com a qualidade do trabalho, com o desenvolvimento de uma visão ampla e consciente sobre sua atuação profissional e sobre sua capacidade de transformação da sociedade. No Brasil, o exercício profissional não é regulamentado.Área de atuaçãoAtua em organizações públicas, privadas ou do Terceiro Setor de diversos segmentos do mercado de trabalho voltadas à produção de conteúdo digital, como agências de publicidade, estúdios digitais, empresas de comunicação e produtoras audiovisuais. Também pode atuar de forma autônoma, em projetos próprios ou terceirizados.Organização curricularWeb Designer UC1: Elaborar projetos de aplicações para web. Carga Horária: 36 horas; Briefing: conceito, especificidades para projetos web e modelos; Técnicas de criatividade: brainstorming, mapas mentais e painéis semânticos; Análise de mercado: identificação do perfil do cliente e público-alvo, concorrentes diretos e indiretos; Domínios de internet: conceito, registro e disponibilidade de serviços; Projetos web: tendências, tecnologias, gestão de projetos (custos, calendários de tarefas e relatórios de acompanhamento); Arquitetura da informação: conceito e aplicações, mapa do site e estruturas de navegação, organização de conteúdo; Proposta comercial: características, requisitos, elaboração e modelos de contrato de serviço; Análise de requisitos: conceitos e técnicas; UC2: Desenvolver aplicações para websites. Carga Horária: 72 horas; Imagem digital: Conceitos de vetor e bitmap, formatos e aplicações, unidades de medida, densidade de pixels, taxa de bits, animações web; Comunicação visual: Tipografia, teoria e modos de cor, grid e alinhamento, Gestalt (conceito e aplicabilidade); Wireframes e protótipos: conceito, estrutura e desenvolvimento; Design responsivo: conceitos e aplicações; Projeto de website: características funcionais, usabilidade, acessibilidade e ergonomia; Estrutura semântica: conceitos, linguagem de marcação de conteúdo; Estilização de páginas: definições de estilose integração com estrutura de conteúdo; Web standards: boas práticas e padrões recomendados pelo W3C; Desempenho e compatibilidade: conceito e ferramentas; Código do website:testes, validação e correção; Content Management System (CMS) - Interface, requisitos básicos, servidor local e banco de dados, configuração de usuários administrativos, customização, CSS e temas, plug-ins, implantação e publicação; UC3: Publicar aplicações web. Carga Horária: 36 horas; Tecnologias de Servidor web:conceitos e princípios de funcionamento; Serviços de hospedagem: gratuitos, pagos, compartilhados e dedicados; Gerenciamento do site: atualização de informações e backups; Transferência de arquivos: hospedagem via FTP e upload no servidor; Testes de desempenho: comportamento e integridade do website; UC4: Projeto Integrador Web designer(16 horas) desenvolver as etapas do website, prevendo sua compatibilidade com múltiplos dispositivos e plataformas, bem como, sua aderência aos padrões internacionais de acessibilidade recomendados; Referências FERRAZ, Reinaldo. Tendências da web. São Paulo: Editora Senac, 2017. PAGANI, Talita.Design Thinking. São Paulo: Editora Senac, 2017. BORGES, Igor Oliveira. Aplicações Gráficas para Web. São Paulo: Editora Senac, 2021. VENANCIO Júnior; SÉRGIO José. Layout e edição de imagens para web. São Paulo: Editora Senac, 2021. GOMES, Ana Laura. Adobe Dreamwaver. São Paulo: Editora Senac, 2017. GOMES, Ana Laura. Adobe Fireworks. São Paulo: Editora Senac, 2017. Curso Web Designer Senac Web Designer no Quero Bolsa Portal Web Designer Guia de Carreira: Descubra o que faz um web designer Guia de Carreira: Quanto ganha um Web designer DIO: Cursos de programação web Projeto kanban da disciplina" }, { "title": "Kit de ferramentas", "url": "/aulas/posts/kit-de-ferramentas/", "categories": "AULAS 2022, MONTAGEM E INSTALAÇÃO DE SISTEMAS", "tags": "montagem, ferramentas", "date": "2022-10-10 09:00:00 -0300", "snippet": "Sugestões para ferramentas básicas para manutençãoFerramentas de manutenção de computadorMultímetroTeste de fonte de computadorDetector de tensão elétricaKit de chaves de fenda e pinçaPulseira elet...", "content": "Sugestões para ferramentas básicas para manutençãoFerramentas de manutenção de computadorMultímetroTeste de fonte de computadorDetector de tensão elétricaKit de chaves de fenda e pinçaPulseira eletroestática Luva emborrachada Pincel anti-estática Spray limpa contato e álcool isopropílico Pasta térmica Alicate pequenoFerramentas de rede Alicate de crimpagem Testador de cabo de rede Cortador de decapagem de fio Chave de fenda Ferramenta de punch-down Conectores RJ45Ferramentas para fibra óptica Conectores SC/FC Clivador FC-6S Power Meter = Medidor de Potência (FC/SC); Identificador Visual de Falhas (caneta ótica) 1km; Recepiente para álcool isopropílico; Alicate Decapador; Alicate Descascador (Fibra Drop); Gabarito de conectorização;Referências Guias de reparo Como fazer testes em uma fonte ATX Teste de fonte com multímetro - YouTube Vlog de TI" }, { "title": "Principais protocolos de rede", "url": "/aulas/posts/principais-protocolos-de-rede/", "categories": "AULAS 2022, MEIOS DE COMUNICAÇÃO", "tags": "redes, meios, simulador, protocolos, práticas", "date": "2022-09-28 15:00:00 -0300", "snippet": "Roteiro de práticas no simulador de redes Packet Tracer.Todas as práticas seguem os cursos oficiais da Cisco Network Academy, que estão disponíveis na plataforma Skills for all, elas contêm vídeos ...", "content": "Roteiro de práticas no simulador de redes Packet Tracer.Todas as práticas seguem os cursos oficiais da Cisco Network Academy, que estão disponíveis na plataforma Skills for all, elas contêm vídeos e tutoriais que estão em inglês e podem ser traduzidas com a extenção Google tradutor do Chrome.ObjetivosEste curso mostra como conectar e configurar dispositivos finais em uma rede local, utilizando os principais protocolos de rede.Conceitos básicos Host = dispositivo conectado na rede; Endereço MAC = endereço único de placa de rede do host Endereço IP = número de endereçamento atribuído a um Host; Sub-rede = parcela de uma rede; Máscara = número de 32 bits que separa rede de host; Relação = conexão de rede. Encapsulamento = processo que coloca um formato de mensagem em outro formato. Servidor DHCP = fornece automaticamente endereçamento IP atribuído a um Host. Protocolo NAT = traduz o endereço IP em outro IP local. Gateway = endereço IP do roteador de entrada e saída da rede para ligação a outras redes.Protocolo de Internet IP v4 É formado por 32 bits binários; Separado por 4 octetos (1 octeto = 8bits); Cada octeto é convertido em decimal; Cada octeto é separado por ponto; O valor máximo de cada octeto é 255. Ex. 172.16.81.100 Protocolo DHCPOs endereços IPv4 podem ser atribuídos estática ou dinamicamente.Com uma atribuição estática, o administrador de rede deve configurar manualmente as informações da rede para um host. No mínimo, isso inclui o seguinte: Endereço IP– Identifica o computador na rede. Máscara de Sub-rede - Identifica a rede à qual o host está conectado Gateway padrão – Identifica o dispositivo de rede que o host usa para acessar a Internet ou outra rede remota.O protocolo DHCP fornece um mecanismo para atribuição automática de informações de endereçamento.Iniciando a atividade no Simulador de redes Acesse o catálogo de cursos na plataforma Skills for all e selecione o curso: Networking Basics(Noções básicas de rede); Selecione o idioma clicando no ícone do globo na parte superior da página. Caso ainda não tenha o Packet Tracer acesse a área de recursos de aprendizagem da plataforma para instalá-lo.Módulo 11.2.3: Configuração do DHCPNesta atividade do Packet Tracer, você concluirá os seguintes objetivos: Acesse o catálogo de cursos na plataforma Skills for all e selecione o curso: Networking Basics (Noções básicas de rede); Selecione o ítem 11.2.3: Packet Tracer - Configuração do DHCP em um Roteador Wireless (sem fio); Faça do download do arquivo e abra-o no Packet Tracer; Realize as atividades conforme as instruções que acompanham o arquivo: Conectar 3 PCs a um roteador wireless (sem fio) Alterar a configuração do DHCP para uma faixa de rede específica Configurar os clientes para obter seus endereços por DHCP Módulo 12.2.2: Examinando o NATNesta atividade do Packet Tracer, você concluirá os seguintes objetivos: Acesse o catálogo de cursos na plataforma Skills for all e selecione o curso: Networking Basics (Noções básicas de rede); Selecione o ítem 11.2.2: Packet Tracer - Examinando o NAT em um roteador sem fio; Faça do download do arquivo e abra-o no Packet Tracer; Realize as atividades conforme as instruções que acompanham o arquivo: Examinar a configuração da NAT em um roteador sem fio Configurar 4 PCs para que se conectem a um roteador sem fio com DHCP Examinar o tráfego que cruza a rede usando NAT Referências Simulador de redes Curso Conceitos Básicos de Redes - Cisco Skills for all Paket Tracer BR download Extenção Google tradutor do Chrome." }, { "title": "Configurando uma rede com WiFi", "url": "/aulas/posts/configurando-uma-rede-com-wifi/", "categories": "AULAS 2022, MEIOS DE COMUNICAÇÃO", "tags": "redes, meios, simulador, WiFi, práticas", "date": "2022-09-22 15:00:00 -0300", "snippet": "Roteiro de práticas no simulador de redes Packet Tracer.Todas as práticas seguem os cursos oficiais da Cisco Network Academy, que estão disponíveis na plataforma Skills for all, elas contêm vídeos ...", "content": "Roteiro de práticas no simulador de redes Packet Tracer.Todas as práticas seguem os cursos oficiais da Cisco Network Academy, que estão disponíveis na plataforma Skills for all, elas contêm vídeos e tutoriais que estão em inglês e podem ser traduzidas com a extensão Google tradutor do Chrome.ObjetivosEste curso mostra como conectar e configurar dispositivos finais em uma rede local, incluindo: uma smart tv, computadores desktop e notebook, e como verificar sua conectividade. Você aprenderá sobre como configurar um roteador WiFi, a segurança de acesso e o endereçamento de conexão com um servidor web.Iniciando Acesse o catálogo de cursos na plataforma Skills for all e selecione o curso: Networking Basics: Build a Home Network (Noções básicas de rede: Construa uma rede doméstica); Selecione o idioma clicando no ícone do globo na parte superior da página. Caso ainda não tenha o Packet Tracer acesse a área de recursos de aprendizagem da plataforma para instalá-lo.Módulo 4.4: Configurar um roteador domésticoMuitos roteadores sem fio projetados para uso doméstico têm um utilitário de configuração automática que pode ser usado para definir as configurações básicas do roteador. Esses utilitários geralmente exigem que um PC ou laptop seja conectado a uma porta com fio no roteador. Se nenhum dispositivo estiver disponível com conexão com fio, pode ser necessário configurar primeiro o software cliente sem fio no laptop ou tablet.Conectando o cabeamento ao roteadorPara se conectar ao roteador usando uma conexão com fio, conecte um cabo de rede Ethernet na porta de rede do computador. Conecte a outra extremidade a uma porta LAN no roteador. Não conecte o cabo à porta ou interface identificada como “Internet”, pois esta se conectará ao modem de fibra óptica ou a cabo que liga ao provedor de internet. Alguns roteadores domésticos podem ter um modem embutido para estas conexões com a Internet. Se este for o caso, verifique se o tipo de conexão está correto para o seu serviço de internet. Uma conexão de modem a cabo terá um terminal coaxial para aceitar um conector do tipo BNC. Uma conexão DSL terá uma porta para um cabo tipo telefone, geralmente um conector RJ-11.Configurando o endereçamentoDepois de confirmar que o computador está conectado ao roteador de rede e as luzes de link na NIC indicam que a conexão está funcionando, o computador precisa de um endereço IP. A maioria dos roteadores de rede são configurados para que o computador receba um endereço IP automaticamente de um servidor DHCP local configurado automaticamente no roteador sem fio. Se o computador não tiver um endereço IP, verifique a documentação do roteador e configure o PC ou tablet com um endereço IP exclusivo, máscara de sub-rede, gateway padrão e informações de DNS.Configurando a rede local WiFiPara configurar a rede WiFi será necessário acessar o utilitário de configuração do roteador por meio de um navegador da Web, e definir os seguintes parâmetros: SSID - como a rede será chamada; Que tipos de dispositivos serão anexados à minha rede? Os dispositivos sem fio contêm transmissores/receptores de rádio que funcionam dentro de uma faixa de frequência específica. Se um dispositivo tiver apenas o rádio necessário para 802.11 b/g, ele não se conectará se o roteador ou ponto de acesso sem fio estiver configurado para aceitar apenas os padrões 802.11n ou 802.11ac. Se todos os dispositivos suportarem o mesmo padrão, a rede funcionará em sua velocidade ideal. Se você tiver dispositivos que não suportam os padrões n ou ac, será necessário habilitar o modo legado. Um ambiente de rede sem fio de modo legado varia entre os modelos de roteador, mas pode incluir uma combinação de 802.11a, 802.11b, 802.11g, 802.11n e 802.11ac. Definir um canal livre: Se na vizinhança existem outros roteadores devemos usar um scanner de canais para verificar um canal livre e evitar interferência, roteadores moderno fazem esta procura automaticamente, um exemplo de software scanner é o Ubiquiti WiFiman. Definir a segurança de acesso: Configurar o usário e senha; Configurar o tipo de criptografia da senha; Mudar a senha de administrador do roteador Definir o endereçamento IP da rede local Configurar o acesso ao provedor de internet Verificar a conectividade.Atividade no Packet TracerNesta atividade do Packet Tracer, você concluirá os seguintes objetivos: Acesse o catálogo de cursos na plataforma Skills for all e selecione o curso: Networking Basics: Build a Home Network (Noções básicas de rede: Construa uma rede doméstica); Selecione o item 4.4.4: Packet Tracer - Configurar um roteador e cliente sem fio; Faça do download do arquivo e abra-o no Packet Tracer; Realize as atividades conforme as instruções que acompanham o arquivo: Parte 1: Conecte os dispositivos Parte 2: Configurar o roteador sem fio Parte 3: Configurar o endereçamento IP e testar a conectividade Referências Simulador de redes Curso Conceitos Básicos de Redes - Cisco Skills for all Packet Tracer BR download Extensão Google tradutor do Chrome." }, { "title": "Atividade de Meios de Comunicação de Dados", "url": "/aulas/posts/atividade-de-meios-de-comunicacao/", "categories": "AULAS 2022, MEIOS DE COMUNICAÇÃO", "tags": "atividades, meios", "date": "2022-09-19 21:00:00 -0300", "snippet": "Atividade da fase 1 Identifique a respectiva característica da camada de rede do padrão OSI Camada OSI propriedade (7) ...", "content": "Atividade da fase 1 Identifique a respectiva característica da camada de rede do padrão OSI Camada OSI propriedade (7) Aplicação Usa o protocolo TCP de pacotes de dados (__) (6) Apresentação Equipamentos para conexão de redes (__) (5) Sessão Usa o protocolo IP para endereçamento (__) (4) Transporte Meios de transmissão como cabo ou fibra ótica (__) (3) Rede Abre o canal de comunicação (__) (2) Enlace Traduz o formato de dados (__) (1) Física Interage diretamente com o usuário (__) Qual a principal vantagem do WiFi? Mobilidade Escalabilidade Facilidade de instalação Facilidade de manutenção. Qual a principal desvantagem do WiFi? Alto custo. Interferência. Escalabilidade. Mobilidade. WPAN é um tipo de rede pessoal, de curto alcance, marque padrão que melhor se define como WPAN. 3G WiMax Bluetooth VPN Sobre o comportamento das ondas eletromagnéticas, relacione as colunas: Característica tipo (a) Passar por obstáculos. Reflexão (__) (b) Muda a trajetória devido a obstáculos. Difração (__) (c) Contornar obstáculos. Absorção (__) Qual a criptografia mais segura pra proteger a senha do WiFi? WEP - Wired Equivalent Privacy. WPA - Wi-Fi Protect Access. WPA2 - Wi-Fi Protect Access 2. WPA2/AES - Wi-Fi Protect Access 2. Sobre os tipos de antenas, identifique a sua respectiva característica: Tipo propriedade (a) Omnidirecional Gera um feixe focado para minimizar a interferência.(__) (b) Direcional Alcance circular em torno do transmissor (__) (c) Setorial Cobre uma área específica atingindo entre 90º a 180º (__) Qual a definição de frequência? É a quantidade de vezes que uma onda oscila em um determinado período de tempo. É a distância entre dois pontos iguais da mesma onda. É a altura do pico que oscila na onda. É distância entre o pico superior e inferior da onda. Qual o tipo de onda é usada em redes sem fio? Ondas eletromagnéticas Ondas mecânicas. Ondas de luz. Ondas de Tesla. Sobre a WiFi marque as verdadeiras: O ganho significa que o sinal pode ser amplificado Atenuação é perda do sinal devido a distância. Difração é capacidade do sinal de contornar obstáculos. Wlan é tipicamente sem infraestrutura de rede. SSID é o nome que identifica a rede. Ao configurar uma rede deve-se escolher um canal livre. WPA2 é um padrão de comunicação da camada de Aplicação. Referência Apostila da disciplina de Redes de Computadores. Secretaria da Educação do Ceará." }, { "title": "Pesquisa de Softwares de Aplicação", "url": "/aulas/posts/pesquisa-de-software-de-aplicacao/", "categories": "AULAS 2022, SOFTWARES DE APLICAÇÃO", "tags": "atividades, redes", "date": "2022-09-19 20:00:00 -0300", "snippet": "Para cuidar de uma rede é muito importante usar ferramentas que monitoram, simulam, gerenciam e vigiam a rede para garantir o seu perfeito funcionamento.Dentre essas ferramentas temos como exemplo ...", "content": "Para cuidar de uma rede é muito importante usar ferramentas que monitoram, simulam, gerenciam e vigiam a rede para garantir o seu perfeito funcionamento.Dentre essas ferramentas temos como exemplo os softwares: o Packet Tracer - um excelente simulador de redes da Cisco; o Wireshark - que captura o tráfego da rede (Sniffer de rede); o The Dude - que faz o mapeamento e monitoramento da rede; o Wireless Network Watcher - que também mapeia a rede; o Networx - monitora o tráfego da rede, o Simple Port Forwarding - que simplifica a configuração de roteadores, o Iperf - que mede o tráfego na rede; o Nagios - Monitora e administra redes , assim como o Centreon, e o Opennms - que monitora serviços de redes.MONITORAMENTO DE REDESConsiste na utilização de softwares para a observação de informações relevantes ao gerenciamento, que podem classificadas em três categorias: Estática: caracteriza os elementos na atual configuração, como o número e identificação das portas em um roteador; Dinâmica: relacionada aos eventos na rede, como a transmissão de um pacote; Estatística: pode ser derivada de informações dinâmicas como a média de pacotes transmitidos por unidade de tempo em um determinado sistema.GERENCIAMENTO DE REDESDentre os tipos de softwares de gerenciamento destacamos as categorias: Gerência de falhas (Fault); Gerência de Configuração (Configuração); Gerência de Contabilização (Accounting); Gerência de desempenho (Performance) Gerência de Segurança (Security)DIAGRAMA E PROJETO DE REDESExistem também os criadores de diagramas de redes, usados para projetos, monitoramento e descoberta de dispositivos conectados, como o GitMind, Intermapper e o Solarwinds.EXEMPLOS DE SOFTWARES Packet Tracer - Simulador de redes da LabCisco; Wireshark - Sniffer de rede - captura dados do tráfego na rede; The Dude - Mapeamento e monitoramento da rede; Zabbix - monitoramento de infraestrutura de rede; WiFiman - scanner de rede WiFi; Wireless Network Watcher - Mapeamento da rede WiFi; Networx - Monitoramento do tráfego da rede; Simple Port Forwarding - Configuração de Roteadores; Iperf - Medidor de tráfego na rede; Nagios - Monitoramento e administração de redes; Centreon - monitoramento e administração de redes; Opennms - monitoração de serviços de redes; Solarwinds Network Topology Mapper - topologia e diagramas de rede GitMind - diagrama de rede.ATIVIDADE Como vimos, para monitorar e gerenciar as redes de computadores é indispensável o uso de softwares como ferramentas, dentre os softwares de rede apresentados escolha 5, pesquise e apresente as suas características como empresa criadora, se é freeware,open source ou proprietário, onde pode ser instalado e que funções desempenha na rede. Exemplo: WifiMan Empresa: Ubiquiti Freeware Pode ser instalado no PC e no celular Funções na rede: Escaneia roteadores transmitido; Escaneia canais de WiFi para escolher um livre; Mede a velocidade da conexão da internet; Mede a potência do sinal WiFi para escolher o roteador mais próximo Em equipes de no máximo 4 partipantes, serão distribuídos os softwares para serem apresentados em seminários descrevendo as principais características como: empresa criadora, se é possível ser remoto, método de instalação e utilidade prática. Referências Apostila Montagem e Instalação de Sistemas Informáticos. Governo do Estado do Ceará Top softwares de diagramas de redes" }, { "title": "Explorando redes no Packet Tracer", "url": "/aulas/posts/explorando-redes-no-packet-tracer/", "categories": "AULAS 2022, MEIOS DE COMUNICAÇÃO", "tags": "redes, meios, simulador, práticas", "date": "2022-09-07 20:00:00 -0300", "snippet": "Roteiro de práticas no simulador de redes Packet Tracer.Todas as práticas seguem os cursos oficiais da Cisco Network Academy, que estão disponíveis na plataforma Skills for all, elas contêm vídeos ...", "content": "Roteiro de práticas no simulador de redes Packet Tracer.Todas as práticas seguem os cursos oficiais da Cisco Network Academy, que estão disponíveis na plataforma Skills for all, elas contêm vídeos e tutoriais que estão em inglês e podem ser traduzidas com a extensão Google tradutor do Chrome.ObjetivosEste curso mostra como conectar e configurar dispositivos em sua rede, incluindo dispositivos sem fio, e como verificar sua conectividade. Você aprenderá sobre pacotes e como eles trafegam em uma rede. Além disso, conheça um controlador de rede e por que ele é tão poderoso para monitorar e gerenciar os dispositivos na rede de sua filial.IniciandoAcesse o catálogo de cursos na plataforma Skills for all e selecione o curso: Exploring Networking with Cisco Packet Tracer (Explorando a rede com o Cisco Packet Tracer);Caso ainda não tenha o Packet Tracer acesse a área de recursos de aprendizagem da plataforma para instalá-lo.1. Cabeamento estruturado Acesse o capítulo 1: Configure sua rede de pequenos escritórios - Set Up Your Small Office Network; Selecione o item 1.1.4: Packet Tracer - Criar cabeamento estruturado realista no espaço de trabalho físico e dispositivos de cabeamento em um rack; Faça do download do arquivo e abra-o no Packet Tracer; Realize as atividades conforme as instruções: Parte 1: Instale um Patch Panel no armário de fiação; Parte 2: Anexar um suporte de parede no escritório; Parte 3: Conecte um suporte de parede e cabos adicionais. 2.0.3. Simular protocolos de redes Selecione o capítulo 2: Gerencie e monitore sua rede de pequenos escritórios - Manage and Monitor Your Small Office Network; Selecione o item 2.0.3: Packet Tracer - Examine pacotes em um pequeno escritório; Faça do download do arquivo e abra-o no Packet Tracer; Realize as atividades conforme as instruções: Parte 1: Criar uma PDU simples no modo de simulação; Parte 2: Visualizar o conteúdo das PDUs; Parte 3: Criar uma PDU complexa no modo de simulação. 2.0.7. Editar uma topologia Selecione o capítulo 2: Gerencie e monitore sua rede de pequenos escritórios - Manage and Monitor Your Small Office Network; Selecione o item 2.0.7: Packet Tracer - Editar topologias; Faça do download do arquivo e abra-o no Packet Tracer; Realize as atividades conforme as instruções: Parte 1: Adicionar um switch adicional ao rack na rede do escritório; Parte 2: Conecte um PC à rede do Office; Parte 3: Trabalhar com Clusters; Parte 4: Adicionar um segundo cluster doméstico à rede. 2.1.3. O controlador de rede Selecione o capítulo 2: Gerencie e monitore sua rede de pequenos escritórios - Manage and Monitor Your Small Office Network; Selecione o item 2.1.3: Packet Tracer - Monitore sua rede usando um controlador de rede; Faça do download do arquivo e abra-o no Packet Tracer; Realize as atividades conforme as instruções: Parte 1: Implementar um controlador de rede; Parte 2: Monitore a Rede. 2.1.5. Gerenciar e configurar a rede Selecione o capítulo 2: Gerencie e monitore sua rede de pequenos escritórios - Manage and Monitor Your Small Office Network; Selecione o item 2.1.5: Packet Tracer - Gerencie e configure sua rede usando um controlador de rede; Faça do download do arquivo e abra-o no Packet Tracer; Realize as atividades conforme as instruções: Parte 1: Implementar um controlador de rede; Parte 2: descoberta de dispositivos; Parte 3: Adicionar um novo dispositivo de rede na rede do Office. Referências Simulador de redes Curso Explorando Redes com Packet Tracer - Cisco Skills for all Packet Tracer BR download Extensão Google tradutor do Chrome." }, { "title": "O Sistema Informático", "url": "/aulas/posts/sistema-informatico/", "categories": "AULAS 2022, MONTAGEM E INSTALAÇÃO DE SISTEMAS", "tags": "manutenção, eletrônica", "date": "2022-09-04 19:00:00 -0300", "snippet": "Um Sistema Informático trata-se de um conjuntos de equipamentos mecânicos e eletrônicos adequados e capazes de processar dados afim de que estes se tornem informação, de forma automática.Objetivos ...", "content": "Um Sistema Informático trata-se de um conjuntos de equipamentos mecânicos e eletrônicos adequados e capazes de processar dados afim de que estes se tornem informação, de forma automática.Objetivos Conhecer a organização interna de um Sistema Informático; Reconhecer os componentes internos do sistemas informáticos; Compreender o processo de administração de dados no sistema informático; Entender o funcionamento e a importância dos componentes; Entender o dimensionamento e a compatibilidade.CaracterísticasArquitetura de Von NeumannArquitetura de Von NeumannA figura mostra como funciona o sistema onde são introduzidos os dados na Entrada, usando um ou mais dispositivos destinados a esse fim, e são trabalhados dentro de um dispositivo de processamento (UCP). Após o processamento, os dados são exibidos em dispositivos de Saída.Os equipamentos que são utilizados como entrada podem ser: mouse, teclado, scanner, webcam, etc. Já os de saída temos como exemplo: monitor, impressora, fone de ouvido, etc.Esse modelo é definido desde a arquitetura de criada por Von Neuman.O Sistema Informático é formado basicamente por 2 componentes: o Hardware e Software.Hardware é a parte física do computador, isto é, os componentes e equipamentos necessário para o funcionamento do sistema informático. Os programas que comandam o hardware, damos o nome de software. A Arquitetura de von Neumann (de John von Neumann, pronunciado Nóimánn) é uma arquitetura de computador que se caracteriza pela possibilidade de uma máquina digital armazenar seus programas no mesmo espaço de memória que os dados, podendo assim manipular tais programas. Esta arquitetura é um projeto modelo de um computador digital de programa armazenado que utiliza uma unidade de processamento (CPU) e uma de armazenamento (“memória”) para comportar, respectivamente, instruções e dados. 1Principais elementosArquitetura da comunicação com barramentos no computador Hardware - dispositivos físicos de entrada, processamento, memória e Saída; Software - comanda o Hardware, composto de Sistema Operacional e Aplicativos.EntradaNa entrada ocorre a interação com o usuário e a alimentação de dados através de: Teclado; Mouse; DVD-Rom; Rede; Web-Cam; Pen-Drive.ProcessamentoO processamento é composto de uma placa onde são montados: o processador, a memória e o barramento de alimentação e de comunicação entre todos os componentes.Placa mãeEsquema da placa-mãe do computadorÉ uma placa principal que interliga todos os outros componentes. A motherboard ou mainboard é uma placa de circuito impresso e pode apresentar diferentes configurações dependendo da marca e do modelo. Para se poder aproveitar todos os recursos e suas potencialidades, é essencial portar o Manual da mesma, nele obtemos, por exemplo, qual(is) processador(es) podem ser instalados, os tipos de memórias, a velocidade dos barramentos, etc.CPU ou ProcessadorEsquema da comunicação do processador com as memóriasOs processadores ou CPUs (Central Processing Unit) são circuitos integrados previamenteprogramados para realizar todas as tarefas relativas a manipulação e processamento dainformação em um computador. Através do seu uso é possível a manipulação da máquinacom dispositivos de entradas e dados em dispositivos de saída.BarramentoEsquema da comunicação através dos barramentos da placa-mãeOs barramentos ou bus, são sistemas de condutores que possibilita a comunicação e o tráfego de dados entre os componentes do sistema informático. Esse meio permite a comunicação entre processador CPU, memória principal, Slots de Expansão, etc. Podemos ter os seguintes tipos de barramentos: Barramento Local: é o barramento utilizado pelo processador para se comunicar com os dispositivos capitais, como memória principal e cache. Barramento de Dados: Esse barramento serve para transmissão de dados em duas direções em uma comunicação bidirecional full duplex. Barramento de Controle: Realiza o controle da comunicação de dados. Seu tráfego é simplex. Barramento de Endereço: Nesse barramento são enviados sinais relativos ao endereço da memória e da mesma forma do barramento de controle, utiliza comunicação simplex. Barramento de Expansão: é o canal por onde dispositivos de expansão são conectados, como placa de vídeo, som, rede, etc. Barramento de alimentação: trilhas de alimentação elétrica entre a fonte e os componentes eletrônicos.Chipsets ponte norte e sulTemos também os microcontroladores chamados de ponte norte e ponte sul, que controlam a comunicação entre os barramentos. A ponte norte que vem integrada nos computadores modernos controla a comunicação entre o processador e a memória principal, e a ponte sul a comunicação com os periféricos.Chipsets e as memóriasMemóriaChipsets e as memóriasHard Disc e SSDA memória é o elemento de suporte ao processamento dotado de capacidade para armazenamento de todo tipo de informação, seja eles dados simples ou programas. Computador possui basicamente dois tipos de memória: A Principal e a Secundária. Principal: Também conhecida como Primária ou Central, esse tipo de memória trata os dados diretamente com o processador, tornando-se indispensável para o sistema informático. Consistem em módulos ou pentes e a esses são agregados chips ou circuitos integrados que se conectam diretamente à placa-mãe. Secundária: é também chamada de suporte, pois sua função é armazenar informações, que se encontram na memória principal, de forma permanente. Essa informação é guardada para uso de antes ou depois de processamento. Geralmente são armazenadas em HDD, leitores de CD/DVD.SaídaNa saída as informações são fornecidas ou realimentão a entrada de um novo processamento. São exemplos de saídas: Monitor; Impressora; Pen-drive; Rede; Som.Software Software de Sistema: Função principal é servir de interface entre o usuário e o e hardware e também os softwares aplicativos e o maior exemplo dessa classe é o Sistema Operacional. Software de Aplicação: desempenha tarefas de aplicações do interesse do usuário, tais como editor de textos, planilhas, banco de dados.Principais componentes do computadorReferências Apresentação sobre Sistemas Informáticos Apostila sobre Montagem e Instalação de Sistemas Informáticos Monte seu PC - meupc.net Arquitetura de von Neumann - Wikipédia &#8617; " }, { "title": "Componentes eletrônicos", "url": "/aulas/posts/componentes-eletronicos/", "categories": "AULAS 2022, MONTAGEM E INSTALAÇÃO DE SISTEMAS", "tags": "eletricidade, eletrônica", "date": "2022-08-28 19:00:00 -0300", "snippet": "Componentes são elementos que manipulam os elétrons controlando a forma com eles que se movimentam em um circuito condutor.sistema eletrônicoUm sistema eletrônico é um conjunto de circuitos que int...", "content": "Componentes são elementos que manipulam os elétrons controlando a forma com eles que se movimentam em um circuito condutor.sistema eletrônicoUm sistema eletrônico é um conjunto de circuitos que interagem entre si para obter um resultado. Uma forma de entender os sistemas eletrônicos consiste em dividi-los em entradas, processamento de sinais e saídas.EntradasAs entradas, ou inputs, são sensores eletrônicos ou mecânicos que tomam os sinais (em forma de temperatura, pressão, umidade, contato, luz, movimento, ph, etc.) do mundo físico e converte em sinais de corrente ou voltagem. Exemplos de entradas são botões, sensores de gás, temperatura, pulsadores, fotocélulas, potenciômetros, sensores de movimento, e muitos mais.Processamento de sinaisO processamento de sinal é realizado mediante circuitos conhecidos como microcontroladores. São circuitos integrados construídos para manipular, interpretar e transformar os sinais de voltagem e corrente vindos dos sensores (entradas) e ativar determinadas ações nas saídas.SaídasAs saídas, ou outputs, são atuadores, ou outros dispositivos que convertem os sinais de corrente ou voltagem em sinais fisicamente úteis como movimento, luz, som, força ou rotação, entre outros.Exemplos de saídas são motores, LEDs ou sistemas de luzes que acendem automaticamente quando escurece ou um buzzer que gere diversos tons.Sinais eletrônicosOs sinais podem ser digitais, que assumem apenas 2 valores, ou analógicos, que por sua vez assumem uma escala de valores.Sinais digitaisTambém chamadas de variáveis discretas, se caracterizam por ter dois estados diferentes e portanto também podem ser chamadas de binárias (em lógica seria valores Verdadeiro (V) e Falso (F), ou poderiam ser 1 ou 0 respectivamente). Um exemplo de um sinal digital é o interruptor da campainha da sua casa, porque ele tem somente dois estados, pulsado e sem pulsar.Entradas e saídas digitaisSinais analógicosSão aquelas que podem tomar um número infinito de valores compreendidos entre dois limites. A maioria dos fenômenos da vida real são sinais deste tipo (som, temperatura, luminosidade, etc.). Um exemplo de sistema eletrônico analógico é de um palestrante, que se preocupa em amplificar o som da sua voz para que seja escutado por uma grande audiência. As ondas de som que são analógicas na sua origem são capturadas por um microfone e convertidas em uma pequena variação analógica de tensão, denominada sinal de áudio.Entradas e saídas analógicasPrincipais componentes eletrônicosResistoresResistência elétrica é a capacidade de um corpo qualquer se opor à passagem de corrente elétrica mesmo quando existe uma diferença de potencial aplicada. É medida em ohms (Ω).Resistores são componentes que têm por finalidade oferecer uma oposição à passagem de corrente elétrica, através de seu material. A essa oposição damos o nome de resistência elétrica. Causando assim uma queda de tensão no circuito elétrico, por limitar a corrente.Utilizando-se disso, é possível usar os resistores para controlar a tensão sobre os componentes desejados.Os resistores possuem um código de cores os quais podemos identificar os valores de resistência:CapacitoresO capacitor é um dos componentes mais importantes para os equipamentos digitais, pois sua função é armazenar carga elétrica (bit 1) ou não armazenar (bit 2). Trata-se de duas placas de material condutor isoladas por um material chamado de dielétrico Ele pode ser encontrado, segundo encapsulamento: Eletrolítico, Cerâmico, Poliester.Cada capacitor possui uma grandeza chamada de capacitância, onde define a quantidade de cargas que podem ser armazenadas.DiodosO diodo é um componente eletrônico semicondutor, que permite a condução da corrente elétrica somente em um único sentido. Através da simbologia do diodo é possível identificar a sua polaridade e o sentido da corrente elétrica, como está indicado na imagem a seguir:O diodo é um componente eletrônico semicondutor, que permite a condução da corrente elétrica somente em um único sentido. Através da simbologia do diodo é possível identificar a sua polaridade e o sentido da corrente elétrica, como está indicado na imagem a seguir:TransistoresO transistor é um dos componentes eletrônicos principais na construção de computadores e outros equipamentos digitais. Trata-se de um elemento constituído de três camadas de materiais semicondutores sendo essas NPN ou PNP.A aplicação desse componente em equipamentos digitais é quando o mesmo é configurado para funcionar como uma chave. Quando existe corrente elétrica aplicada na base, o transistor permite a passagem de corrente do coletor para emissor. Na ausência, de corrente na base, o mesmo abre o circuito, impedindo assim a passagem de corrente elétrica do coletor para emissor.FusívelO fusível é um componente aplicado para a segurança o mesmo possui um fio de cobre ou estanho que, ao ser percorrido por uma corrente acima do permitido (sobrecorrente), queima, ou funde, abrindo o circuito e evitando que essa sobrecorrente acabe danificando outros componentes.MicrocontroladoresUm microcontrolador é um circuito integrado programável, capaz de executar as ordens gravadas em sua memória.Um microcontrolador possui em seu interior três unidades funcionais principais: unidade central de processamento, memória e periféricos de entrada e saída.Os microcontroladores se diferenciam dos processadores pois, além dos componentes lógicos e aritméticos usuais de um microprocessador de uso geral, o microcontrolador integra elementos adicionais em sua estrutura interna, como: memória de leitura e escrita para armazenamento de dados, memória somente de leitura para armazenamento de programas, EEPROM para armazenamento permanente de dados, dispositivos periféricos como conversores analógico/ digitais (ADC), conversores digitais/analógicos (DAC) em alguns casos; interfaces de entrada e saída de dados.São geralmente utilizados em automação e controle de produtos e periféricos, como sistemas de controle de motores automotivos, controles remotos, máquinas de escritório e residenciais, brinquedos, sistemas de supervisão, etc.Por reduzir o tamanho, custo e consumo de energia, e se comparados à forma de utilização de microprocessadores convencionais, aliados a facilidade de desenho de aplicações, juntamente com o seu baixo custo, os microcontroladores são uma alternativa eficiente para controlar muitos processos e aplicações.Referências Conceitos de eletricidade Componentes eletrônicos. Manual da eletrônica Diodo e a sua aplicação. Manual da eletrônica Apresentação sobre Sistemas Informáticos Apostila de Montagem e Instalação de Sistemas Informáticos. Governo do Estado do Ceará Apostila de Noções de Robótica do curso de Informática. Governo do Estado do Ceará Simulador de circuitos eletrônicos online Tinkercad Vídeo sobre o Tinkercad - Circuito Simples com lâmpada, Voltímetro e Amperímetro. Canal do YouTube do Professor Renato Vídeo sobre Simulação de circuitos - Aula 01- Conhecendo o Tinkercad Circuits. Canal do YouTube do Leonardo Drews Montibeller" }, { "title": "Equipamentos de proteção elétrica", "url": "/aulas/posts/equipamentos-de-protecao-eletrica/", "categories": "AULAS 2022, MONTAGEM E INSTALAÇÃO DE SISTEMAS", "tags": "eletricidade, proteção", "date": "2022-08-18 19:00:00 -0300", "snippet": "Problemas mais comuns que ocorrem na rede de energia são o pico e a queda de tensão. Mas para evitar esses problemas temos alguns formas equipamentos de proteção elétrica.Filtro de linhaO filtro de...", "content": "Problemas mais comuns que ocorrem na rede de energia são o pico e a queda de tensão. Mas para evitar esses problemas temos alguns formas equipamentos de proteção elétrica.Filtro de linhaO filtro de linha proporciona vária tomadas ligadas a um dispositivo de proteção, como um fusível ou um Dispositivo de Proteção de Surto (DPS). Ele também pode possuir um dispositivo eletrônico chamado Varistor, que ligado ao aterramento funciona como um resistor em operação normal, mas em caso de um surto conduz o pico de energia para o aterramento, protegendo assim suas tomadas.Imagem: Filtro de Linha com DPS 7,5 kA 100-240 Vca EmbrastecDispositivo de proteção de Surto de tomadaO Dispositivo de proteção de Surto de tomada - DPS de tomada, também faz uso do Varistor para proteger a tomada em que está ligado. Ele precisa de um aterramento lidado na tomada para escoar os pico de energia e proteger efetivamete a tomada.EstabilizadoresPara prevenir o pico de energia e quedas de tensão, devemos utilizar um estabilizador de voltagem, que tem não só a função de reter o excesso de energia, deixando passar somente o que o computador precisa para funcionar, mas de evitar as pequenas quedasrepentinas.Problemas esse que o pico de tensão causa quando o aumento da carga normal, que causa danos irreparáveis ao computador, como a queima de componentes.Lembre-se que assim como a fonte de alimentação seletor de voltagem o estabilizador também poderá conter.Aqui é mostrada a visão traseira do estabilizador com algumas informações úteis na hora de ligar.NoBreaksEm muitos casos também enfrentamos um problema muito comum que é a queda de tensão, esse problema pode não parecer grave ao computador, mas na maioria dos casos pode ser tão prejudicial quanto um pico de tensão, pois a diminuição de energia acarreta o desligamento da fonte ou prejudica os componentes do computador, por forçá-los a trabalharcom menos energia de que necessita.Para acabar com esse problema, utilizamos um aparelho chamado no-break, que em alguns casos tem a mesma cara que o estabilizador, mas com a diferença de possuir uma bateria interna. Ao cair a energia, essa bateria mantém o computador ligado, garantindo, por determinado tempo, a alimentação elétrica dos equipamentos.Um nobreak de 600 VA consegue manter um computador ligado por aproximadamente 20 minutos. O mais interessante é que na ausência de energia, ele consegue trocar rapidamente para a energia da bateria sem deixar os aparelhos ligados nele desligarem ou sofrerem algum tipo de baixa, assim quando ele detecta a presença de energia na tomada o mesmo faz o inverso e mantendo o funcionamento normal e alimentando o que foi perdido de carga na bateria, logo aqui está o esquema de como isso ocorre.Dependendo da potência e das baterias do nobreak ele pode suportar até mais tempo ligado na ausência de corrente elétrica, um nobreak de 4 Kva pode chegara quatro horas de autonomia.Alguns nobreaks utilizam como bateria externa baterias de automotivas ou de maior desempenho do que as baterias normais.Hoje há também nobreaks inteligentes, capazes de alertar o usuário sobre a autonomia restante da bateria e o mais importante de salvar arquivos e fechar programas adequadamente. Isso acontece porque o nobreak é ligado ao computador por um cabo serialou USB que transmite um sinal para um programa específico com informações sobre o mesmo. Geralmente esses tipos de nobreaks são bem mais caros que os convencionais.Referências Os 5 Melhores Filtros de Linha em 2022 Tudo sobre nobreak: o que é, vantagens, proteções e muito mais - Intelbras Apostila Montagem e Instalação de Sistemas Informáticos. Governo do Estado do Ceará" }, { "title": "Dispositivos de proteção elétrica", "url": "/aulas/posts/dispositivos-de-protecao-eletrica/", "categories": "AULAS 2022, MONTAGEM E INSTALAÇÃO DE SISTEMAS", "tags": "eletricidade, proteção", "date": "2022-08-17 19:00:00 -0300", "snippet": "Para que o computador funcione sabemos que ele precisa de energia elétrica. Mas quando essa rede sofre algum tipo de interferência, fica impossível de manter o computador funcionando adequadamente....", "content": "Para que o computador funcione sabemos que ele precisa de energia elétrica. Mas quando essa rede sofre algum tipo de interferência, fica impossível de manter o computador funcionando adequadamente. Por isso devemos conhecer um pouco sobre a rede elétrica a fim de evitar uma série de problemas.Dependendo da região a tomada tem uma tensão de 110 volts (símbolo: V) ou 220, que realidade não expressa exatamente esse valor. Se utilizarmos um equipamento de teste tipo um multímetro, por exemplo, veremos que a tomada de 110V mede em torno de 127V.Isso é absolutamente normal. Porém, durante o teste, pode-se perceber que há uma variação constante de energia. Isso é porque a tomada tem uma corrente alternada ou ACV, ou seja, ela tem uma variação normal para funcionamento. Essa variação deve ocorrerporque se tivéssemos um valor constante de 127V, por exemplo, certamente a energia elétrica não chegaria a nossas casas. Ela simplesmente se dissiparia ao das centenas de quilômetros de cabos e fios, desde a usina geradora até nossas casas ou empresas.Você pode usar o multímetro para saber qual tensão que existe no momento na tomada onde deseja ligar o seu computador ou qualquer outro aparelho.Sabendo-se que uma tomada tem variações constantes de tensão, ela pode apresentar variações anômalas, decorrentes de possíveis interferências na rede elétrica que poderão surgir por sobrecarga da rede. Raios, aparelhos de ar condicionado, que têmconsumo muito grande de energia e que usam termostato, forno de micro-ondas, etc. São fatores que interferem na rede elétrica, afetando seu fluxo na rede, prejudicando muito o bom funcionamento da fonte de alimentação do computador.ATERRAMENTOPara o bom funcionamento do computador, devemos estar atentos à existência de um aterramento na tomada. Pode não parecer mais o aterramento é vital para o bom funcionamento não só do computador, mas também de qualquer equipamento que exija(geladeira, micro-ondas, televisor, DVD player etc.).O aterramento consiste em uma haste de cobre de aproximadamente 1m de comprimento, fincada ao chão e conectada por um cabo que vai da haste à tomada do computador.Disjuntor Termo Magnético DTMOs disjuntores são dispositivos que tem a função de proteger as instalações elétricas, desligando a energia automaticamente em caso de curtos-circuitos e sobrecargas.Um curto-circuito acontece quando “fios” energizados com cargas elétricas opostas se tocam. Isto causa um aumento repentino e extremo de temperatura, que pode facilmente iniciar um incêndio.Já a sobrecarga ocorre, por exemplo, quando ligamos muitos equipamentos em uma mesma tomada, isso pode causar um aquecimento excessivo, também com potencial de causar incêndios.Além de proteger, os disjuntores também permitem ligar e desligar manualmente a instalação, ou parte dela, quando for preciso realizar alguma manutenção na rede elétrica, como trocar lâmpadas, por exemplo.Como funciona o disjuntor?Internamente, o disjuntor possui dois mecanismos de proteção: um para curtos-circuitos e outro para sobrecargas.A proteção contra curtos-circuitos é oferecida por uma bobina (fio enrolado sobre um núcleo). Esse arranjo funciona como um eletroímã: quando ocorre um curto-circuito, a corrente elétrica atinge valores muito altos, suficientes para criar um campo eletromagnético forte o suficiente para acionar o mecanismo de desligamento dos contatos.Já a proteção contra sobrecargas é provida por um elemento bimetálico, composto por duas lâminas de metais diferentes que ficam sobrepostas. Quando ocorre uma sobrecarga, esse elemento aquece e dilata, sofrendo uma alteração na curvatura. Esse movimento dispara o mecanismo de desligamento dos contatos.Tipos de disjuntoresEm geral, os disjuntores comerciais mais comuns são termomagnéticos, e construídos de acordo com as normas técnicas NEMA ou DIN.No Brasil, os modelos NEMA são cada vez menos utilizados, devido a vários motivos, principalmente à sua baixa eficiência.Já os modelos DIN utilizam uma tecnologia mais moderna, que proporciona alta eficiência na proteção e um tamanho compacto, quando comparados aos disjuntores padrão NEMA.A proteção oferecida pelos disjuntores somente será eficaz se estes dispositivos forem especificados corretamente. E para isto, temos que considerar, no mínimo, os seguintes requisitos:1) Curva de atuação. Esta característica depende do circuito que será protegido. As mais comuns são as curvas B e C. Curva B são utilizados em circuitos com cargas resistivas. Por exemplo: aquecedores, chuveiros, fornos e torneiras elétricas. Curva C são indicados para cargas indutivas e motores, além dos circuitos de tomadas de uso geral e específico. Portanto, são apropriados para aparelhos de ar condicionado, máquinas de lavar roupas, fornos micro-ondas, circuitos de iluminação, entre outros.2) Número de polos. É definido de acordo com o número de condutores fase do circuito a ser protegido. Em geral, os disjuntores podem ser: Monopolares. Também conhecidos como disjuntores unipolares ou disjuntores monofásicos, são utilizados em circuitos de iluminação e tomadas com fase e neutro, onde ligam e desligam apenas a fase, pois o neutro aterrado não representa perigo. Bipolares. Os modelos bipolares, também conhecidos como disjuntores duplos ou bifásicos, são utilizados com frequência em chuveiros elétricos e outros circuitos energizados com duas fases, pois nesse caso, precisam ser interrompidas simultaneamente. Tripolares. Os disjuntores tripolares ou trifásicos são utilizados em circuitos alimentados com três fases, geralmente em redes de 220V ou 380V, permitindo ligar e desligar todas através de uma só alavanca.3) Corrente nominal (“amperagem”). Em geral, são encontrados modelos de 4A até 63A. O valor ideal é escolhido de acordo com a capacidade do equipamento ou circuito a ser protegido e a bitola (“grossura”) dos cabos (fios) utilizados. Por exemplo, em certas condições, um circuito de iluminação pode utilizar um disjuntor de 3A, para proteger um cabo de 1,5mm2. Já no caso de um chuveiro, é comum o uso de disjuntores de 40A, para proteger cabos de 6mm2.4) Capacidade de interrupção. Podemos dizer que é o “tamanho do curto-circuito” que o disjuntor consegue desligar com segurança. Nos modelos residenciais, normalmente é de 3000A (3KA). Porém existem capacidades maiores, para utilização nos projetos elétricos que assim necessitarem.Também é importante saber que a especificação dos disjuntores deverá ser feita por profissionais qualificados, seguindo um projeto elétrico com base na norma ABNT NBR 5410 (Instalações elétricas de baixa tensão), para assegurar que os requisitos mínimos de proteção sejam atendidos.Diferencial Residual (DR)É o nome genérico do dispositivo que desliga a energia elétrica automaticamente quando houver uma fuga de corrente elétrica para a terra. Os modelos de alta sensibilidade têm a função principal de [proteger as pessoas contra choques elétricos. No comércio, geralmente são encontrados dois tipos de diferenciais residuais: IDR - Interruptor diferencial residualDesliga automaticamente a energia quando a corrente de fuga atingir um valor perigoso. DDR - Disjuntor diferencial residualDesliga automaticamente a energia quando a corrente de fuga atingir um valor perigoso e também quando houver um curto-circuito ou sobrecarga. Segundo a norma ABNT NBR 5410, o uso dos diferenciais residuais é obrigatório em alguns circuitos elétricos. Geralmente nas áreas que podem ser molhadas (internas e externas). É recomendado não utilizar um DR único para toda a instalação, pois nesse caso, quando desligar, será difícil saber em qual parte do circuito está o problema. Além de proteger as pessoas contra choques elétricos, alguns DRs são exclusivos para proteger o patrimônio. Eles evitam desperdícios de energia e previnem incêndios por falhas de isolação.Dispositivo de proteção contra surtos (DPS) A função dos DPS é proteger os equipamentos eletroeletrônicos ligados à instalação contra os surtos elétricos, geralmente causados por descargas atmosféricas. Eles atuam desviando os surtos de tensão para a terra, evitando que cheguem até os equipamentos, minimizando assim seus efeitos prejudiciais. Para seu pleno funcionamento, é necessário que exista um sistema de aterramento eficiente.São dois os tipos mais comuns de DPS encontrados no comércio: DPS Classe 2 - São normalmente instalados nos quadros de distribuição de energia, onde ficam os disjuntores e os diferenciais residuais. DPS Classe 3 - São utilizados como proteção complementar contra os surtos para um ou mais equipamentos específicos, sendo ligados próximos a eles.Referência Disjuntores - Margirius Como dimensionar os disjuntores - Saber Elétrica Aplicação do Interruptor Diferencial Resisidual - IDR - Saber Elétrica Instalação do Interruptor Diferencial Resisidual - IDR - Saber Elétrica Instalação do Dispositivo de Proteção contra Surto - DPS - Saber Elétrica Apostila Montagem e Instalação de Sistemas Informáticos. Governo do Estado do Ceará" }, { "title": "Conhecendo o Linux", "url": "/aulas/posts/conhecendo-o-linux/", "categories": "AULAS 2022, SISTEMAS OPERACIONAIS LIVRES", "tags": "linux, devops", "date": "2022-08-15 18:00:00 -0300", "snippet": "O Linux é um dos sistema operacionais mais populares e é amplamente utilizado pelo segmento de servidores e desenvolvedores de software.O Kernel do LinuxInicialmente a comunidade internacional de d...", "content": "O Linux é um dos sistema operacionais mais populares e é amplamente utilizado pelo segmento de servidores e desenvolvedores de software.O Kernel do LinuxInicialmente a comunidade internacional de desenvolvedores criou, em 1985 o projeto GNU, para e disponibilizar software gratuitamente, podendo ser usado por qualquer empresa com as seguintes liberdades: de copiá-lo e dá-lo a seus amigos e colegas; de modificar o programa como você desejar, por ter acesso total ao código-fonte; de distribuir versões melhoradas e, portanto, ajudar a construir a comunidade.Então depois de ter desenvolvidos os principais componentes do Sistema Operacional, foi anexado o kernel do Linux - que é quem interage com o hardware, que havia começado a ser desenvolvido por Linus Torvalds, em 1991, quando estava na faculdade em Helsinki, na Finlândia, inspirado no Unix, outro sistema operacional criado nos anos 70.Apesar de ser gratuito o Kernel do Linux é mantido por uma fundação de empresas - Linux Fundation.Vantagens do LinuxDentre as principais vantagens do Linux podemos destacar: Gratuito Instalação simples Comunidade de desenvolvedores ativa Liberdade de customização SegurançaInteração com o usuárioExistem softwares para interagir com Kernel, que podem ser feitas de duas maneiras:Ambiente gráficoExistem uma grande variedade de interfaces gráficas para o usuário (GUI) do Linux. Dentre elas destacam-se: KDE - (K Desktop Environment) GNOME (GNU Network Object Model Environment) Unity - interface padrão do Ubuntu Cinnamon - derivada (Fork) do Gnome Mate - possui grande versalidade de configurações da interface gráfica sendo uma continuação do Gnome2; XFCE - indicada para hardware com poucos recursos ou de baixa configuração; LXDE - foi desenvolvido para funcionar bem em computadores lentos e de baixa performance e para sistemas simplificados como netbooks e outros computadores pequenos (Raspberry Pi, Orange Pi e etc).Linha de comandoEm ambiente de servidores podemos interagir remotamente através de comandos, que podem ser organizados em forma de lista, chamada de script, para serem executados em lote, automatizando seu uso.Através do terminal de comandos podemos executar programas de uma forma mais direta e refinada, utilizando parâmetros de execução.Distribuições do LinuxUma distribuição é um pacote que consiste no Kernel do Linux, um ambiente gráfico, e mais uma coleção de aplicativos mantidos por uma comunidade de desenvolvedores ou uma empresa. Seu objetivo é otimizar a utilização para um determinado tipo de uso ou grupo de usuários.Exemplos de distribuições mais populares: Debian - focado em usuário final e facilidade de uso Ubuntu - baseado no Debian Red Hat - focado em servidores Fedora - versão gratuíta baseado no Red Hat Suse - focado em sistema corporativoSistemas embarcados LinuxSistemas embarcados são uma combinação de hardware e software projetados para cumprir uma função específica em algum dispositivo.Suas maiores aplicações são: Android - para dispositivos móveis; Veículos - proporcionando menus de navegação multimídia; Smart TVs - navegação multimídia e aplicativos; Smart watches - navegação em relógio; Aplicações médicas; Aplicações militares; Microcomputadores como o Raspberry Pi.Diferença entre desktop e servidorO modelo cliente servidor é uma estrutura de aplicação que distribui tarefas e cargas de trabalho entre os fornecedores de serviços e recursos de comunicação, que são designados servidores, e os requerentes destes serviços, chamados de clientes.Máquinas virtuais em grandes servidores podem executar esses servidores na nuvem, para atender os clientes em desktops de uso pessoal.Para cada tipo de uso existe um tipo de versão de sistema operacional, servidores podem executar banco de dados, enquanto que desktops podem executar pacotes de aplicativos gráficos e de escritório.Ambiente virtual VirtualBoxFigura: Ubuntu desktop no VirtualBox.O VirtualBox é um software opensource que simula um computador onde podem ser instalados os sistemas operacionais em um ambiente virtual, com podemos usar mais de um sistema operacional simultaneamente, e assim testar programas de diversos sistemas sem afetar o sistema hospedeiro.Instalação do LinuxFigura: Ubuntu studio em ubuntu.com/desktop/flavoursExistem diversos tipos de versões do Linux para as mais diversas finalidades e tipos de usuários e de hardware. Dentre as mais populares destacam-se as versões do Ubuntu no seu site de downloads.Dentre as versões disponíveis podemos encontrar: Ubuntu server - para servidores; Ubuntu cloud - para servidores em ambientes virtuais; Ubuntu flavours - versão desktop para diversos tipos de usuários, tipos de hardware e aplicações específicas; Ubuntu for IoT - para dispositivos e para operar na nuvem; Alternative - versões alternativas.Referências Linux Fundation Interfaces graficas do Linux. Certificação Linux Ubuntu Linux. Certificação Linux História do projeto GNU Introducao ao sistema operacional Linux. Bootcamp Linux Experience. Digital Inovation One Virtualbox porque utilizar. E-tinet Slide de Trabalho sobre Linux Exercícios sobre Linux" }, { "title": "Conceitos de Eletricidade", "url": "/aulas/posts/conceitos-de-eletricidade/", "categories": "AULAS 2022, MONTAGEM E INSTALAÇÃO DE SISTEMAS", "tags": "eletricidade, proteção", "date": "2022-08-14 19:00:00 -0300", "snippet": "A matéria que existe na natureza é constituída por elementos chamados de átomos, que vem do grego e significa indivisível, e sua estrutura de modelo foi proposta pelo físico inglês Lorde Ernest Rut...", "content": "A matéria que existe na natureza é constituída por elementos chamados de átomos, que vem do grego e significa indivisível, e sua estrutura de modelo foi proposta pelo físico inglês Lorde Ernest Rutherford, ela mostra que o mesmo se assemelha a uma miniatura de Sistema Solar, onde os elétrons (planetas) giram em torno do núcleo (Sol), que é constituído de prótons e nêutrons. Fonte: infoescola.com1Cargas elétricas Em volta desse núcleo gira um número variável de partículas de carga elétrica negativa – os elétrons – que realizam milhões de rotações por segundo.O núcleo positivo – prótons – atrai os elementos negativos, impedindo que eles saiam de suas órbitas.É importante saber que, em condições normais, o número de elétrons em torno de um núcleo é sempre igual ao número de prótons desse núcleo, havendo, portanto, equilíbrio de cargas elétricas.É possível, porém, retirar ou acrescentar elétrons aos átomos de um corpo. Quando isso acontece, passa a existir uma diferença de cargas elétricas no átomo.2 Íon - ocorre quando um átomo perde ou recebe elétrons; Cátion - é um íon positivo se o átomo ficar com falta de elétrons; Ânion - é um íon negativo se o átomo ficar com excesso de elétrons;Medidas elétricasCorrente Quando um átomo está ionizado, sua tendência é voltar ao estado de equilíbrio. Evidentemente, um corpo eletrizado tende a perder sua carga, libertando-se dos elétrons em excesso, ou procurando adquirir os elétrons que lhe faltam. Conclui-se, então, que basta unir corpos com cargas elétricas diferentes para que se estabeleça um fluxo de elétrons. Corrente elétrica - é a medida do fluxo de elétrons em Ampéres (A). Amperímetro é o aparelho de medida de corrente elétrica.Submúltiplos do Ámpere: Microampére (∝A) Miliampére (mA) Ampére (A) Quiloampére (kA) 6 500 000 6 500 6,5 0,0065 8 800 000 8 800 8,8 0,0088 11 700 000 11 700 11,7 0,0117 500 000 000 500 000 500 0,5 3 000 000 000 3 000 000 3 000 3 5 000 5 0,005 0,000005 108 000 000 000 108 000 000 108 000 108 Fluxo da corrente: A corrente contínua é assim chamada por permanecer em um só sentido, onde os elétrons partem, convencionalmente, do polo negativo para o positivo. A corrente alternada é a corrente gerada pela concessionária de Energia que chega até as nossas casa nas tomadas. Nesse tipo de corrente, os não existe uma polaridade definida invertendo assim o sentido do fluxo de elétrons. Condutância (G) é a facilidade que a corrente elétrica encontra, ao percorrer os materiais. Resistência (R) é a dificuldade que a corrente elétrica encontra ao percorrer um material.Voltagem Nos fios, existem partículas invisíveis chamadas elétrons livres, que estão em constante movimento de forma desordenada.Para que estes elétrons livres passem a se movimentar de forma ordenada, nos fios, é necessário haver uma força que os empurre. A esta força é dado o nome de tensão elétrica (U).É também chamada de Diferença de Potencial(DDP), por ser resultado da união de cargas diferentes, geralmente positivo e negativo, ligadas por um circuito elétrico. Voltagem elétrica - uma grandeza que é capaz de produzir o movimento de um elétron de um determinado ponto a outro, medida em Volt (V). O Voltímetro é o aparelho de medida de tensão elétrica.Potência elétrica Potência é definida como sendo o trabalho efetuado na unidade de tempo. Assim como a potência hidráulica é dada pelo produto do desnível energético pela vazão, a potência elétrica, para um circuito com resistência, é obtida pelo produto da tensão V pela corrente elétrica I: 3P = V * I Sua unidade de medida é o Watt (W), quando usamos tensão contínua; Sua unidade é o Volt-Ampére (VA), quando usamos tensão alternada; O Watímetro é o aparelho de medida de potência.Potência aparenteÉ a potência total entregue à carga quando trabalhamos com tensão alternada, pois ocorre uma resistência magnética. Ela é composta por duas parcelas: Potência ativa (W)- é a parcela efetivamente transformada em outras formas de potência; Potência reativa (VAR)- é a parcela transformada em campo magnético, necessário por exemplo ao funcionamento de motores, transformadores e reatores. Este tipo de energia não gera trabalho nenhum ( desperdício ). Logo, é uma energia que não consumimos mas pagamos. Fator de potência (fp)- medido pelo ângulo fi (φ) é uma relação entre a potência aparente e a potência ativa, ele pode ser muito baixo ou muito alto, sendo necessário realizar sua correção, usando um banco de capacitores (valor baixo) ou de indutores (valor alto).Referências Cálculo das partículas atômicas. Mundo da Educação Apostila Montagem e Instalação de Sistemas Informáticos. Governo do Estado do Ceará Como calcular potência elétrica em watts? Mundo da elétrica Disjuntor! Quais os tipos de disjuntores e aplicações. Mundo da elétrica Como dimensionar o disjuntor geral. Mundo da elétrica Como calcular o consumo de energia em kwh. Portal Solar Ambiente adequado para a manutenção Exercícios de energia elétrica. Brasil escola Átomo. InfoEscola &#8617; Elementos de Eletrotécnica Aplicada à Instalação Elétrica V1. SESI SENAI - Rio de Janeiro, 2002. &#8617; Eletrotécnica. Departamento Regional do SENAI - Curitiba - PR. &#8617; " }, { "title": "Vantagens do WiFi", "url": "/aulas/posts/vantagens-dowifi/", "categories": "AULAS 2022, MEIOS DE COMUNICAÇÃO", "tags": "redes, meios", "date": "2022-08-10 21:00:00 -0300", "snippet": "As Redes Sem Fio, ou Redes Wireless, onde wire significa cabo e less significa ausência.Tipos básicos de Redes WirelessRede sem infra-estruturaPrincipal topologia sem infra-estrura:Principal arquit...", "content": "As Redes Sem Fio, ou Redes Wireless, onde wire significa cabo e less significa ausência.Tipos básicos de Redes WirelessRede sem infra-estruturaPrincipal topologia sem infra-estrura:Principal arquitetura sem infra-estrura:Rede com infra-estruturaPrincipal topologia com infra-estrutura:Principal arquitetura com infra-estrutura:Desvantagens do WiFiAtenuação do sinalÀ medida que vamos nos distanciando da fonte transmissora, o sinal também vai diminuindo ou atenuando. Um sinal fraco pode fazer com que a informação se perca ou se embaralhe com os ruídos gerados por outros elementos no ambiente.Podem causar atenuação os obstáculos como: Paredes Montanhas Edifícios Aparelhos com blindagemInterferência eletromagnética Este problema também ocorre em redes cabeadas, mas ele causa danos maiores ainda nas redes sem fio. Vários outros aparelhos trabalham na mesma banda de frequência de algumas redes sem fio. Por exemplo, as redes Wi-Fi, que são as LANs sem fio, utilizam protocolos como o 802.11b, que utiliza para transmissão a faixa de frequência de 2,4GHz, que é a mesma usada por aparelhos detelefones sem fio e fornos de microondas.Assim é de se esperar um aparelho interfira no funcionamento do outro. Outro grande problema são outros roteadores nas proximidade transmitindo no mesmo canal de frequência.Custo de implantação Para implantar uma rede wireless deve-se considerar um custo maior que na implantação de uma rede cabeada, pois as placas e demais equipamentos com essa tecnologia são mais caros. Entretanto, a manutenção da rede sem fio custa bem menos tempo e dinheiro, se comparada a uma rede com fio.Comparativo WiFi X cabeamento:Vantagens do WiFiTabela comparativa Redes sem infra-estrutura com infra-estrutura Mobilidade dentro do alcance: dos hosts da estação-base Configuração: rápida e simples padronizada e centralizada Conectividade: direta através da estação base Escalabilidade: limitada ao host configuração padronizada hosts são conectados facilmente Comunicação: entre os hosts em grupo Compartilhamento: arquivos serviços e aplicações Custo: menor maior mas dependendo do tamanho da rede Gráfico comparativoflowchart TBsubgraph Vantagens do WiFi direction LR P{Redes WiFi &lt;br/&gt;sem infra-estrutura &lt;br/&gt;ou com infra-estrutura} --&gt;|Sem infra-estrutura| S(Redes Ad-hoc &lt;br/&gt; Bluethooth) S -.- S1&gt;Mobilidade dentro do alcance &lt;br/&gt;Seus hosts se conectam entre si] S --&gt; S2&gt;Configuração rápida &lt;br/&gt;podem ser estabelecidas dinamicamente] S --&gt; S3&gt;Conectividade &lt;br/&gt;Conexão direta com o destino] S --&gt; S4&gt;Coordenação de equipes em campo] S --&gt; S5&gt;Tolerância à falhas: A permanente adaptação e &lt;br/&gt;reconfiguração das rotas permitem que &lt;br/&gt;perdas de conectividade entre os nós possam ser &lt;br/&gt; facilmente resolvidas desde que uma nova rota possa &lt;br/&gt; ser estabelecida] P --&gt; |Com infra-estrutura| C(WiFi com &lt;br/&gt;estação base) C -.- C1&gt;Mobilidade dentro do alcance &lt;br/&gt;seus hosts se conectatam a uma estação base] C --&gt; C2&gt;Escalabilidade = novos hosts recebem a configuração &lt;br/&gt;e são integrados à rede] C --&gt; C3&gt;Facilidade de Instalação&lt;br/&gt;Padronização de configuração] C --&gt; C4&gt;Facilidade de Manutenção&lt;br/&gt;Controle e gerenciamento centralizado] C --&gt; C5&gt;Compartilhamento de serviços e aplicações] C --&gt; C6&gt;Comunicação de grupo]endReferênciaApostila da disciplina de Redes de Computadores. Secretaria da Educação do Ceará." }, { "title": "Simulador de redes", "url": "/aulas/posts/simulador-de-redes/", "categories": "AULAS 2022, SOFTWARES DE APLICAÇÃO", "tags": "simulador, redes", "date": "2022-08-09 20:00:00 -0300", "snippet": "O Cisco Packet Tracer é um programa educacional gratuito que permite simular uma rede de computadores.O programa apresenta uma interface gráfica simples, e possibilita ao estudante de redes: a vis...", "content": "O Cisco Packet Tracer é um programa educacional gratuito que permite simular uma rede de computadores.O programa apresenta uma interface gráfica simples, e possibilita ao estudante de redes: a visualização do ambiente de rede para a criação, configuração e solução de problemas a criação e visualização da transmissão de pacotes virtuais através da rede criada em tempo real desenvolver habilidades para solução de problemas potenciais criar e configurar complexas topologias de redes permite que o estudante treine seus conhecimento em uma grande variedade de protocolosComo utilizar Acessar a Academia da Cisco em netacad.com. Se cadastrar e fazer o download do Packet Tracer. Se inscrever em cursos. Praticar as simulações.Versão atualNovo lançamento! Cisco PacketTracer 8.2 📣As atualizações da nova versão incluem:✅ Novos comandos✅ Melhorias de acessibilidade✅ Aprimoramentos de segurança ✅ Correções de bugs e muito maisA plataforma Skills for All da Cisco disponibiliza o curso Introdução ao Cisco Packet Tracer em português, GRATUITO.Acessar a inscrição para o curso de introduçãoReferências Paket Tracer BR download Cursos - Cisco Skills for all netacad.com = A Academia Cisco Network proporciona cursos e o download do aplicativo. Blog labcisco = Proporciona artigos e exemplos de treinamento. Livro Construindo Simulações" }, { "title": "Sistemas numéricos", "url": "/aulas/posts/sistemas-numericos/", "categories": "AULAS 2022, MONTAGEM E INSTALAÇÃO DE SISTEMAS", "tags": "numérico, binário", "date": "2022-08-09 19:00:00 -0300", "snippet": "Os sistemas numéricos, são usados para definir e representar quantidade de dados.Sua representação é definida de acordo com uma base específica. Por exemplo, o sistema que usamos hoje chamamos de d...", "content": "Os sistemas numéricos, são usados para definir e representar quantidade de dados.Sua representação é definida de acordo com uma base específica. Por exemplo, o sistema que usamos hoje chamamos de decimal, pois todo e qualquer número pode ser representado por 10 símbolos diferentes, sendo 10 a base.Sistema BinárioÉ o sistema em que os números são representados por 2 algarismos (0 ou 1). Ex: 0, 1, 01, 10, 11, etc.Conversão Binário para DecimalDado o número binário B = b4 b3 b2 b1 b0,esse número é representado na base decimal emD = b4 * 24 + b3 * 23 + b2 * 22 + b1 * 21 + b0 * 20,veja o exemplo a seguir:Exemplo: Converta 110012 para decimal11001 2 = 1*24 + 1*23 + 0*22 + 0*21 + 1*20= 1*16 + 1*8 + 0*4 +0*2 +1*1= 16 + 8 + 0 + 0 +1= 25110012 = 2510Conversão Decimal para BinárioPara converter um número em base decimal para binário, basta fazer divisões sucessivas por 2, e armazenar os valores dos restos inteiros (0 ou 1) e o último quociente possível. Veja o exemplo:Exemplo: Converta 12310 para binárioSistema HexadecimalO sistema hexadecimal possibilita expressar valores numéricos utilizando 16 algarismos: 0,1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.Conversão Hexadecimal para DecimalDado o número Hexadecimal H = h4 h3 h2 h1 h0 , esse número é representado na base decimal em:D = h4 * 164 + h3 * 163 + h2 * 162 +h1 * 161 + h0 * 160 ,veja o exemplo a seguir:Exemplo: Converta A3416 para decimalA3416 = A*162 + 3*161 + 4*160= A*256 + 3*16 + 4*1= 10*256 + 48 + 4= 2560 + 52A3416 = 261210Conversão Decimal para HexadecimalPara converter um número em base decimal para hexadecimal, basta fazer divisões sucessivas por 16, e armazenar os valores dos restos inteiros (0,1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E ou F) e o último quociente possível. Veja o exemplo:Exemplo: Converta 246810 para hexadecimal246810 = 9A416Conversão Binário para HexadecimalPara converter um valor em binário para Hexadecimal, basta agrupá-los em 4 dígitos e inserir o valor correspondente aos mesmos em hexadecimal com o auxílio da tabela. Veja o exemplo:Exemplo: Converta 1010101100012 para Hexadecimal Binário 1010 1011 0001 Hexadecimal A B 1 1010101100012 = AB116Conversão de Hexadecimal para BinárioPara converter um valor em Hexadecimal para Binário, devemos separar cada digito individualmente e inserir seu valor correspondente em binário com o auxílio da tabela. Veja o exemplo:1010101100012 = AB116 Hexadecimal 8 2 A F 9 Binário 1000 0010 1010 1111 1001 82AF916 = 100000101010111110012ReferênciaConversor online" }, { "title": "Funções do Sistema Operacional", "url": "/aulas/posts/funcoes-do-sistema-operacional/", "categories": "AULAS 2022, SISTEMAS OPERACIONAIS LIVRES", "tags": "linux, devops", "date": "2022-08-08 21:00:00 -0300", "snippet": "A principal função do Sistema Operacional é gerenciar recursos, tais como os usuários, as memórias para os arquivos e o hardware com os dispositivos de entrada e saída, os aplicativos, a comunicaçã...", "content": "A principal função do Sistema Operacional é gerenciar recursos, tais como os usuários, as memórias para os arquivos e o hardware com os dispositivos de entrada e saída, os aplicativos, a comunicação em rede, etc.O gerenciamentoUma das principais funções do Sistema Operacional é gerenciar recursos, sejam os dispositivos de Entrada e Saída (E/S) ligados ao computador, os componentes de hardware e aplicativos de software, os usuários, a comunicação em rede, etc.É tarefa do sistema operacional enviar sinais, informando as ações que o usuário espera que o dispositivo realize; tratar as interrupções e erros gerados pelos dispositivos.A interfaceO sistema operacional é uma interface para interação do usuário e aplicativos e com o hardware. O Sistema Operacional trabalha mediando a comunicação entre dois elementos básicos do uso de um sistema computacional. De um lado nós temos o Hardware com sua complicada linguagem de máquina e emaranhados tecnológicos, do outro lado nós temos você, o ser humano. E servindo de interface entre você e todo este hardware tem o Sistema Operacional.Principais conceitosEstudaremos termos como Processos, Núcleo (Kernel), Interpretador de Comandos (Sheel), Chamadas de Sistemas (system calls), Endereçamento de Memória, Memória Virtual e Entrada e Saída.Processos Programa - série de comandos - instruções elaboradas por um programador; Processo - programa em uma fila de execução do processador;Durante toda execução de um processo ele pode mudar constantemente de estado de acordo com as circunstâncias, mais as mudanças não são aleatórias e muito menos acontecem a qualquer momento. Vejamos as quatro possíveis mudanças dos estados de processo:Note no gráfico acima que o processo quando em espera nunca volta para o estado de Execução e quando o processo está em estado de Pronto ele não retorna para estado de Espera logo, deduzimos que existem basicamente quatro mudanças de estado de um processo.Núcleo KelnelO núcleo (ou Kernel em inglês) é a parte central do Sistema Operacional na maioria dos computadores, ele que fica em contato direto com o Hardware da máquina.Podemos observar que os aplicativos interagem diretamente com o núcleo e este, faz a gerência destes processos com o hardware do computador.O interpretador de comandos ShellA nossa interação com os programas é feita pelo Interpretador de Comandos. Quando clicamos no botão fechar - é o interpretador de comandos que manda a informação solicitada via mouse para que todos os procedimentos relativos a esta ação seja feita.Vale ressaltar que o Interpretador de Comandos não faz parte do Sistema Operacional ele emite um processo que cumprirá a ação solicitada pelo usuário e, quando o processo é finalizado o Interpretador de Comandos retorna ao usuário um ok e fica aguardando um novo comando.Chamadas do sistemaAs chamadas de sistema são micro processo enviados pelos programas para o SO com instruções de funcionamento. Então, enquanto o shell é responsável pela interface entre o usuário e o SO, as chamadas de sistema são responsáveis pela interação entre os programas (aplicativos) com o núcleo (kernel).Outro fato importante é que as Chamadas de Sistema varia de acordo com o SO, com certeza o do MS-DOS é diferente do Windows que é diferente do Linux que tem suas particularidades frente ao UNIX e assim sucessivamente.Elas são responsáveis por: Chamar o gerenciamento de arquivos. Chamar o gerenciamento de diretórios. Chamar o gerenciamento de processos. Fazer a interação entre processos.Memória virtualOs SO mais modernos tem a capacidade de gerenciar vários programas na memória principal ao mesmo tempo, para evitar problemas e conflitos, cada processo tem um espaço na memória para armazenar seu endereço. Este espaço pode ir de 0 até uma quantidade máxima que pode ser de 32 bits ($2^{32}$) ou de 64bit ($2^{64}$) de acordo com a arquitetura do computador.Os SO utilizam de uma técnica conhecida de Memória Virtual quando um endereço de memória excede a capacidade máxima da memóriaprincipal, isso consiste em armazenar estes endereços na memória secundária - o disco rígido. Alguns Sistemas Operacionaisreservam este espaço automaticamente, no linux ela conhecida como Swap.ReferênciaApostila de Sistemas Operacionais. Secretaria de Educação do Estado do Ceará." }, { "title": "Tipos de Redes de Computadores", "url": "/aulas/posts/Tipos-de-redes/", "categories": "AULAS 2022, MEIOS DE COMUNICAÇÃO", "tags": "redes, meios", "date": "2022-08-05 15:00:00 -0300", "snippet": "As redes de computadores se diferenciam em formas de transmissão, arquitetura, topologia e escopo de abrangência.Tipos de Transmissão de DadosPara que haja comunicação são necessários os seguintes ...", "content": "As redes de computadores se diferenciam em formas de transmissão, arquitetura, topologia e escopo de abrangência.Tipos de Transmissão de DadosPara que haja comunicação são necessários os seguintes elementos: Transmissor: é o dispositivo (computador, telefone, câmera) que envia a informação. Receptor: é o dispositivo a quem foi endereçada a informação. O receptor vai receber a mensagem enviada pelo transmissor. Mensagem: são os dados e as informações que precisam ser enviados. Meio: é o meio físico, ou seja, o caminho pelo qual a mensagem trafegará do transmissor até chegar ao receptor. Protocolo: controla o envio e recepção da mensagem e define alguns aspectos como formato da mensagem e ordem de chegada. Tanto o transmissor quanto o receptor devem estar seguindo o mesmo protocolo.Para que a comunicação de dados obtenha sucesso ela necessita de três atributos: Entrega: os dados devem estar endereçados corretamente. Deve-se ter a certeza de que a informação será entregue ao destinatário correto. Confiabilidade: os dados devem chegar ao destino, e mais do que simplesmente chegar, os dados devem estar intactos, sem nenhum tipo de alteração e sem faltar nenhuma parte da informação. Controle do Atraso: o tempo que a informação possui para chegar ao destino não pode ser indeterminado. Deve haver um tempo limite para que o destinatário a receba, principalmente no caso de aplicações multimídia em tempo real como áudio e vídeo. Não seria interessante, por exemplo, ao receber um vídeo, ver primeiro as imagens e só depois ouvir o áudio.Taxa de transmissãoAo se transmitir um arquivo, seja ele de que tipo for, pela rede, na realidade estão sendo transmitidos vários bits que, em conjunto, comporão o arquivo depois de processados. A taxa de transmissão de uma rede é a velocidade com a qual esses bits trafegam pelos meios de comunicação e é medida em bps (bits por segundo), ou seja, a quantidade de bits que são enviados em um segundo, portanto quanto maior a taxa de transmissão de uma rede, mais rápido o arquivo consegue ser transmitido do emissor para o receptor.Modos de operaçãoapostila de Meios de Comunicação da SeducExistem três tipos de operação na transmissão de dados: simplex, half-duplex e full-duplex. Vejamos como funciona cada uma delas: Simplex: a transmissão é unidirecional. Só existe um transmissor e um canal de transmissão. Quaisquer outros componentes que apareçam na comunicação serão receptores. Exemplos: televisão e radiodifusão. Half-duplex: a transmissão é bidirecional, ou seja, as duas partes transmitem e também são receptoras, mas, assim como no modo simplex, existe somente um canal de transmissão, portanto só é possível transmitir um por vez. Exemplo: walkie-talkie. Full-duplex: é o modo de transmissão mais completo, já que ambas as partes podem transmitir e receber dados simultaneamente, pois existem dois canais de transmissão. Exemplo: telefone.Arquitetura de redes de computadoresREDES PONTO-A-PONTOapostila de Meios de Comunicação da SeducExistem 2 tipos fundamentais de redes. O primeiro tipo é a rede ponto-a-ponto, onde os computadores são ligados entre si para a troca de informações, porém a maioria dos recursos não pode ser compartilhada fazendo com que cada host deva possuir os próprios recursos e aplicações como um programa, por exemplo. HOST: Palavra inglesa que significa hospedeiro.Em informática, um host é um computador ou outro equipamento conectado na rede e que pode compartilhar informações, serviços e recursos.REDES CLIENTE-SERVIDORapostila de Meios de Comunicação da SeducO segundo tipo é a arquitetura cliente-servidor, onde todos os hosts, chamados de clientes, se comunicam com uma máquina principal, chamada de servidor. O servidor provê todas as aplicações e serviços e consegue gerenciar o acesso aos recursos da rede como impressoras, por exemplo. Neste tipo de arquitetura os hosts não trocam informações entre si de uma forma direta.Cada cliente se comunica com o servidor e este devolve respostas atendendo as requisições de cada um. Por exemplo, em um servidor de banco de dados, o cliente pode acessar a aplicação (programa) e alterar um dado. Esta alteração será feita no servidor. Caso outro cliente acesse a aplicação, ele já verá o dado alterado, pois está buscando a informação diretamente no servidor.Normalmente um servidor é uma máquina mais robusta que as máquinas clientes, pois ela armazena e processa um grande número de informações, além de precisar estar sempre ligada para que haja tráfego de informações na rede.Topologia de redesA topologia de uma rede nada mais é do que a forma como se define o layout da rede, ou como se organiza estruturalmente os computadores, dispositivos de rede e suas conexões. Uma topologia pode física ou lógica.A topologia física é como os computadores e dispositivos se encontram fisicamente, configurando uma espécie de desenho que é caracterizado pela disposição dos equipamentos. A topologia lógica é a forma como os dados trafegam na rede, logo, uma rede pode obedecer a uma determinada topologia apenas de forma lógica, não sendo necessário que os equipamentos estejam organizados deacordo com a topologia física. Há varias formas de se estruturar uma rede, veja as principais:Escopo de abrangência de redesA abrangência de alcance das redes de caracterizam em: LAN – Rede Local interliga computadores presentes dentro de um mesmo espaço físico. MAN – Rede Metropolitana, abrangem bairros ou uma cidade. WAN – A Wide Area Network, ou Rede de Longa Distância, abrange um país ou até mesmo um continente. WLAN – Rede Local Sem Fio. WMAN – Rede Metropolitana Sem Fio, é a versão sem fio da MAN, com um alcance de dezenas de quilômetros. WWAN – Rede de Longa Distância Sem Fio, alcança diversas partes do mundo. Justamente por isso, a WWAN está mais sujeita a ruídos. SAN – Rede de Área de Armazenamento, são utilizadas para fazer a comunicação de um servidor e outros computadores. PAN – Rede de Área Pessoal, de curtas distâncias mais utilizadas por periféricos.Referência Apostila da disciplina de Redes de Computadores" }, { "title": "Planejamento de Sistemas Operacionais livres", "url": "/aulas/posts/sistemas-operacionais-livres/", "categories": "AULAS 2022, SISTEMAS OPERACIONAIS LIVRES", "tags": "linux, planejamento", "date": "2022-08-04 09:00:00 -0300", "snippet": "Apresentar os conceitos práticos na utilização de sistemas operacionais livres analisando a estrutura de funcionamento das principais distribuições do mercado com ênfase na distribuiçãoUbuntu.Plane...", "content": "Apresentar os conceitos práticos na utilização de sistemas operacionais livres analisando a estrutura de funcionamento das principais distribuições do mercado com ênfase na distribuiçãoUbuntu.Planejamento Conceituar os sistemas operacionais (visão geral); Conhecer as principais distribuições Linux existentes no mercado (distribuições de base); Conhecer os pré-requisitos de hardware para instalação do Linux; Praticar a instalação do sistema operacional Linux na distribuição Ubuntu; Configurar o sistema operacional Ubuntu no pós-instalação (modo gráfico); Entender a estruturação de diretórios Linux baseado na distribuição Ubuntu; Operar com os principais comandos Linux através do terminal (ambiente de comandos); Capacitar o aluno a instalar, configurar e resolver problemas apresentados pelo sistema operacional Ubuntu.Avaliações Práticas no laboratório Instalação do Sistema Operacional Ubuntu Avaliações globais Avaliação global 1 Avaliação global 2 Conteúdo programático Visão geral de sistema operacional O sistema operacional como gerente de uma máquina Distribuições Linux Distribuições de base Interfaces gráficas usadas Como escolher uma distribuição Linux Requisitos de hardware para instalação do Linux Arquitetura Processamento Armazenamento Memória Preparando o dispositivo para instalação do Ubuntu Como preparar o dispositivo inicializável: Rufus e Yumi Instalando o sistema operacional Linux Ubuntu em uma máquina virtual Iniciando a instalação: Tela de boas vindas: Experimentar ou instalar o Ubuntu Escolha do layout do teclado Atualizações e outros softwares Tipo de instalação (Ponto de montagem, particionamento, sistemas de arquivos) Pós-instalação: Configurando o Ubuntu no modo gráfico Instalando programas através do Ubuntu Software Configuração de rede (cabeada e sem fio) através da central de configuração Criação de usuário através da central de configuração Gerenciamento de impressoras Programa e atualizações Estrutura de diretórios linux Organização geral de diretórios e arquivos Visão geral do Shell e o terminal Linux Entendendo o Shell Criação do superusuário (root) com o sudo passwd Como trabalhar com linhas de comandos Linux no terminal Buscando ajuda através de comandos (man e info) Manipulando arquivos com os comandos: cd, ls, pwd mkdir, rm e touch cp, mv e rename locate e find Compactar arquivos e diretórios com: gzip, tar cat, pipe Editores de texto: gedit, nano, VI e VIM Controle de usuários com: adduser e userdel Comandos chown e chmod Instalando programas com: dpkg e apt Comandos de rede: hostname, arp, ifconfig netstat, traceroute Comandos de sistema: arch, lsdev, lspci, lsusb, df top, ps, pstree, kill reboot, power off e shutdown Referências Aulas anteriores de Sistemas Operacionais Guia do Linux UNIRIO Guia do Linux iniciante e intermediário Guia do Linux avançado Comandos equivalentes entre DOS/CMD do Windows e o Linux Command line reference Escopo de aula - acesso restrito a professores Cronograma de aula - acesso restrito a professores Kanban de planejamento da disciplina Dúvidas e sugestões" }, { "title": "Planejamento de Meios de Comunicação de Dados", "url": "/aulas/posts/meios-de-comunicacao/", "categories": "AULAS 2022, MEIOS DE COMUNICAÇÃO", "tags": "redes, meios, planejamento", "date": "2022-08-02 09:00:00 -0300", "snippet": "As redes de computadores vieram para revolucionar a forma como nos comunicamos principalmente no que diz respeito à velocidade no repasse de informações, as comunicações em redes de dados eram gera...", "content": "As redes de computadores vieram para revolucionar a forma como nos comunicamos principalmente no que diz respeito à velocidade no repasse de informações, as comunicações em redes de dados eram geradas a partir de hosts fixos, ligados à rede através de cabos, hoje, tanto para voz quanto para dados temos a opção de transmiti-los usando ondas de radiofrequência. A forma como transmitimos e recebemos dados são o assunto de meios de comunicação de dados.Planejamento FASE I: Redes Sem Fio Apresentar os tipos de Redes sem fio Elencar vantagens e desvantagens do WiFi Diferenciar as redes sem fio Conhecer sobre radiofrequência Conhecer os tipos de ondas Conhecer sobre frequência e comprimento de ondas Entender o espectro eletromagnético Entender o comportamento das ondas Conhecer e entender as redes Bluetooth Conhecer e entender as redes Wi-Fi Conhecer os padrões do protocolo 802.11 Configurar uma rede Wi-Fi com roteador Conhecer os algoritmos de criptografia Conhecer e entender as redes WiMAX Conhecer os tipos de antenas Apresentar os conectores e cabos Apresentar os modelos de antenas FASE II: Acesso Remoto Apresentar os sistemas de redes. Definir uma rede virtual privada Conhecer os elementos de uma VPN Apresentar as vantagens e desvantagens de uma VPN Identificar os principais equipamentos de acesso remoto Conhecer os mecanismos de segurança de um acesso remoto Instalar ferramentas de acesso remoto Configurar ferramentas de acesso remoto Automatizar a instalação em computadores clientes Compartilhar arquivos. Avaliações Atividade Práticas no laboratório com simulador de redes Packet Tracer Curso da Cisco: Explorando Redes Curso da Cisco: Configurando uma rede com WiFi Avaliações globais Avaliação global 1 Avaliação global 2 Referências Apostila da disciplina de Redes de Computadores. Secretaria da Educação do Ceará. Packet Tracer BR download Curso da Cisco: Conceitos básicos de redes Aulas anteriores de Meios de Comunicação Kanban de planejamento da disciplina Dúvidas e sugestões" }, { "title": "Planejamento de Softwares de aplicação", "url": "/aulas/posts/softwares-de-aplicacao/", "categories": "AULAS 2022, SOFTWARES DE APLICAÇÃO", "tags": "softwares, planejamento", "date": "2022-08-01 09:00:00 -0300", "snippet": "Explorar as possibilidades dos softwares de aplicação segundo as condições e critérios, através da utilização de estudos de caso.Planejamento Apresentação da Disciplina, introdução aos Softwares d...", "content": "Explorar as possibilidades dos softwares de aplicação segundo as condições e critérios, através da utilização de estudos de caso.Planejamento Apresentação da Disciplina, introdução aos Softwares de redes; Software de simulação de redes; Softwares de gerenciamento de redes: Packet Tracer; Software de ecaneamento de WiFi: WiFiman. Softwares de mapeamento e monitoramento de redes: The Dude manual, minicurso, download. Softwares de gerenciamento e monitoramento de redes; Softwares de monitoramento de redes: Zabbix. Softwares abordados: Packet Tracer - Simulador de redes; LabCisco Wireshark - Sniffer de rede; WiFiman - scanner de rede WiFi; The Dude - Mapeamento e monitoramento da rede; Zabbix - monitoramento de infraestrutura de rede; Wireless Network Watcher - Mapeamento da rede Networx - Monitoramento do tráfego da rede Simple Port Forwarding - Configuração de Roteadores Iperf - Medidor de tráfego na rede; Nagios - Monitoramento e administração de redes Centreon - monitoramento e administração de redes Opennms - monitoração de serviços de redes; Avaliações Seminários Seminários sobre os aplicativos Avaliações globais Avaliação global 1 Avaliação global 2 Referências Apostila Montagem e Instalação de Sistemas Informáticos. Governo do Estado do Ceará Aulas anteriores de Softwares de aplicação Kanban de planejamento da disciplina Dúvidas e sugestões" }, { "title": "Planejamento de Montagem e Instalação de Sistemas Informáticos", "url": "/aulas/posts/montagem-e-instalacao/", "categories": "AULAS 2022, MONTAGEM E INSTALAÇÃO DE SISTEMAS", "tags": "montagem, planejamento", "date": "2022-08-01 09:00:00 -0300", "snippet": "Conhecer a competência de analisar a arquitetura e o funcionamento de um sistema informático de acordo com as condições, critérios e necessidades encontradas.Planejamento Apresentação Sistemas nu...", "content": "Conhecer a competência de analisar a arquitetura e o funcionamento de um sistema informático de acordo com as condições, critérios e necessidades encontradas.Planejamento Apresentação Sistemas numéricos Conceitos de eletricidade Componentes elétricos e proteção Componentes eletrônicos Modos de transmissão Conceitos do sistema informático A história e evolução dos computadores Overclock e atualizações O ambiente adequado para montagem O Gabinete para montagem Fonte de alimentação Instalando a placa-mãe Tipos de processadores: Intel, AMD Instalação do processador Instalação dos pentes de memória Tipos de conexões de cabos Instalação de drivers de HDD e DVD-ROM Instalação de placas de expansão Alimentação do pc Ligando o computador após a montagem O boot do sistema - BIOS ou UEFI Problemas comuns na inicializaçãoAvaliações Práticas no laboratório: Orçamento de montagem: Monte seu PC - meupc.net Reconhecimento de ferramentas básicas Reconhecimento de peças do computador Reconhecimento de componentes da placa-mãe Avaliações globais Avaliação global 1 Avaliação global 2 Conteúdo programático INTRODUÇÃO (CONCEITOS) Eletricidade, Tensão Elétrica, Corrente Elétrica, Componentes Elétricos, Sistemas Numéricos, Conversões Numéricas, Clock, Modos de Transmissão. O AMBIENTE ADEQUADO PARA A MONTAGEM. Definição do Local, cuidados com eletrostática, Aterramento, Instalação de um aterramento, Aterramento eficiente, Problemas gerados por Mau aterramento. O GABINETE PARA A MONTAGEM Modelos de Gabinete, Conhecendo o gabinete, Desmontagem e montagem FONTE DE ALIMENTAÇÃO Características e Padrões, Tensões Elétricas, Desempenho e Eficiência, Conectores, Teste da Fonte. INSTALANDO A PLACA-MÃE Componentes e Características, Formatos Diferentes, Visão Geral, Marcas modelos e fabricantes, Pré-Montagem e Teste da Placa-mãe, Montagem da Placa-mãe, Finalização e Teste. INSTALAÇÃO DO PROCESSADOR RISC e CISC, ARM, Velocidades, Escolhendo o processador para compra, Manutenção e instalação de processadores, Inserindo o processador na placa INSTALAÇÃO DOS PENTES DE MEMÓRIA RAM Marca, modelo, fabricante, Conteúdo da Embalagem e cuidados iniciais, Dual Channel, Finalização de Instalação e Teste. CONEXÃO DOS CABOS E COMUNICAÇÃO DO GABINETE COM A PLACA-MÃE Manual de Instalação da Placa-mãe, Conexão do Painel Frontal, USB Frontal, Áudio Frontal. INSTALAÇÃO DO HDD Identificação IDE e SATA, Master Slave e Cable Select, Configuração dos Jumpers, Atualidades. INSTALAÇÃO DO DRIVE DE CD-RW Identificação IDE e SATA, Configuração do Driver, Fixação no Gabinete, Atualidades. INSTALAÇÃO DO FDD Instalação e Fixação no Gabinete, Instalação do Leitor de Cartões. INSTALANDO PLACAS DE EXPANSÃO Identificação dos Slots de Expansão, Placa de Vídeo, Instalação da Placa de Vídeo, Placa de Fax/Modem, Placa de Som, Placa de Rede ou Ethernet, Placa de Rede Wireless. ORGANIZAÇÃO INTERNA DO GABINETE ALIMENTAÇÃO DO PC Conexões Elétricas, Estabilizadores, NOBREAKS, Aterramento. CONEXÕES DOS CABOS EXTERNOS Identificação dos Periféricos. LIGANDO O COMPUTADOR APÓS A MONTAGEM Verificando se tudo está ligado corretamente, Erros comuns e Imagens Iniciais. Referências Apostila Montagem e Instalação de Sistemas Informáticos. Governo do Estado do Ceará Aulas anteriores de Montagem e Instalação de Sistemas Informáticos Eixo: informação e comunicação - acesso restrito a professores Kanban de planejamento da disciplina Dúvidas e sugestões" }, { "title": "Estrutura condicional", "url": "/aulas/posts/estrutura-condicional/", "categories": "DESENVOLVIMENTO, LÓGICA", "tags": "lógica, diagrama", "date": "2022-07-20 15:00:00 -0300", "snippet": "As decisões de um programa são avaliadas por expressões comparativas e lógicas, que direcionam o fluxo de execução conforme o resultado.Expressões comparativasSão aquelas que comparam uma coisa com...", "content": "As decisões de um programa são avaliadas por expressões comparativas e lógicas, que direcionam o fluxo de execução conforme o resultado.Expressões comparativasSão aquelas que comparam uma coisa com outra e seu resultado dá um valor verdadeiro ou falso.graph LR A[expressão] --&gt;|resultado| B(valor verdade) C[5 &gt; 10] --&gt;|resultado| D(Falso) Operador Significado &gt; maior &lt; menor &gt;= maior ou igual &lt;= menor ou igual == igual != diferente Exemplos: x = 5 resultado x &gt; 0 V x == 3 F 10 &lt;= 30 V x != 2 V Expressões lógicasSão também expressões que avaliadas dão um valor lógico verdadeiro ou falso, elas podem ter outras expressões que utilizam operadores lógicos: Operador significado &amp;&amp; E || OU ! NÃO Exemplos: x = 5 resultado x &lt;= 20 &amp;&amp; x == 10 F x &lt;= 20 V x == 10 F x &gt; 0 &amp;&amp; x != 3 V x &gt; 0 V x != 3 V x &lt;= 20 || x == 10 V !(x == 10) V Tabela verdade A B A &amp;&amp; B A || B !A F F F F V F V F V V V F F V F V V V V F ConceitoÉ uma estrutura de controle que permite definir que um certo bloco de comandos somente será executado dependendo de uma condição.graph TD A{condição} --&gt;|V| B(bloco 1) A{condição} --&gt;|F| D(bloco 2)Sintaxe da estrutura condicionalSimplesif ( condição ) { comando 1 ; comando 2 ;}Compostaif ( condição ) { comando 1 ; comando 2 ;}else { //senão comando 1 ; comando 2 ;}Exemplo:graph TD AA(Início) --&gt; BB[hora = 5] --&gt; CC[/Quantas horas?/] --&gt; A{hora&lt;12} --&gt;|V| B[/Bom dia!/] A --&gt;|F| D[/Boa tarde!/] --&gt; F(( )) B--&gt; F(( )) --&gt; FF(fim)import java.util.Scanner;public class Main{ public static void main(String[] args) { Scanner sc = new Scanner(System.in); int hora = 5; System.out.println(\"Quantas horas?\"); hora = sc.nextInt(); if (hora &lt; 12 ) { System.out.println(\"Bom dia!\"); } else { System.out.println(\"Boa tarde!\"); } //System.out.println(\"Boa noite!\"); sc.close(); }}ExercícioFazer um programa para ler duas notas em seguida mostrar a nota final (com uma casa decimal), caso a nota seja menor que 12 mostrar a mensagem “REPROVADO”, conforme o exemplo:Digite a primeira nota: 6.0Digite a segunda nota: 5.0NOTA FINAL = 11.0REPROVADOSolução:import java.util.Locale;import java.util.Scanner;public class Main { public static void main(String[] args) { Locale.setDefault(Locale.US); Scanner sc = new Scanner(System.in); double nota1, nota2, notafinal; System.out.print(\"Digite a primeira nota: \"); nota1 = sc.nextDouble(); System.out.print(\"Digite a segunda nota: \"); nota2 = sc.nextDouble(); notafinal = nota1 + nota2; System.out.printf(\"NOTA FINAL = %.1f\\n\", notafinal); if (notafinal &lt; 12.0) { System.out.println(\"REPROVADO\"); } sc.close(); }}Referências IDE java online Exemplos de códigos em Java Editor de diagramas O que é um fluxograma Equality, Relational, and Conditional Operators - Java docs" }, { "title": "Referência de formatação em Markdown", "url": "/aulas/posts/referencia-de-markdown/", "categories": "DESENVOLVIMENTO, MARKDOWN", "tags": "web, github, estilo, markdown", "date": "2022-05-15 17:05:00 -0300", "snippet": "Markdown é um estilo de texto na web. Você controla a exibição do documento; formando palavras como negrito ou itálico adicionar imagens e cria listas, etc.Editor onlineTítulos# Título 1## Subtítul...", "content": "Markdown é um estilo de texto na web. Você controla a exibição do documento; formando palavras como negrito ou itálico adicionar imagens e cria listas, etc.Editor onlineTítulos# Título 1## Subtítulo nível 2### Subtítulo nível 3Formatação_Italico_**Negrito****_Italico e negrito_**Links: [Texto do link](https://jocile.com/) Listas:* Item 1* Item 2* Item 3Imagens Imagens:Inline-style: ![alt text](https://github.com/adam-p/markdown-here/raw/master/src/common/images/icon48.png \"Logo Title Text 1\")Reference-style: ![alt text][logo]Código`Código` em linha tem `áspas ao redor`. ```Blocos de código são envoltas por linhas com três áspas ```, ou são identadas com quatro espaços. ```Tabelas| Tabelas | são | legais || ------------------ | :---------------------: | -----: || col 3 é | alinhada para à direita | $1600 || col 2 is | centralizada | $12 || listras das zebras | são legais | $1 |Devem haver ao menos 3 hifens ('-') separando cada célula do cabeçalho.As barras externas (`|`) são opcionais e você não precisa fazer as células em Markdown estarem bem alinhadas.| Markdown | menos | bonito || -------- | ----------- | ------- || _ainda_ | `renderiza` | **bem** || 1 | 2 | 3 | Tabelas são legais col 3 é alinhada para à direita $1600 col 2 is centralizada $12 listras das zebras são legais $1 Markdown menos bonito ainda renderiza bem 1 2 3 Citações&gt; Citações são muito úteis em em email para emular respostas textuais.&gt; Esta linha faz parte da mesma citação. Citações são muito úteis em em email para emular respostas textuais.Esta linha faz parte da mesma citação.Referências Handbook Markdown Guide Markdown and Visual Studio Code Referência da syntaxe markdown na UFRGS Referência da syntaxe markdown no firebal Referência da syntaxe markdown no GitHub Markdown Cheatsheet criando um readme bonitao para o seu github" }, { "title": "Desenvolvimento em java web com frameworks", "url": "/aulas/posts/Desenvolvimento-em-Java-web-com-frameworks/", "categories": "DESENVOLVIMENTO, JAVA", "tags": "spring, tutorial, programação", "date": "2021-09-19 18:00:00 -0300", "snippet": "O Spring Boot é um projeto da Spring que veio para facilitar o processo de configuração e publicação de nossas aplicações. A intenção é ter o seu projeto rodando o mais rápido possível e sem compli...", "content": "O Spring Boot é um projeto da Spring que veio para facilitar o processo de configuração e publicação de nossas aplicações. A intenção é ter o seu projeto rodando o mais rápido possível e sem complicação.Ele consegue isso favorecendo a convenção sobre a configuração. Basta que você diga pra ele quais módulos deseja utilizar (WEB, Template, Persistência, Segurança, etc.) que ele vai reconhecer e configurar.Você escolhe os módulos que deseja através dos starters que inclui no pom.xml do seu projeto. Eles, basicamente, são dependências que agrupam outras dependências. Inclusive, como temos esse grupo de dependências representadas pelo starter, nosso pom.xml acaba por ficar mais organizado.Apesar do Spring Boot, através da convenção, já deixar tudo configurado, nada impede que você crie as suas customizações caso sejam necessárias.O maior benefício do Spring Boot é que ele nos deixa mais livres para pensarmos nas regras de negócio da nossa aplicação.Conceitos de desenvolvimento web com JavaSistema cliente e servidorCom o avanço da tecnologia sobre redes de computadores e com o crescimento da internet, as páginas web estão se tornando cada vez mais atraentes e cheias de recursos que aumentam a interatividade com o usuário.Quando falamos em aplicações web, estamos nos referindo a sistemas ou sites onde grande parte da programação fica hospedada em servidores na internet, e o usuário (cliente) normalmente não precisa ter nada instalado em sua máquina para utilizá-las, além de um navegador (browser).O acesso às páginas desses sistemas é feita utilizando o modelo chamado de request- response, ou seja, o cliente solicita que alguma ação seja realizada (request) e o servidor a realiza e responde para o cliente (response).API de ServletsNa plataforma Java, esse modelo foi implementado através da Interface de Programação de Aplicação (API) de Servlets. Um Servlet estende a funcionalidade de um servidor web para servir páginas dinâmicas aos navegadores, utilizando o protocolo HTTP.No mundo Java, os servidores web são chamados de Servlet Container, pois implementam a especificação de Servlet. O servidor converte a requisição em um objeto do tipo HttpServletRequest. Este objeto é então passado aos componentes web, que podem executar qualquer código Java para que possa ser gerado um conteúdo dinâmico. Em seguida, o componente web devolve um objeto HttpServletResponse, que representa a resposta ao cliente. Este objeto é utilizado para que o conteúdo gerado seja enviado ao navegador do usuário.ContainersContainers são interfaces entre componentes e funcionalidades de baixo nível específicas de uma plataforma. Para que uma aplicação web desenvolvida em Java ou um componente corporativo ser executado, eles precisam ser implantados em um container.Os containers também são chamados de servidores de objetos, ou servidores de aplicação, pois oferecem serviços de infra-estrutura para execução de componentes.Por exemplo: o EJB Container suporta Enterprise JavaBeans (EJB), que são componentes corporativos distribuídos. Os Servlets, JSP, páginas JSF e arquivos estáticos (HTML, CSS, imagens e etc) necessitam de um Web Container para ser executado.Existem diversas organizações que desenvolvem containers Java EE, por exemplo: Oracle, IBM, Red Hat, Apache, etc. Apesar de tantas ofertas gratuitas, algumas empresas ainda vendem licenças de seus próprios servidores, pois oferecem suporte diferenciado ao cliente e normalmente implementam funcionalidades que os servidores gratuitos talvez não possuam.Apache TomcatUm exemplo de container (servidor de aplicações) é o Apache Tomcat, que é leve, gratuito e muito popular.O processo de instalação do Apache Tomcat é simples, basta descompactar o arquivobaixado no local desejado.Para verificar se a instalação foi bem sucedida, no Windows, acesse o diretório bin e execute o arquivo startup.bat para iniciar o servidor. Você já deve ter a JDK (Java Development Kit) instalado em seu computador para executar este passo.No Linux ou Mac, acesse o diretório bin do Tomcat e digite:$ chmod +x *.sh$ ./startup.sh; tail -f ../logs/catalina.outAbra um browser e acesse o endereço http://localhost:8080.Ferramentas BuildDurante o desenvolvimento de aplicações existem tarefas comuns e repetitivas que podemn ser automatizadas com ferramentas construtoras (build).Dentre elas podemos destacar: Estruturar arquivos fonte Uso de uma nova biblioteca Realização de testes Incompatibilidade entre IDEs Empacotamento e distribuição da aplicação Considerando todos esses cenários entre outros, percebemos que se trata de tarefas comuns em diversos projetos da atualidade, mas, ao mesmo tempo, vemos que são rotinas um tanto quanto trabalhosas, ainda mais se percebemos que que elas tendem a ser executadas constantemente.Pensando justamente no trabalho que temos nessas tarefas que não podemos simplesmente descartar, foram criadas algumas ferramentas que automatizam todos esses processos, essas ferramentas são conhecidas como build tools ou, no português bem forçado, ferramentas de construção.(FELIPE)1 As principais são:ANT – uma das primeiras mas ainda exigia muitas configurações manuais;Maven – é um gerenciador de projeto automatizado que se utiliza de repositórios de dependências. Apache MavenMaven é uma ferramenta da Apache Software Foundation para gerenciamento de dependências e automação de build, principalmente em projetos Java.Um projeto que usa Maven possui um arquivo XML (pom.xml) que descreve o projeto, suas dependências, detalhes do build, diretórios, plugins requeridos, etc. Este arquivo é conhecido como POM (Project Object Model).Persistência de dadosA maioria dos sistemas desenvolvidos em uma empresa precisa de armazenamento de dados, portanto persistência é um conceito fundamental no desenvolvimento de aplicações. Se um sistema de informação não preservasse os dados quando ele fosse encerrado, o sistema não seria prático e usual.Quando falamos de persistência de dados com Java, normalmente falamos do uso de sistemas gerenciadores de banco de dados relacionais e SQL, porém existem diversas outras alternativas para persistir dados, como em arquivos XML, arquivos texto e etc.Mapeamento Objeto Relacional (ORM)Mapeamento objeto relacional (object-relational mapping, ORM, O/RM ou O/R mapping) é uma técnica de programação para conversão de dados entre banco de dados relacionais e linguagens de programação orientada a objetos.EntidadesEm banco de dados, entidades são representadas por tabelas, que possuem colunas que armazenam propriedades de diversos tipos. Uma tabela pode se associar com outras e criar relacionamentos diversos.Em uma linguagem orientada a objetos, como Java, entidades são classes, e objetos dessas classes representam elementos que existem no mundo real. Por exemplo, um sistema de faturamento possui a classe NotaFiscal, que no mundo real existe e todo mundo já viu alguma pelo menos uma vez, além de possuir uma classe que pode se chamar Imposto, que infelizmente todo mundo sente no bolso. Essas classes são chamadas de classes de domínio do sistema, pois fazem parte do negócio que está sendo desenvolvido.Mapeamento Objeto RelacionalEm banco de dados, podemos ter as tabelas nota_fiscal e também imposto, mas a estrutura de banco de dados relacional está longe de ser orientado a objetos, e por isso o Mapeamento Objeto Relacional (ORM) foi inventado para suprir a necessidade que os desenvolvedores têm de visualizar tudo como objetos para programarem com mais facilidade.Podemos comparar o modelo relacional com o modelo orientado a objetos conforme a tabela abaixo: Modelo relacional Modelo Orientado a objetos Tabela Classe Linha Objeto Coluna Atributo - Método Chave estrangeira Associação Essa comparação é feita em todo o tempo que se está desenvolvendo usando algum mecanismo de ORM. O mapeamento é feito usando metadados que descrevem a relação entre objetos e banco de dados.Uma solução ORM consiste de uma API para executar operações CRUD simples em objetos de classes persistentes, uma linguagem ou API para especificar queries que se referem a classes e propriedades de classes, facilidades para especificar metadados de mapeamento e técnicas para interagir com objetos transacionais para identificarem automaticamente alterações realizadas, carregamento de associações por demanda e outras funções de otimização.Em um ambiente ORM, as aplicações interagem com APIs e o modelo de classes de domínio e os códigos SQL/JDBC são abstraídos. Os comandos SQL são automaticamente gerados a partir dos metadados que relacionam objetos a banco de dados.FrameworkUm Framework tem como principal objetivo resolver problemas recorrentes com uma abordagem genérica, promovendo a reuzabilidade e permitindo ao desenvolvedor focar seus esforços na resolução do problema em si, e não ficar reescrevendo software.Constituindo um conjunto de bibliotecas ou componentes que são usados para criar uma base onde sua aplicação será construída.Java Persistence API e HibernateA Java Persistence API (JPA) é um framework para persistência em Java, que oferece uma API de mapeamento objeto-relacional e soluções para integrar persistência com sistemas corporativos escaláveis.Com JPA, os objetos são POJO (Plain Old Java Objects), ou seja, não é necessário nada de especial para tornar os objetos persistentes. Basta adicionar algumas anotações nas classes que representam as entidades do sistema e começar a persistir ou consultar objetos.JPA é uma especificação, e não um produto. Para trabalhar com JPA, precisamos de uma implementação.O projeto do Hibernate ORM possui alguns módulos, sendo que o Hibernate EntityManager é a implementação da JPA que encapsula o Hibernate Core.O Hibernate Core é a base para o funcionamento da persistência, com APIs nativas e metadados de mapeamentos em arquivos XML. Possui uma linguagem de consultas chamada HQL (parecido com SQL), um conjunto de interfaces para consultas usando critérios (Criteria API), etc.Padrão MVCO padrão de projeto MVC (Model View Controller) torna o desenvolvimento de sistemas simplificado, separando o sistema em três responsabilidades (modelo, visualização e controle).Modeloo modelo é responsável por representar os objetos de negócio, manter o estado da aplicação e fornecer ao controlador o acesso aos dados.VisualizaçãoA visualização é responsável pela interface do usuário. Ela que define a forma como os dados são apresentados e encaminha as ações do usuário para o controlador.ControladorO controlador é responsável por ligar o modelo e a visualização, interpretando as solicitações do usuário, traduzindo para uma operação no modelo (onde são realizadas efetivamente as mudanças no sistema) e retornando a visualização adequada à solicitação.O Spring O Spring consiste em uma plataforma completa de recursos para construção deaplicativos Java, que veio para simplificar o desenvolvimento em Java EE comdiversos módulos que auxiliam na construção de sistemas reduzindo muito otempo de desenvolvimento. (BRITO)2Essa plataforma conta com recursos avançados que abrangem várias áreas de uma aplicação com projetos/módulos prontos para uso, como: Spring Framework; Spring Boot; Spring Web; Spring Security; Spring Data; Spring Batch; Spring Cloud; outros.Estes módulos prossibilitam implementar funcionalidades com uma maior produtividade, permitindo ao desenvolvedor focar nas regras de negócio, e delegar ao Spring as tarefas de configuração e implementação.Para conhecer todos os módulos disponíveis acesse: https://spring.io/projects.O Spring BootO Spring Boot é um framework que faz parte do ecosistema do framework Spring, que foi criado para facilitar o processo de configuração e publicação de aplicações. A intenção é ter o seu projeto funcionando o mais rápido possível e sem complicação. Ele consegue isso favorecendo a convenção sobre a configuração. Basta que você diga pra ele quais módulos deseja utilizar (WEB, Template, Persistência, Segurança, etc.) que ele vai reconhecer e configurar. Você escolhe os módulos que deseja através dos starters que inclui no pom.xml do seu projeto. Eles, basicamente, são dependências que agrupam outras dependências. Inclusive, como temos esse grupo de dependências representadas pelo starter, nosso pom.xml acaba por ficar mais organizado. Apesar do Spring Boot, através da convenção, já deixar tudo configurado, nada impede que você crie as suas customizações caso sejam necessárias. O maior benefício do Spring Boot é que ele nos deixa mais livres para pensarmos nas regras de negócio da nossa aplicação. (AFONSO)3Exemplo com SpringCriando Uma Aplicação Simples Com Spring MVCO que vamos precisar: Uma IDE, para nosso exemplo iremos utilizar o Eclipse. JDK 1.8 ou uma versão anterior. Maven.Criando o Projeto:Primeiro vamos acessar a página https://start.spring.io/ e vamos preencher os campos com as seguintes informações: Group: br.com.exemplo Artifact: meuprojeto Search for dependencies: Vamos selecionar Web e Thymeleaf.Agora vamos gerar nosso projeto clicando em Generate Project.Um arquivo meuprojeto.zip será baixado, trabalharemos com ele no próximo passo.Importando o Projeto: Extraia o conteúdo do arquivo meuprojeto.zip, baixado no passo anterior, para um diretório de sua preferência. Agora vamos abrir o Eclipse e importar o nosso projeto. Primeiro vamos escolher a opção Import Project Vá em File &gt; Import &gt; Maven &gt; Existing Maven Projects.Criando a Controller: Clique com o botão direito em cima do pacote br.com.exemplo e escolha New &gt; Package. Digite controller para o nome do pacote e clique em OK. Agora, com o botão direito, clique no novo pacote criado, escolha New &gt; Java Class. Digite ExemploController para o nome da classe e clique em OK.Nosso código do controller ficará assim:package br.com.exemplo.controller;import org.springframework.stereotype.Controller;import org.springframework.web.bind.annotation.GetMapping;@Controllerpublic class ExemploController { @GetMapping(\"/exemplo/pagina\") public String exemplo(){ return \"exemplo\"; }}Criando nossa página HTML:Clique com o botão direito em templates, vá até New &gt; HTML File.Digite exemplo para o nome e clique em OKO código da nossa página de exemplo ficará assim:&lt;!DOCTYPE html&gt;&lt;html lang=\"en\"&gt; &lt;head&gt; &lt;meta charset=\"UTF-8\" /&gt; &lt;title&gt;Exemplo&lt;/title&gt; &lt;/head&gt; &lt;body&gt; &lt;h1&gt;Página de exemplo&lt;/h1&gt; &lt;/body&gt;&lt;/html&gt;Executando nosso projeto: Clique com o botão direito em cima da classe MeuprojetoApplication.java depois em Run As java Application. Aguarde até que seja mostrado o log no console da sua IDE. Finalizado abra seu navegador e digite http://localhost:8080/exemplo/pagina.Para mais detalhes acesse: Criando Uma Aplicação Simples Com Spring MVC4ReferênciasProdutividade no desenvolvimento de aplicações web com Spring Boot. Algaworks. Disponível em https://cafe.algaworks.com/fn013-download-livro-spring-boot/. Acessado em 19 de setembro de 2021. FELIPE, Alex. Entenda o que são build tools do mundo Java. Medium, 2017. Disponível em https://medium.com/@alex.felipe/entenda-o-que-s%C3%A3o-build-tools-do-mundo-java-682a26e38ff2. Acessado em 20 de setembro de 2021. &#8617; BRITO, Michelli. Spring Boot da api rest aos microservices. 2021. Disponível em https://www.michellibrito.com/. Acessado em 19 de setembro de 2021. &#8617; AFONSO, Alexandre. O que é Spring Boot? Algaworks, 2017. Disponível em https://blog.algaworks.com/spring-boot/. Acessado em 19 de setembro de 2021. &#8617; SILVA, Diego Brener. Criando Uma Aplicação Simples Com Spring MVC. Coderef, 2017. Disponível em https://coderef.com.br/criando-uma-aplicação-simples-com-spring-mvc-b1e24273c90c. Acessado em 19 de setembro de 2021. &#8617; " }, { "title": "Diagrama de lógica", "url": "/aulas/posts/Diagrama-de-logica/", "categories": "DESENVOLVIMENTO, LÓGICA", "tags": "lógica, diagrama", "date": "2021-07-26 10:30:00 -0300", "snippet": "A lógica formal é a linguagem do pensamento, que pode ser desenvolvida matematicamente e na eletrônica.flowchart TBsubgraph Lógica direction LR A(Argumento) -.- A1&gt;Série conectada de proposiçõ...", "content": "A lógica formal é a linguagem do pensamento, que pode ser desenvolvida matematicamente e na eletrônica.flowchart TBsubgraph Lógica direction LR A(Argumento) -.- A1&gt;Série conectada de proposições que tem a &lt;br/&gt;intenção de dar razões para outra proposição] A --&gt; P(Premissas &lt;br/&gt;Proposições) P -.- P1&gt;Palavras ou símbolos que exprimem &lt;br/&gt;um pensamento de sentido completo] P --&gt; Su(Compostos por &lt;br/&gt; Sujeito + Predicado) Su --&gt; In{De forma &lt;br/&gt; Individual ou &lt;br/&gt;universal} Su --&gt; Af{Afirmam &lt;br/&gt;ou &lt;br/&gt;negam} P --&gt; V{Valor lógico &lt;br/&gt;V ou F} P --&gt; |Inferência - Razão| C(Conclusão)endsubgraph Inferência direction LR Pa(Particular) --&gt; |Indução| Ge(Geral) Ge --&gt; |Dedução| PaendLógica --&gt; InferênciaReferências " }, { "title": "Diagrama de Fluxo de Dados das categorias", "url": "/aulas/posts/fluxo-de-dados-de-categorias/", "categories": "DESENVOLVIMENTO, PROJETOS", "tags": "diagrama, fluxo, dados", "date": "2021-07-07 12:00:00 -0300", "snippet": "O diagrama de fluxo de dados (DFD) mapeia o fluxo de informações para qualquer processo ou sistema. Ele utiliza símbolos definidos, como retângulos, círculos e flechas, além de rótulos de textos br...", "content": "O diagrama de fluxo de dados (DFD) mapeia o fluxo de informações para qualquer processo ou sistema. Ele utiliza símbolos definidos, como retângulos, círculos e flechas, além de rótulos de textos breves, para mostrar entradas e saídas de dados, pontos de armazenamento e as rotas entre cada destino.Diagrama de fluxo de dadosO seguinte diagrama, feito com o editor mermaid1, mapeia o fluxo de dados através das variáveis, usados para exibir uma lista na página de categorias deste site.Simbologia: Retângulo = variável; Seta = fluxo de dados; Círculo = processamento; Triângulo = decisão; Retângulo inclinado = saída na página; retângulo com calda de peixe = nota.graph TDsite.categories--&gt;sort((sort))--&gt;sort_categories--&gt;for_categories((for))--&gt;sort_categories for_categories --&gt;category --&gt;first((first)) --&gt;category_name category --&gt;last((last)) --&gt;posts_of_category --&gt;if{if&lt;br&gt; ==} category_name--&gt;if --&gt;split((split)) --&gt;sub_categories --&gt;forpost((for)) --posts_of_category --&gt;post --post.categories1 --&gt;second_category --&gt;ifsecond{if} --second_category --&gt;unless{unless&lt;br&gt; sub_categories&lt;br&gt; contains&lt;br&gt; second_category} --sub_categories --&gt;push((push&lt;br&gt;second_category)) sub_categories --&gt;sortsub((sort)) --&gt;sub_categories --&gt;size((size)) --&gt;sub_categories_size --&gt;ifsub{if} posts_of_category --&gt;div1[/div card categories/] --&gt;div2[/div card header/] --&gt;span[/span/] --&gt;ifsub{if &gt; 0} --true --&gt;i1[/ico folder open/] ifsub--else --&gt;i2[/ico folder/] --&gt;cat[/category name/] i1--&gt;cat --&gt;size2((size)) --&gt;top_post_size --&gt;span2[/span/] --&gt;cont&gt;Continua]Código da página de categorias{% assign HEAD_PREFIX = \"h_\" %}{% assign LIST_PREFIX = \"l_\" %}{% assign group_index = 0 %}{% assign sort_categories = site.categories | sort %}{% for category in sort_categories %} {% assign category_name = category | first %} {% assign posts_of_category = category | last %} {% assign first_post = posts_of_category | first %} {% if category_name == first_post.categories[0] %} {% assign sub_categories = \"\" | split: \"\" %} {% for post in posts_of_category %} {% assign second_category = post.categories[1] %} {% if second_category %} {% unless sub_categories contains second_category %} {% assign sub_categories = sub_categories | push: second_category %} {% endunless %} {% endif %} {% endfor %} {% assign sub_categories = sub_categories | sort %} {% assign sub_categories_size = sub_categories | size %} &lt;div class=\"card categories\"&gt; &lt;!-- top-category --&gt; &lt;div class=\"card-header d-flex justify-content-between hide-border-bottom\" id=\"{{ HEAD_PREFIX }}{{ group_index }}\"&gt; &lt;span&gt; {% if sub_categories_size &gt; 0 %} &lt;i class=\"far fa-folder-open fa-fw\"&gt;&lt;/i&gt; {% else %} &lt;i class=\"far fa-folder fa-fw\"&gt;&lt;/i&gt; {% endif %} &lt;a href=\"{{ site.baseurl }}/categories/{{ category_name | slugify | url_encode }}/\" class=\"ml-1 mr-2\"&gt; {{ category_name }} &lt;/a&gt; &lt;!-- content count --&gt; {% assign top_posts_size = site.categories[category_name] | size %} &lt;span class=\"text-muted small font-weight-light\"&gt; {% if sub_categories_size &gt; 0 %} {{ sub_categories_size }} {% if sub_categories_size &gt; 1 %}categories{% else %}category{% endif %}, {% endif %} {{ top_posts_size }} post{% if top_posts_size &gt; 1 %}s{% endif %} &lt;/span&gt; &lt;/span&gt; &lt;!-- arrow --&gt; {% if sub_categories_size &gt; 0%} &lt;a href=\"#{{ LIST_PREFIX }}{{ group_index }}\" data-toggle=\"collapse\" aria-expanded=\"true\" aria-label=\"{{ HEAD_PREFIX }}{{ group_index }}-trigger\" class=\"category-trigger hide-border-bottom\"&gt; &lt;i class=\"fas fa-fw fa-angle-down\"&gt;&lt;/i&gt; &lt;/a&gt; {% else %} &lt;span data-toggle=\"collapse\" class=\"category-trigger hide-border-bottom disabled\"&gt; &lt;i class=\"fas fa-fw fa-angle-right\"&gt;&lt;/i&gt; &lt;/span&gt; {% endif %} &lt;/div&gt; &lt;!-- .card-header --&gt; &lt;!-- Sub-categories --&gt; {% if sub_categories_size &gt; 0 %} &lt;div id=\"{{ LIST_PREFIX }}{{ group_index }}\" class=\"collapse show\" aria-expanded=\"true\"&gt; &lt;ul class=\"list-group\"&gt; {% for sub_category in sub_categories %} &lt;li class=\"list-group-item\"&gt; &lt;i class=\"far fa-folder fa-fw\"&gt;&lt;/i&gt; &lt;a href=\"{{ site.baseurl }}/categories/{{ sub_category | slugify | url_encode }}/\" class=\"ml-1 mr-2\"&gt;{{ sub_category }}&lt;/a&gt; {% assign posts_size = site.categories[sub_category] | size %} &lt;span class=\"text-muted small font-weight-light\"&gt;{{ posts_size }} post{% if posts_size &gt; 1 %}s{% endif %} &lt;/span&gt; &lt;/li&gt; {% endfor %} &lt;/ul&gt; &lt;/div&gt; {% endif %} &lt;/div&gt; &lt;!-- .card --&gt; {% assign group_index = group_index | plus: 1 %} {% endif %}{% endfor %}Referências O que é um diagrama de fluxo de dados?. Lucidchard. Disponível em https://www.lucidchart.com/pages/pt/o-que-e-um-diagrama-de-fluxo-de-dados. Acessado em 07 de julho de 2021. Simbologia de um Fluxograma. Lucidchard. Disponível em https://www.lucidchart.com/pages/pt/fluxograma-simbologia. Acessado em 07 de julho de 2021. Diagrama de Fluxo de Dados –DFD. Unicamp. Disponível em https://www.ic.unicamp.br/~thelma/inf327/aulas-2008/Slides-Aulas/Aula1b-DFD.pdf. Acessado em 07 de julho de 2021. Flowcharts - Basic Syntax. mermaid. Disponível em https://mermaid-js.github.io/mermaid/#/flowchart. Acessado em 07 de julho de 2021. Mermaid Live Editor. mermaid. Disponível em https://mermaid-js.github.io/mermaid-live-editor. Acessado em 07 de julho de 2021. &#8617; " }, { "title": "Ferramentas de Gestão do Tarefas", "url": "/aulas/posts/ferramentas-de-gestao-de-tarefas/", "categories": "DESENVOLVIMENTO, PROJETOS", "tags": "diagrama, gestão, tarefas", "date": "2021-06-17 20:00:00 -0300", "snippet": "O tempo é um recurso valioso que deve ser bem gerenciado em qualquer projeto, para isso existem ferramentas que organizam as tarefas permitindo seu controle visualmente.ObjetivoListar as principais...", "content": "O tempo é um recurso valioso que deve ser bem gerenciado em qualquer projeto, para isso existem ferramentas que organizam as tarefas permitindo seu controle visualmente.ObjetivoListar as principais ferramentas e diagramas de gerenciamento de tarefas em administração de projetos.Ciclo PDCAO PDCA pode ser identificado como o Ciclo de Shewhart, e foi desenvolvido em 1930 por Walter Andrew Shewhart, engenheiro e físico, que enquanto trabalhando no Bell Laboratories, apresentou tal ferramenta como instrumento de excelência de gestão de qualidade. Analisando estatisticamente o controle de processos, ele criou um modelo capaz de ser implantado na abordagem de qualquer situação, o PDCA signica: Plan: Planejamento da Atividade; Do: Execução da Atividade; Check: Verificação do andamento da Atividade; Action: Ação nos Resultados.Matriz de EisenhowerCriada pelo 34º presidente dos Estados Unidos, Dwight Eisenhower, a Matriz de Eisenhower é uma ferramenta utilizada para priorizar tarefas e orientar os processos de tomada de decisão nas organizações. É uma forma de categorizar as atividades que precisam ser feitas de acordo com dois critérios básicos: urgência e importância.5W2HÉ uma ferramenta simples e prática usada para o planejamento estratégico e operacional de projetos e atividades. É constituído de um checklist de perguntas para o projeto administrativo de atividades, prazos e responsabilidades, com a função de definir o que será feito, porque, onde, quem irá fazer, quando, como e quanto vai custar.1Os 5W significam: What (o que será feito?) Why (por que será feito?) Where (onde será feito?) When (quando será feito?) Who (por quem será feito?)Os 2H significam: How (como será feito?) How much(quanto vai custar?)Exemplo 5W2H fonte: hefloKanbanKanban é um termo japonês que significa “cartão”. Ele é um sistema de gestão visual para controle de tarefas e fluxos de trabalho através da utilização de colunas e cartões. 2Criado na década de 60 como uma parte do Sistema Toyota de Produção com o objetivo de controlar o estoque de materiais para não exceder nem faltar produtos, provocando um equilíbrio entre o estoque e a linha de produção.Esse sistema funciona através de um quadro com colunas e cartões coloridos, onde as colunas representam os produtos ou os status de fabricação do produto e as cores representam o nível de urgência para a produção de cada produto.Atualmente, entretanto, o kanban transpôs os limites da indústria e é utilizado também em equipes de marketing, desenvolvimento de software, prestação de serviços e muitas outras, como uma ferramenta de gestão de tarefas.Como funciona, o kanban é composto basicamente de: Cartões - representa uma tarefa ou ação que precisa ser tomada; Colunas - representam os status dos cartões. Por exemplo: A Fazer, Em Execução e Feito; Quadro - onde são organizados os cartões e colunas.Exemplo de KanbamDiagrama de GanttUm gráfico de Gantt é um tipo de gráfico de barras, desenvolvido pela primeira vez por Karol Adamiecki em 1896, e independentemente por Henry Gantt na década de 1910, que ilustra um cronograma de projeto e a quantidade de tempo que levaria para qualquer projeto ser concluído. Os gráficos de Gantt ilustram o número de dias entre as datas de início e término dos elementos terminais e elementos de resumo de um projeto.3Os gráficos de Gantt registrarão cada tarefa agendada como uma barra contínua que se estende da esquerda para a direita. O eixo “x” representa o tempo e o eixo “y” registra as diferentes tarefas e a ordem em que devem ser concluídas.Diagrama de PertPERT é um acrônimo (do inglês) para a Técnica de Revisão de Avaliação de Programa. Um diagrama de PERT é uma ferramenta de gerenciamento de projetos usada para analisar cada tarefa envolvida na conclusão de um projeto. Voltado para projetos de grande escala, os diagramas de PERT (ou gráficos de PERT) identificam o tempo necessário para concluir cada tarefa, estimando os requisitos de tempo mais curtos, longos e prováveis.4Principais objetivos: Definir os prazos à sua equipe. Mostrar uma sequência de execução de tarefas. Administrar o tempo e os recursos com mais eficiência. Dividir um projeto grande em tarefas menores. Reduzir o desperdício e os custos na conclusão do projeto.Exemplo de Diagrama de Pert CPM.Diagrama CPMO Método do caminho crítico (CPM) é usado em projetos previsíveis e que ocorrem com frequência, usado para controlar custos e tempo.O CPM designa a ordem específica e a sequência de ações que inevitavelmente determinam a duração do projeto que você está definindo. Isso é especialmente útil no gerenciamento de projetos com áreas de sobreposição, longo consumo de tempo ou até mesmo atraso, porque você pode abordar o agendamento de um projeto em uma base de tarefa separada, visualizá-los em um fluxograma e, em seguida, obter uma estimativa quase exata no duração que cada tarefa individual exigirá. 5 Exemplo do diagrama CPM de construção.Diagrama de fluxo de trabalhofornece uma visão geral gráfica do processo de negócios. Usando símbolos e formas padronizados, o fluxo de trabalho mostra passo a passo como seu trabalho é carregado e concluído, do início ao fim. Ele também mostra quem é responsável pelo trabalho e em qual momento do processo. A concepção de um fluxo de trabalho envolve primeiro fazer uma análise detalhada do fluxo de trabalho, podendo expor fraquezas potenciais. Uma análise de fluxo de trabalho pode ajudá-lo a definir, padronizar e identificar as áreas críticas do seu processo. 6Exemplo de diagrama de fluxoReferências PlantUML - editor de diagramas online PAULA, Charlles B. O que é 5W2H: reduza incertezas, ganhe produtividade e aprenda como fazer um plano de ação. Treasy blog, 2015. Disponível em https://www.treasy.com.br/blog/5w2h/. Acessado em 17 de junho de 2021. &#8617; Kanban O que é e TUDO sobre como gerenciar fluxos de trabalho. artia. Disponível em: https://artia.com/kanban/. Acessado em 17 de junho de 2021. &#8617; About Mermaid, Gantt diagrams. GitHub. Disponível em https://mermaid-js.github.io/mermaid/#/gantt. Acessado em 17 de junho de 2021. &#8617; O que é e como fazer diagrama de PERT. Lucidchard. Disponível em https://www.lucidchart.com/pages/pt/o-que-e-como-fazer-diagrama-de-pert. Acessado em 17 de junho de 2021. &#8617; Critical Path Method and PERT Charts. Lucidchard. Disponível em https://www.lucidchart.com/pages/pert-chart-critical-path-method. Acessado em 17 de junho de 2021. &#8617; OLIVEIRA, Wallace. Entenda o que é workflow e swimlanes, como desenhar e veja 4 exemplos. heflo, 2018. Disponível em https://www.heflo.com/pt-br/automacao-processos/diagrama-de-workflow/. Acessado em 17 de junho de 2021. &#8617; " }, { "title": "Ferramentas RAD online", "url": "/aulas/posts/Ferramentas-rad-online/", "categories": "DESENVOLVIMENTO, RAD", "tags": "mobile, tutorial, curso, programação", "date": "2021-06-10 19:00:00 -0300", "snippet": "O desenvolvimento de aplicativos evoluiu a ponto de programar parecer brincadeira de criança, montando bloquinhos de lego, onde os componentes de funcionalidades podem ser organizados visualmente, ...", "content": "O desenvolvimento de aplicativos evoluiu a ponto de programar parecer brincadeira de criança, montando bloquinhos de lego, onde os componentes de funcionalidades podem ser organizados visualmente, facilitando muito a criação e design, assim focando mais na lógica permitindo facilmente validar uma ideia e rapidamente colocar em prática nosso projeto.O objetivo deste arquivo é listar algumas ferramentas online de desenvolvimento visual baseado em componentes (RAD), e mostrar a facilidade de aprender programação, a lógica das ações, o designe do front end, que é a interface que o usuário interage.BlocosUma forma bem didática de aprender a lógica de programação, é montando as sequências de comandos como bloquinhos, e visualizar sua execução em animações e jogos. Os exemplos a seguir estão em uma ordem de evolução: Scratch blockly Appinventor ThunkableCodificaçãoPara aprender a codificar e conhecer a ciência da computação de forma divertida temos as seguintes plataformas online: Algoritmos, javascript, HTML e CSS na Khan academy Ciência da computação na code.org Linguagens web, Python, PHP, JavaScript, e Ruby na Code academy Mais ferramentas para aprender a programarAppsheetO Appsheet é uma ferramenta online que utiliza as planilhas Google como banco de dados e monta um aplicativo e fornece API para acesso de outros aplicativos. Tutoriais do Appsheet BrasilGlideO Glide é outra ferramenta online que utiliza as planilhas Google como banco de dados e monta um aplicativo web mobile online. Tutoriais para o Glide com Messias carvalhoBubbleO Bubble é uma ferramenta completa de designe visual de aplicativos web, com seu banco de dados, componentes e diversos modelos. Tutoriais para o Bubble com Renato AsseKodularO Kodular é a ferramenta mais moderna de desenvolvimento visual de aplicativos móveis, com muitos componentes e funções por montagem de blocos. Demonstração do Kodular com Leo Andrade Tutoriais do Kodular com Ju Oliveira Comparação App inventor, Kodular ou Thunkable com Deivid RothenComparativo Ferramenta Planos Características Appsheet Cobrança por usuário Grátis até 10 usuários indicado para empresas Permite publicar nas lojas de aplicativos Bubble Cobrança por aplicativo Processa pagamentos Glide Cobrança por aplicativo Grátis até 500 linhas da planilha Usa Zapier para integrar API Kodular Gratuito Porcentagem se tiver propaganda Permite publicar nas lojas de aplicativos Para saber mais Comparativo no youtube com Renato Asse Comparativo de planos no youtube com Renato Asse Cálculo de estimativa de custos de app" }, { "title": "Esquema de Arquitetura do Sistema", "url": "/aulas/posts/Esquema-de-arquitetura-do-sistema/", "categories": "DESENVOLVIMENTO, ENGENHARIA DE SOFTWARE", "tags": "diagrama, modelo, uml", "date": "2021-06-05 18:50:00 -0300", "snippet": "A arquitetura de software projeta e documenta o sistema, define o que vai ser usado (requisitos) e o que não vai ser usado - evitando perda de tempo, estrutura os dados, seu processamento, as infor...", "content": "A arquitetura de software projeta e documenta o sistema, define o que vai ser usado (requisitos) e o que não vai ser usado - evitando perda de tempo, estrutura os dados, seu processamento, as informações geradas, seu ambiente, recursos, a implementação e manutenção do projeto.graph LR SIS((Arquitetura e Modelagem&lt;br/&gt; do Sistema&lt;br/&gt;Arquiteto de Software)) --&gt;OBJ(Objetivo&lt;br/&gt;Requisitos&lt;br/&gt;Analista do sistema) OBJ --&gt; LEV(Levantamento) LEV --&gt; LEV1(Entrevista) LEV --&gt; LEV2(Pesquisa) LEV --&gt; LEV3(Questionário) LEV --&gt; LEV4(Reuniões) LEV --&gt; LEV5(Observações) OBJ --&gt; REQ(Tipos de requisitos) REQ --&gt; REQ1(Funcionais - necessários) REQ --&gt; REQ2(Não funcionais - desejáveis) REQ --&gt; REQ3(Do usuário) REQ --&gt; REQ4(Do sistema) REQ --&gt; REQ5(Do software) SIS --&gt; ENT(Entradas) ENT --&gt; DAD&gt;Coleta de dados] ENT --&gt; ANA(Análise dos dados) SIS --&gt; PROC(Processamento) PROC --&gt; MUD&gt;Converte entradas em saídas] SIS --&gt; SAI(Saídas) SAI --&gt; INF&gt;Informações geradas pelo processamento] SIS --&gt; RET(Retroalimentação) RET --&gt; COM&gt;Informações sobre o comportamento do sistema] SIS --&gt; AMB(Ambiente) AMB --&gt; MEI&gt;Meio de atuação do sistema] AMB --&gt; ONL(Online) AMB --&gt; LOC(Local) SIS --&gt; REC(Recursos) REC --&gt; DIN(Dinheiro) REC --&gt; MAQ(Equipamentos) REC --&gt; PES(Pessoas capacitadas) REC --&gt; VIA(Viabilidade) SIS --&gt; PROJ(Projeto&lt;br/&gt;Engenheiro de software) PROJ --&gt; IMP(Implementação) PROJ --&gt; MAN(Manutenção)Modelagem do Sistema Objetivo - Requisitos Levantamento Entrevista Pesquisa Questionário Reuniões Observações Tipos de requisitos - Analista do sistema Funcionais - necessidades Não funcionais - desejáveis Do usuário - quem interage Do sistema Do software Entradas Coleta de dados Análise dos dados Processamento - Converte entradas em saídas Saídas - Informações geradas pelo processamento Retroalimentação - Informações sobre o comportamento do sistema Ambiente - Meio de atuação do sistema Online Local Recursos Dinheiro Equipamentos Pessoas capacitadas Viabilidade Projeto Implementação Manutenção ReferênciaPEREIRA, Rômulo. POO Java - Introdução a Sistemas. YouTube, 2021. Disponível em https://www.youtube.com/watch?v=bIjXgoqhZcg&amp;list=PL-aWZs7H0EAwGm-lD96-l4G7rG2eN4HKG&amp;index=1. Acessado em 5 dejunho de 2021." }, { "title": "Comandos no terminal do linux", "url": "/aulas/posts/Comandos-no-terminal-linux/", "categories": "AULAS 2022, SISTEMAS OPERACIONAIS LIVRES", "tags": "prompt, comandos, linux, manutenção", "date": "2021-05-31 14:00:00 -0300", "snippet": "O linux permite realizar tarefas com o sistema operacional inserindo comandos no terminal. Cada comando aciona um programa, armazenado geralmente na pasta bin, e pode receber parâmetros com diversa...", "content": "O linux permite realizar tarefas com o sistema operacional inserindo comandos no terminal. Cada comando aciona um programa, armazenado geralmente na pasta bin, e pode receber parâmetros com diversas opções.Neste artigo irei reunir uma lista dos principais comandos e suas funcionalidades.Acessando o terminal de comandosO terminal de comandos do linux (bash), é uma interface que recebe comandos de teclado do usuário, estes executam programas utilitários que realizam tarefas no sistema operacional (unix shell). Esses comandos podem ser reunidos em um arquivo texto (scripts1) para automatizar sequências de tarefas.Para acessar o terminal, podemos utilizar o atalho ctrl + shift + T, ou geralmente no menu de programas, na parte de administração.Vantagens do terminalcomandos no terminal podem2: Automatizar tarefas repetitivas. Economizar tempo. Oferece uma sequência de atividades bem estruturadas usando argumentos Simplifica argumentos complexos em um único comando. Linhas de lógica podem ser criadas com funções no terminal. Os comandos podem ser executados na inicialização.Ajuda com os comandosPodemos acessar um manual do terminal entrando com o camando: man bashTambém tempos uma ajuda com os comandos com: help comandoPrincipais comandos clear - limpa a tela3; find arquivo - busca de arquivo dentro do diretório4; find / -name arquivo - busca em todo sistema5; locate arquivo - busca o arquivo em todo sistema; ls | grep “palavra” - busca arquivos que contenham palavra6; sudo su - modo super usário (administrador);Atalhos de teclado ctrl + c - cancela a tarefa atual; crtl + shift + c - copia o texto selecionado ctrl + shift + v - cola texto copiado; setas para cima e para baixo - repete comandos anteriores; tab - completa o texto do comando;Comandos de diretórios pwd - mostra o diretório (pasta) atual7; ls -l - lista o conteúdo do diretório; cd diretório - muda de diretório; cat &gt; arquivo.txt - cria arquivo de texto; touch arquivo.txt - cria arquivo de texto; mkdir diretório - cria diretório; rmdir diretório - remove diretório; cp - copia; cp -i teste.txt teste-copia.txt cp -R /home/ftp /home/ftp2 mv arquivo /home/arquivo - move o arquivo; rm arquivo - remove o arquivo; rm -r /tmp/pasta - remove a pasta e seu conteúdo; ln -s arquivo /home/desktop/arquivo - cria um atalho para o arquivo; cat teste.txt - exibe o conteúdo do arquivo texto; cat contato1 &gt; contato2 - copia o conteúdo de um arquivo para outro. file arquivo - identifica o tipo de arquivo; tar zcvf pasta - empacotar a pasta em pasta.tar.gz tar zxpvf arquivo.tar.gz - descompacta o arquivo tar.gz; gzip arquivo - compacta o arquivo com .gz gunzip arquivo.gz - descompacta o arquivo gzip.Comandos de usuários useradd usuario - adiciona usuário8; passwd - muda a senha ao usuário; cat /etc/passwd - Mostra usuários; userdel - nome do usuário Remove usuário; userdel -r - nome do usuário Remove usuário e sua pasta; cat /etc/group - Mostra grupos; groupadd - nome do grupo Adiciona grupo; adduser - nome do usuário -g nome do grupo Cria e adiciona usuário ao grupo;Comandos de segurança CACL ls -la - Mostra pastas e subpastas com as permissões9; chmod o=r arquivo - permite outros visualizar o arquivo; chmod o+x arquivo - permite outros executarem o arquivo; chmod -R o=rx pasta - permite outros visualizarem e executarem aquivos dentro da pasta; chmod u+x teste.txt - permite o usuário executar o arquivo; chmod g-w teste.txt - permite o grupo editar o arquivo; sudo chown usuário arquivo - altera o proprietário do arquivo;Comandos de rede hostname - Mostra o nome da máquina; who - mostra o usuário logado; ifconfig - Mostra endereço da placa de rede; cat /etc/hosts - Mostra nomes e IPs das máquinas na rede netstat -ln - Mostra portas escutando possíveis conexões;Instalação de programasAs bibliotecas de programas ficam armazenadas em repositórios (servidores), e são gerenciadas pelo “apt”10, e sua interface “apt-get”, que pode ser acessado na interface gráfica pelo “synaptic”. Os principais comandos do apt são11: sudo apt-get update - atualiza a lista de repositórios dos pacotes de programas; sudo apt-get install programa - instala um programa; sudo apt upgrade - atualizações de segurança do sistema; sudo apt-get remove pacote - remove o pacote; sudo apt autoremove - remove pacotes desnecessários; sudo apt-get clean - remover arquivos inúteis do cache; sudo apt-get autoclean - remove pacotes antigos ou duplicados; sudo apt-get check - procura arquivos corrompidos;Comandos do sistema top - informações de recursos e processos12; uname -a - Mostra informações sobre o kernel da máquina; free -m - informações de memória livre; df -h - informações das partições; last - quem se logou no sistema; lspci -v | more - Mostra os drivers das placas; df -h - Mostra tamanho do disco raiz; ps -df - Mostra processos em andamento; ps aux | grep programa - lista processo pelo nome do programa. pgrep programa - mostra o PID que identifica o programa; kill -9 PID - encerra o processo pelo número PID; pstree - mostra um gráfico em árvore dos processos; sudo reboot - reinicia o computador; sudo shutdown -h now - desliga o computador; sudo shutdown -h +15 - desligar daqui a 15 min. sudo shutdown -r 18:00 - desligar às 18 hrs.Comando de manutenção df - informações de uso do HD; sudo fdisk -l - informações de partições e HDs; du -h –max-depth=1 - informação do tamanho dos diretórios; chkconfig | more - Estado dos serviços iniciados com o sistema; chkconfig nome_serviço - Verifica estado do serviço; chkconfig nome_serviço - on ou off Iniciar ou não o serviço junto com o sistema; fsck /dev/sda1 - corrigir erros no hd; fsck.ext3 -f /dev/sda1 - recuperar partição de hd danificado;ReferênciasComandos básicos. Viva o linux, 2007. Disponível em https://www.vivaolinux.com.br/dica/Comandos-basicos. Acessado em 31 de maio de 2021.Referência Debian. Debian. Disponível em: https://www.debian.org/doc/manuals/debian-reference/index.pt.html. Acessado em 31 de maio de 2021.Referência de comandos linux. Rapidtables. Disponível em: https://www.rapidtables.com/code/linux/index.html. Acessado em 31 de maio de 2021.Referência de linha de comando. SS64. Disponível em: https://ss64.com/. Acessado em 31 de maio de 2021. FILIPE, Luis, Arthur e Rodrigo. Shell Script. UFES. Disponível em: http://www.inf.ufes.br/~vitorsouza/archive/2020/wp-content/uploads/teaching-lp-20132-seminario-shell.pdf. Acessado em 31 de maio de 2021. &#8617; Comandos Bash Linux - Guia Básico e Exemplos de Uso. Hostinger tutoriais, 2020. Disponível em https://www.hostinger.com.br/tutoriais/comandos-bash-linux. Acessado em 31 de maio de 2021. &#8617; Iniciando o uso do terminal do linux. UFSM, 2021. Disponível em: https://www.ufsm.br/pet/sistemas-de-informacao/2020/04/29/iniciando-o-uso-do-terminal-do-linu/. Acessado em 31 de maio de 2021. &#8617; MATHEUS, Yure. Procurando arquivos no Linux. Alura, 2017. Disponível em: https://www.alura.com.br/artigos/procurando-arquivos-no-linux. Acessado em 31 de maio de 2021. &#8617; ALVIN, Alexander. A BIG collection of Unix/Linux ‘find’ command examples, 2021. Disponível em https://alvinalexander.com/unix/edu/examples/find.shtml. Acessado em 31 de maio de 2021. &#8617; WELLINGTON, Weslley. Usando grep e egrep. Viva o linux, 2011. Disponível em https://www.vivaolinux.com.br/artigo/Usando-grep-e-egrep?pagina=2. Acessado em 31 de maio de 2021. &#8617; CISNEIROS, Hugo. Comandos no linux. UFCG, 2003. Disponível em http://www.dca.ufcg.edu.br/mna/Linux.pdf. Acessado em 31 de maio de 2021. &#8617; The Complete Guide to “useradd” Command in Linux - 15 Practical Examples. Tecmint, 2019. Disponível em: https://www.tecmint.com/add-users-in-linux/. Acessado em 31 de maio de 2021. &#8617; MATHEUS, Yure. Entendendo as permissões no Linux. Alura, 2017. Disponível em: https://www.alura.com.br/artigos/entendendo-as-permissoes-no-linux. Acessado em 31 de maio de 2021. &#8617; O Manual do Administrador Debian. Debian handbook. Disponível em: https://debian-handbook.info/browse/pt-BR/stable/sect.apt-get.html. Acessado em 31 de maio de 2021. &#8617; Lista de comandos de manutenção. Blog Click, 2009. Disponível em: https://ueider.wordpress.com/2009/11/18/linux-lista-de-comandos-de-manutencao/. Acessado em 31 de maio de 2021. &#8617; DELFINO, Pedro. Comando Kill - Aprenda A Gerenciar Processos No Linux ( Windows E MacOS). Profissionais Linux. Disponível em: https://e-tinet.com/linux/comando-kill/. Acessado em 31 de maio de 2021. &#8617; " }, { "title": "Exemplos de programação RAD com Delphi", "url": "/aulas/posts/exemplos-de-programacao-em-delphi/", "categories": "DESENVOLVIMENTO, RAD", "tags": "delphi, tutorial, curso, programação", "date": "2021-05-31 10:22:00 -0300", "snippet": "Exemplos de programação básica com a IDE Delphi 10 (Rio) para uma introdução às instruções e operações básicas.iniciando um novo projeto Acessar: File/ New/ Multi Device Aplication/ Blank Applicat...", "content": "Exemplos de programação básica com a IDE Delphi 10 (Rio) para uma introdução às instruções e operações básicas.iniciando um novo projeto Acessar: File/ New/ Multi Device Aplication/ Blank Application.Executando o projeto Selecionar no menu superior: File / Save all; Selecionar “Run” (executar) no menu superior, ou teclar “F9”.Alterando propriedades de componentesMudando o título da janela: Selecionar o Form1 clicanco do form; Acessar as propriedades na janela Object Inspector; Selecionar a propriedade “Caption”; Alterar para “Primeiro exemplo”;Mudando a cor de fundoda janela: Acessar a propriedade “Fill” e expandir o submenu; Alterar a propriedade “Kind” para “solid”; Alterar a propriedade “Color” para “White”;Centralizando a janela: Selecionar a propriedade “Posiition”; Definir para “Desktop center”;Usando botões Acessar a palleta de componentes; Inserir 2 componentes do tipo Button; Selecionar o button1 para mudar as suas propriedades; Acessar as propriedades na janela Object Inspector; Alterar a propriedade “Text” para “Título”; Selecionar o button2 para mudar as suas propriedades; Alterar a propriedade “Text” para “Cor”;Mudando o título da janela: Inserir a ação no botão: dando um duplo click no botão Título, será acessado o “Unit1” para edição do código; Inserir o código a seguir:procedure TForm1.Bt1Click(Sender: TObject);begin Form1.Caption := 'Segundo exemplo';end;Mudando a cor de fundo da janela: Da mesma forma damos um duplo click no botão cor, e será acessado o “Unit1” para edição do código; Inserir o código a seguir:procedure TForm1.Bt2Click(Sender: TObject);begin Form1.Fill.Color := TAlphaColors.Red;end;Para voltar ao formulário basta teclar F12.Trabalhando com textoConcatenando (unido) o texto ao clicar no botão: Acessar a palleta de componentes; Selecionar o componente “Label”; Clicar no Form para adicionar o componente; Acessar suas propriedades na janela Object Inspector; Alterar a propriedade “Text” para “Nome”; Repetir esta operação com outro Label, com seu texto “Sobrenome”; Podemos também copiar e colar o componente; Inserir um componente “Button” e posicioná-lo abaixo do “Label Sobrenome”; Alterar a propriedade “Text” do botão para “Concatenar”; Inserir outro Label e mudar a propriedade “Text” para “Universidade”; Inserir 4 componentes “Edit” ao lado dos labels e do botão, onde podemos inserir valores; Agora vamos programar a ação clciando 2 vezes no botão concatenar e inserindo o código:procedure TForm1.Button1Click(Sender: TObject);begin Edit3.Text := Edit1.Text + Edit2.Text; Edit4.Text := 'Escola';end;Para inserir a ação “concatenar” ao botão, que irá unir o texto do edit1 ao texto do edit2, e exibir no edit3, usamos o seguinte código, clicando 2 vezes no botão:procedure TForm1.Bt2Click(Sender: TObject);begin Form1.Fill.Color := TAlphaColors.Red;end;ReferênciasBEZERRA, Cicero Aparecido Bezerra. Introdução à linguagem de programação Delphi. 2018. UFPR. Disponível em: https://acervodigital.ufpr.br/bitstream/handle/1884/55881/delphi.pdf. Acessado em: 29 de maio de 2021.ROSELT, Shaun. Delphi Programing Tutorials - For Absolute Begginners. YouTube, 2018. Disponível em: https://www.youtube.com/playlist?list=PLfrySFqYRf2dKxG1Xd1sJaEMtoVTeL5dw. Acessado em 27 de maio de 2021." }, { "title": "Desenvolvimento RAD com Delphi", "url": "/aulas/posts/desenvolvimento-rad-com-delphi/", "categories": "DESENVOLVIMENTO, RAD", "tags": "delphi, tutorial, curso, programação", "date": "2021-05-27 10:22:00 -0300", "snippet": "O Delphi desenvolve aplicações utilizando componentes especializados, visualmente com o arrastar e soltar do mouse, no conceito de RAD (Rapid Application Development – Desenvolvimento Rápido de Apl...", "content": "O Delphi desenvolve aplicações utilizando componentes especializados, visualmente com o arrastar e soltar do mouse, no conceito de RAD (Rapid Application Development – Desenvolvimento Rápido de Aplicações).ConceitoO Delphi é uma ferramenta extremamente prática e seu maior sucesso se deu na versão 7, com uma infinidade de componentes capazes de realizar os serviços, que seriam necessários no desenvolvimento do software, proporcionando ganho em tempo e produtividade.HistóriaO Delphi existe a mais de 20 anos,foi lançado em 1995 pela Borland1 e atualmente pode desenvolver aplicativos multiplataformas, utilizando o mesmo desenvolvimento, atendendo os sistemas operacionais: Windows, Mac OS, IOS, linux e Android.Inicialmente utilizava a linguagem Object Pascal, e seus componentes na bilioteca visual VCL (Visual Component Library), e uma infinidade de pacotes de componentes que turbinam o Delphi com milhares de funcionalidades.A partir de 2003 passou a adotar as linguagens: .net (2003); C++ (2006); em 2007 foi adquirido pela empresa Embarcadero, especialista em ferramentas para bancos de dados; A partir de 2010 com o Delphi XE passou a dar suporte para a plataforma iOS e OSX da Apple, utilizando o fantástico framework Firemonkey; Em 2013 passou a dar suporte ao Android em sua versão XE5;Principais versões e suas capacidadesA partir da versão XE7, o Delphi passou a disponibilizar: Multi-Device Designer, Guied Tours (Uma espécie de guia de apresentação da IDE), Splash Screen para Android, importação de bibliotecas Java para Android, programação paralela com a class TParallel, Jump List para VCL, EMS (Enterprise Mobility Services), suporte a Bluetooth/Bluetooth LE (Low Energy) e integração com GIT para controle de código-fonteNa versão XE8: Multi-Device Preview; suporte total a aplicativos iOS 64 bits; funções nativas do sistema operacional, como: TListView, TSwitch, TMemo, TCalendar, TMultiview e TEdit; Desktop Web Browsers, Mapas Interativos, AppAnalytics, suporte a Beacons (Internet das Coisas), suporte a TeraDATA integração com Mercurial (controle de código-fonte).Na versão 10 Seattle: suporte a serviços no Android, suporte a intents (intenções) do Android; suporte ao banco MongoDB, novos controle VCL compatíveis com Windows 10, como: TRelativePanel, TSplitView, TToggleView, TActivityIndicator, TSearchBox; FireMonkey StyleDesigner; suporte a JSON Improvements; DataSnap HTTP Nativo.InstalaçãoAtualmente o Delphi encontra-se na versão 10.3 Rio (Comunity Edition) e 10.4 Sidney. Disponívelno no site da Embarcadero, encontramos a versão Comunidade para download livre. Inicialmente é necessário preencher com um email no cadastro, para iniciar o download e receber o serial de instalação2; Na instalação podemos selecionar as plataformas e pacotes para onde serão compiladados os aplicativos;Kits de desenvolvimento AndroidPara o Android é necessário o Kit de Desenvolvimento de Software (Software Development Kit ou SDK), que é um conjunto de ferramentas que os desenvolvedores e programadores usam para criar aplicativos para smartphones e tablets com o sistema operacional da Google.O SDK inclui3: SDK tools com SDK Manager - gerenciador de pacotes do SDK; AVD Manager - interface gráfica de dispositivos virtuais Android; Emulador Dalvik - para testar os aplicativos; Debug Monitor Server; sqlite3 - banco de dados usados pelos aplicativos Android; Já o Kit de Desenvolvimento Nativo (NDK, na sigla em inglês) é um conjunto de ferramentas que permite usar códigos C e C++ no Android, além de fornecer bibliotecas de plataforma que podem ser usadas para gerenciar atividades nativas e acessar componentes físicos do dispositivo, como sensores e entrada de toque4.Para cada versão do Android existe uma versão correspondente do SDK, NDK e Java. O responsável pelas versões do SDK é o “SDK Manager”, que baixa automaticamente novas versões.Para verificarmos esta instalação (automática) dos pacotes de desenvolvimento Java SDK, acessamos a configuração do “SDK Manager”: selecionando o menu superior “Tools”, escolhendo “Options”, em seguida “Deployment”, e em “SDK Manager”, onde vemos os locais (pasta base) desta instalação.Para instalar (manualmente) uma versão específica do Android: Primeiramente pesquisamos o download do Android NDK, da mesma maneira pesquisamos o download do SDK e do Java; Em seguida baixar e descompactar os arquivos nos respectivos locais (pasta base) que serão usados pelo Delphi. Agora acessamos o “SDK Manager” (ítem anterior), e clicamos no botão “Add”, podemos configurar o local do novo SDK e NDK; Quando já baixamnos um SDK, podemos executar (como administrador) o “SDK Manager” para baixar diferentes versões, geralmente ele vem junto com o pacote SDK. Selecionamos a versão do Android que desejamos e clicamos no botão “Install”.Criando aplicações para multi dispositivos Selecionar o caminho “File”, “New”, “Multi-DeviceApplication”, “Blank Application”; Será criado um arquivo “unit” (unit.pas) contendo o código criado pelo Delphi. Será aberto um novo form (formulário .fmx), onde podemos adicionar visualmente nosso componentes.Ambiente de desenvolvimentoOs componentes são organizados da seguinte maneira5: à esquerda do form temos: o explorador (Struture) - onde organizamos os componentes que utilizamos; o Object Inspector - a tabela de propriedades do componente selecionado, permitindo a sua configuração; à direita do form temos: a paletta - com a lista de componentes que podemos utilizar, arrastando e soltando no form com o mouse; o explorador (Project) - onde organizamos os arquivos que utilizamos no desenvolvimento, e onde podemos configur a plataforma de compilação do aplicativo (targuet plataforms). ComponentesOs componentes são funcionalidades encapsuladas (API) que permitem o reaproveitamento de código, podem ser adicionados através de suas bibliotecas, e encontrados na palleta.As principais6 são: Button - botão clicável; BitBtn - botão com imagem; Label - para rótulo texto; Edit - caixa de entrada de texto quer recebe digitação; Rectangle - cria um quadro para organizar outros componentes; CheckBox - caixa de seleção; ListBox - lista de informações; RadioGroup - caixa de seleção de opções; RadioButton - caixa de seleção; ActionList - alterar uma ação; MainMenu - cria um menu de opções GroupBox - agrupar outros componentesEventosEventos são respostas às ações, por exemplo como o clicar de um botão.No “Object Inspector” selecionamos a aba “events”, onde podemos encontrar o OnClick - clicar do botão esquerdo do mouse, e clicando neste entramos na área de código, para programar a função (resposta) da ação click.FunçõesA programação fica localizada nas funções, que podem ser disparadas pelos eventos.Exemplo: MessageDlg (mensagem, tipo, [botões], ContextoAjuda) - exibe uma caixas de mensagens;Referências SANTOS, Adriano. Delphi: conheça a história da ferramenta que existe, há 20 anos! Portal Tdevrocks, 2015. Disponível em: http://portal.tdevrocks.com.br/2015/10/02/delphi-conheca-a-historia-da-ferramenta-mais-atual-que-existe-ha-20-anos/. Acessado em 27 de maio de 2021. &#8617; MAZUTTI, Heber Stein. Curso Delphi - Curso App Financeiro 2.0. YouTube, 2020. Disponível em: https://www.youtube.com/playlist?list=PLRRDagG1z-EKgQDXX676r9zA6UPkenQF3. Acessado em 27 de maio de 2021. &#8617; CORDEIRO, Felipe. Android SDK: o que é? para que server? Como usar? Androidpro. Disponível em: https://www.androidpro.com.br/blog/android-studio/android-sdk/. Acessado em 27 de maio de 2021. &#8617; Primeiros passos com o NDK. Guias Developer Android. Disponível em: https://developer.android.com/ndk/guides?hl=pt-br#:~:text=O%20Kit%20de%20Desenvolvimento%20Nativo. Acessado em 27 de maio de 2021. &#8617; BEZERRA, Cicero Aparecido Bezerra. Introdução à linguagem de programação Delphi. 2018. UFPR. Disponível em: https://acervodigital.ufpr.br/bitstream/handle/1884/55881/delphi.pdf. Acessado em: 29 de maio de 2021. &#8617; VCL Components Categories Index. Embarcadero. Disponível em http://docwiki.embarcadero.com/RADStudio/Rio/en/VCL_Components_Categories_Index . Acessado em 29 de maio de 2021. &#8617; " }, { "title": "O Prompt de Comando", "url": "/aulas/posts/Prompt-de-comando/", "categories": "AULAS 2022, SISTEMA OPERACIONAL PROPRIETÁRIO", "tags": "prompt, comandos, Windows, manutenção", "date": "2021-05-24 16:10:00 -0300", "snippet": "A base para o que conhecemos hoje do sistema Windows é o DOS (Disk Operating System), e hoje está embutido no sistema operacional. Isso possibilita a utilização do sistema digitando linhas de c...", "content": "A base para o que conhecemos hoje do sistema Windows é o DOS (Disk Operating System), e hoje está embutido no sistema operacional. Isso possibilita a utilização do sistema digitando linhas de comandos, ou seja, instruções em texto que realizam tarefas.Acessando o Prompt de ComandoPara começarmos a utilizar os comandos de texto, use o atalho CTRL + R para acessar a janela executar. A seguir, digite “cmd”, como mostra a figura abaixo.Executar o prompt de comandosPode acontecer um problema na inicialização do sistema, e será necessário acessar as ferramentas de reparo pelo prompt de comando do Window através de um pendrive1. Então execute os seguintes passos2: Insira o DVD ou o pen drive do Windows no computador. Execute o boot do Windows pelo disco de instalação. Se não souber como iniciar o * boot pelo pen drive, siga este guia. Na tela de instalação, clique em Avançar e, depois, em Reparar o computador. Clique em Solução de Problemas -&gt; Opções Avançadas -&gt;Para que possamos digitar nossos comandos, no Windows, utilizamos o Prompt de Comando.Quando o Prompt está trabalhando, mostra a unidade ou partição em que está trabalhando e a pasta em que está trabalhando. Veja o exemplo:Informações do prompt de comandosO exemplo acima mostra: A versão do Windows instalado na máquina; A Unidade em que o sistema está instalado (C:); O diretório em uso (C:\\Users\\hugo); O símbolo (&gt;) indicando que a sua direita, o usuário poderá digitar os comandos.Configurando o prompt de ComandosPodemos editar algumas configurações para que a sua utilização fique mais adequada para o uso. Para isso, clique com o botão direito do mouse na barra de títulos ou acione através do atalho (Alt+espaço) e depois em ―padrões. Agora, podemos configurar a janela do prompt da maneira que achar mais conveniente, possibilitando a mudanças no tamanho do cursor, layout e cursor.Seja curioso! Investigue mais possibilidades de configurações!!Formato dos comandosO formato dos comandos a serem digitados no Prompt éComando &lt;parâmetro&gt; [especificação] diretórioAlguns podem ser executados de forma simples, bastando para isso digitar o comando, outros necessitam de atributos e/ou paramentos para completar o comando. Veja um exemplo simples. O comando ―ver‖ que indica na tela, a versão utilizada ou instalada no computador. Ela não possui nenhum atributo que qualifique ou adicione algo a mais na tarefa. Já o comando dir, que lista arquivos em um diretório, necessita além da digitação do comando, os parâmetros do local ou diretório a ser aplicado o comando, e pode vir acompanhado de uma especificação. Por exemplo, se o comando vier adicionado o a especificação /d, a listagem obtida de arquivos será dada por coluna. Veja a figura abaixo:Comandos do prompt de comandosComandos do promptA seguir uma lista de comandos que podemos usar no prompt3: cls - limpa a tela do prompt de comando ver - Exibe a versão do Windows instalado no computador. cls - Limpa a tela do prompt de comandos. date - Permite alteração da data. time - Permite alteração da hora. Help - exibe uma lista de comandos e uma breve descrição dos mesmos. Se em seguida do help for digitado algum outro comando, uma descrição mais detalhada do comando será exibida. Exit - sai do prompt de comando Systeminfo - Exibe Informações da configuração do sistema Ping 192.168.1.10 - Testa conexão tcp/ipDesligando o computadorO camando shutdowm desliga o computador com os seguintes parâmentos4:```bashshutdowm -s - desliga PCshutdowm -r - desliga e reinicia o pcshutdowm -c - desliga podendo deixar um comentárioshutdowm -h - hiberna o computadorshutdowm -l - fazer logoffshutdowm -a - Anular um desligamento do sistema.shutdowm -g - Desligar e reiniciar o computador.shutdowm -t [x] - Desliga o computador em x segundos.```Mudando as cores do prompt O comando color - Permite alterar a cor de fundo e da fonte Lista de cores:   cor   cor   cor 0 - preto 6 - Amarelo C - Vermelho claro 1 - Azul 7 - Branco D - Roxo claro 2 - Verde 8 - Cinza E - Amarelo claro 3 - Cian 9 - Azul claro F - Branco claro 4 - Vermelho A - Verde claro     5 - Roxo B - Cian claro     Exemplo para mudar a cor de fundo para azul e o texto para branco: color 17 Diretórios e arquivosOs seguintes comandos são usados para manipulação de arquivos e diretórios no Windows5: dir - lista arquivos e pastas cd caminho - muda de diretório cd .. - sobe para o diretório acima md nome_da_pasta - cria uma pasta no atual diretório rd nome_da_pasta - remove a pasta nul nome_do_arquivo - cria um arquivo del arquivo - deleta o arquivo copy arquivo c:\\pasta\\arquivo - copia o arquivo para a pasta ren nome outro_nome - renomeia o nome do arquivo ou pastaPermissões no diretórioO CACLS6 é um utilitário de linha de comando do Windows NT, que é usado para exibir ou modificar o arquivo ou listas de controle de acesso de diretório (ACLs), veja a seguir como exibir ou modificar as permissões7 de acesso no Windows: cacls nomedoarquivo (ou pasta) - exibe as permissões com a legenda: R - Ler W - Gravar C - Alterar (gravar) F - Controle total cacls nomedoarquivo (ou pasta) /E /P (ou G) - altera as permissões através dos parâmetros: /E - Edita as permissões /G - Concede direitos ao usuário especificado. Utiliza-se cacls “nomearquivo” /E /G usuario:Permissão(R,W,C,F) /P - Substitui os direitos ao usuário especificado. Utiliza-se cacls “nomearquivo” /E /P usuario:Permissão(R,W,C,F) /R - Revoga os direitos do usuário especificado. Utiliza-se calcs “nomearquivo” /E /R usuario /D - Nega Acesso ao usuário especificado. Utiliza-se calcs “nomearquivo” /E /D usuario cacls “nomedoarquivo” /E /R (ou D) usuario - remove as permissões.Redes WindowsOs seguintes comandos exibem as configurações da rede no Windows: ipconfig /all - exibe as informações de configuração da rede; ping 192.168.1.1 - testa a comunicação com o IP; netstat - exibe estatísticas da rede; arp -a - exibe informações da tabela de roteamento ARP; tracert - exibe os saltos pelos roteadores no caminho da rede; nslookup - exibe informaçõe do servidor de DNS; route - exibe e configura as tabelas de roteamento da rede; netdiag - diagnóstico de problemas de rede getmac - retorna o endereço MAC de um dispositivo de rede.Gerenciando processos tasklist - exibe uma lista dos processos ativos tasklist /fi “imagename eq nome_do_programa” - exibe informações sobre o programa taskkill /pid 1230 - finaliza o processo com identificador 1230Restaurar o sistema WindowsOs seguintes comandos são usados para a manutenção8 do sistema Windows: sfc /scannow - Verificador de arquivos do sistema verifica arquivos de sistema e substitui as versões incorretas; DISM /image:D:\\ /cleanup-image /restorehealth - limpeza de imagem e restauração rstrui - acessa a restauração do sistema chkdsk /f /r c: - localiza setores defeituosos do HD e tenta recuperar os dados9 defrag /c c: - desgragmenta o HDReferências Use Windows Ambiente de Recuperação (WinRE) para solucionar problemas comuns de inicialização. Microsoft, 2020. Disponível em «https://docs.microsoft.com/pt-br/troubleshoot/windows-server/performance/use-winre-to-troubleshoot-startup-issue&gt; &gt;. Acessado em 24 de maio de 2021. &#8617; Recuperando seu Windows através do Prompt de Comando. Microsoft, 2015. Disponível em «https://answers.microsoft.com/pt-br/windows/forum/windows_10-update/recuperando-seu-windows-atrav%C3%A9s-do-prompt-de/75d2a02d-a3cc-4b21-b218-7074abfa812c&gt; &gt;. Acessado em 24 de maio de 2021. &#8617; Referências de comandos. SS64, 2021. Disponível em «https://ss64.com/&gt; &gt;. Acessado em 24 de maio de 2021. &#8617; Guia do Linux/Iniciante+Intermediário/Migrando do DOS/Windows para o Linux/Comandos equivalentes entre DOS/CMD do Windows e o Linux. Wikibooks, 2014. Disponível em: «https://pt.wikibooks.org/wiki/Guia_do_Linux/Iniciante%2BIntermedi%C3%A1rio/Migrando_do_DOS/Windows_para_o_Linux/Comandos_equivalentes_entre_DOS/CMD_do_Windows_e_o_Linux&gt; &gt;. Acessado em 24 de maio de 2021. &#8617; Como Criar e Apagar Arquivos de Diretórios Através do Prompt de Comando. Wikihow Disponível em «https://pt.wikihow.com/Criar-e-Apagar-Arquivos-de-Diret%C3%B3rios-Atrav%C3%A9s-do-Prompt-de-Comando&gt; &gt;. Acessado em 26 de maio de 2021. &#8617; Como definir ou redefinir as permissões NTFS de um arquivo ou pasta com o comando icacls. Iperius, 2020. Disponível em: «https://www.iperiusbackup.net/pt-br/como-definir-ou-redefinir-as-permissoes-ntfs-de-um-arquivo-ou-pasta-com-o-comando-icacls/&gt; &gt;. Acessado em 24 de maio de 2021. &#8617; Alterar Permissões via CMD no Windows 10. Riocamp, 2019. Disponível em «http://www.riocamp.com.br/boletim/n117-alterar-permissoes-via-cmd-windows-10.asp&gt; &gt;. Acessado em 24 de maio de 2021. &#8617; MELO. Diego. Como restaurar o Windows 10 e o Windows 7. Tecnoblog, 2018. Disponível em «https://tecnoblog.net/241887/como-restaurar-windows-10-ou-windows-7/&gt; &gt;. Acessado em 24 de maio de 2021. &#8617; Chkdsk. Microsoft,2012. Disponível em «https://docs.microsoft.com/pt-br/windows-server/administration/windows-commands/chkdsk&gt; &gt;. Acessado em 24 de maio de 2021. &#8617; " }, { "title": "Diagrama do engenheiro de software", "url": "/aulas/posts/diagrama-do-engenheiro-de-software/", "categories": "DESENVOLVIMENTO, ENGENHARIA DE SOFTWARE", "tags": "diagrama, programação", "date": "2021-05-22 20:14:00 -0300", "snippet": "Profissional regulamentado pelo CREA - Conselho Federal de Egenharia e Agronomia, que é responsável pelo projeto e estrutura do desenvolvimento de softwaregraph LR ENG((Engenheiro de Sofw.)) --&...", "content": "Profissional regulamentado pelo CREA - Conselho Federal de Egenharia e Agronomia, que é responsável pelo projeto e estrutura do desenvolvimento de softwaregraph LR ENG((Engenheiro de Sofw.)) --&gt;PRO(Projeto) PRO --&gt; CON(Conceito) PRO --&gt; DEF(Definição) PRO --&gt; GES(Gestão) PRO --&gt; REQ(Requisitos) REQ --&gt; REQ1(Funcionais) REQ --&gt; REQ2(Não funcionais) PRO --&gt; PROC(Processos) PROC --&gt;PROC1&gt;Controle do ciclo de vida] PRO --&gt; DES(Desenvolvimento) DES --&gt; IMP(Implementação) DES --&gt; TES(Teste de qualidade) DES --&gt; DEP(Depuração) DEP --&gt; DEP1(Problemas) DEP --&gt; DEP2(Gargalos) DES --&gt; DIS(Disponibilização das versões) PRO --&gt; MAN(Manutenção) MAN --&gt; COR(Correções) MAN --&gt; EVO(Evoluções) MAN --&gt; MEL(Melhorias de performanse)Referência: Código Fonte TV no TouTube Código Fonte TV no TouTube Regulamentação" }, { "title": "Diagramas UML", "url": "/aulas/posts/diagramas-uml/", "categories": "DESENVOLVIMENTO, ENGENHARIA DE SOFTWARE", "tags": "diagrama, modelo, arquitetura, uml", "date": "2021-05-20 16:00:00 -0300", "snippet": "O Modelo Unificado de Linguagem - UML, é uma Linguagem para visualizar, especificar, construir e documentar a estrutura e o comportamento de um sistema de software.graph LR UML((Diagramas UML)) ...", "content": "O Modelo Unificado de Linguagem - UML, é uma Linguagem para visualizar, especificar, construir e documentar a estrutura e o comportamento de um sistema de software.graph LR UML((Diagramas UML)) --&gt;EST(Estrutura) EST --&gt; CLA(Classe) CLA --&gt; CLA1&gt;descreve a estrutura do sistema] EST --&gt; COMP1(Componente) EST --&gt; COMP2(Composição) EST --&gt; IMP(implementação) IMP --&gt; IMP1&gt;hardware usado] IMP --&gt; IMP2&gt;pequenas redes] IMP --&gt; IMP3&gt;deployment] EST --&gt; PAC(de pacotes) EST --&gt; OBJ(de objetos) OBJ --&gt; OBJ1&gt;instância de diagrama de classe] OBJ --&gt; OBJ2&gt;exemplo do negócio] UML --&gt; COM(Comportamento) COM --&gt; ATI(Atividade) ATI --&gt; FLU(Fluxo) FLU --&gt; FLU1&gt;operacional] FLU --&gt; FLU2&gt;de negócio] ATI --&gt; VAR(Variação de diagrama de estados) COM --&gt; CAS(Caso de uso) CAS --&gt; DES&gt;descreve os casos de uso] COM --&gt; MAQ(Máquina de estados) COM --&gt; DIA(Diagramas de interação) DIA --&gt; SEQ(Sequência) DIA --&gt; COMu(Comunicação) DIA --&gt; COL(Colaboração) COL --&gt; COL1&gt;interação entre objetos] COL --&gt; COL2&gt;sequência de msgs]" }, { "title": "Diagrama de modelagem de projeto de software", "url": "/aulas/posts/diagrama-de-modelagem-de-projeto-de-software/", "categories": "DESENVOLVIMENTO, ENGENHARIA DE SOFTWARE", "tags": "diagrama, modelo, arquitetura, análise", "date": "2021-05-20 15:00:00 -0300", "snippet": "Modelos de Ciclo de vida de pojetos de softwaregraph LR CICLO((Ciclo de vida de Sofw.)) --&gt;SEQ(Sequencial ou cascata) SEQ --&gt; ANA(Análise de requisitos) SEQ --&gt; PRO(Projeto) PR...", "content": "Modelos de Ciclo de vida de pojetos de softwaregraph LR CICLO((Ciclo de vida de Sofw.)) --&gt;SEQ(Sequencial ou cascata) SEQ --&gt; ANA(Análise de requisitos) SEQ --&gt; PRO(Projeto) PRO --&gt; PRO1(Estrutura de dados) PRO --&gt; PRO2(Arquitetura do softw.) PRO --&gt; PRO3(Representações da interface) PRO --&gt; PRO4(Detalhes procedimentais) SEQ --&gt; SEQ1(Implementação) SEQ --&gt; SEQ2(testes e validação) SEQ --&gt; SEQ3(Integração) SEQ --&gt; SEQ4(Manutenção) CICLO --&gt; IT(Iterativo e incremental) IT --&gt; VIDA(Ciclo de vida) VIDA --&gt; VIDA1(Inicialização) VIDA --&gt; VIDA2(Iteração) VIDA --&gt; VIDA3(Lista de controle do projeto) IT --&gt; EST(Estruturas de análise) EST --&gt; EST1(Modularidade) EST --&gt; EST2(Usabilidade) EST --&gt; EST3(Reusabilidade) EST --&gt; EST4(Eficiência) EST --&gt; EST5(Obtenção dos objetivos) IT --&gt; PAD(Padroões mais conhecidos) PAD --&gt; PAD1(RUP) PAD --&gt; PAD2(XP) CICLO --&gt; MOD1(Modelo em V) CICLO --&gt; MOD2(Modelo de prototipagem) CICLO --&gt; MOD3(Modelo espiral) CICLO --&gt; DES(Desenvolvimento Ágil) DES --&gt; DES1(Planejamento) DES --&gt; DES2(Análise de requisitos) DES --&gt; DES3(Projeto) DES --&gt; DES4(Codificação) DES --&gt; DES5(Teste) DES --&gt; DES6(Documentação) CICLO --&gt; RAD(Modelo RAD) RAD --&gt; RAD1(Modelagem do negócio) RAD --&gt; RAD2(Modelagem dos dados) RAD --&gt; RAD3(Modelagem do processo) RAD --&gt; RAD4(Geração da aplicação) RAD4 --&gt; RAD41(Técnicas 4GL) RAD4 --&gt; RAD42(Reutilização de componentes) RAD --&gt; RAD5(Teste e modificação)" }, { "title": "Guia de estudo da linguagem Java", "url": "/aulas/posts/guia-de-estudo-da-linguagem-java/", "categories": "DESENVOLVIMENTO, JAVA", "tags": "java, tutorial, curso, linguagem, programação", "date": "2021-05-15 21:22:00 -0300", "snippet": "Links para estudar a linguagem de programação Java.Sites em inglêsUse a extensão do Google Tradutor Iniciando com Java no editor VS code Java tutorial na w3schools Java2s Tutorial javanotes Do...", "content": "Links para estudar a linguagem de programação Java.Sites em inglêsUse a extensão do Google Tradutor Iniciando com Java no editor VS code Java tutorial na w3schools Java2s Tutorial javanotes Documentação do Java 16 da Oracle Documentação da OracleJava interface visual Java Swing tutorial Tutorial UI Swing Tutorial uiswing components dialog OpenSwing framework - novos pacotes gráficosSites em português Cursos de Java na t2ti Curso de Java na Caelum Curso de Java UFSCAR Tradução do livro Pensando em Java Guia Netbeans de aplicativos gráficos com Java e JavaFX Criando um aplicativo gráfico com NetBeans Grupo de usuários Java George Gomes UFRPE aulas de Java Introdução ao Java no IBM Developer" }, { "title": "Consolidação das Leis trabalhistas", "url": "/aulas/posts/clt-consolidacao-das-leis-trabalhistas/", "categories": "TRABALHO, DIREITOS", "tags": "direitos, leis, emprego", "date": "2021-05-13 14:49:00 -0300", "snippet": "A CLT - Consolidação das Leis do Trabalho, é o conjunto das leis trabalhistas brasileiras que regulamentam as relações entre os trabalhadores e as empresas. É importante para todo profissional con...", "content": "A CLT - Consolidação das Leis do Trabalho, é o conjunto das leis trabalhistas brasileiras que regulamentam as relações entre os trabalhadores e as empresas. É importante para todo profissional conhecer seus direitos e deveres.ObjetivoConhecer as principais características da CLT, e os direitos e deveres do trabalhador.HistóriaA Consolidação das Leis do Trabalho foi apresentada na forma do Decreto-Lei n° 5.452 e sancionada pelo então presidente Getúlio Vargas, no período do Estado Novo em 1° de maio de 1943. Seu objetivo é fazer um compilado de toda a legislação trabalhista existente no Brasil, fortalecendo a defesa dos direitos do trabalhador.Conceitos fundamentais Empregador - empresa, individual ou coletiva, que, assumindo os riscos da atividade econômica, admite, assalaria e dirige a prestação pessoal de serviço; Empregado - toda pessoa física que prestar serviços de natureza não eventual a empregador, sob a dependência deste e mediante salário; Serviço - o período em que o empregado esteja à disposição do empregador, aguardando ou executando ordens, salvo disposição especial expressamente consignada;Direitos dos trabalhadores Carteira de trabalho - é um documento que serve como prova do vínculo empregatício e de seu histórico. Jornada de trabalho - deve ter duração máxima de 8 horas diárias e com até 2 horas extraordinárias, deixando de valer apenas em casos especiais ou de comum acordo. Hora extra - é o tempo trabalhado além da jornada, o seu valor deve ser, no mínimo, superior a 50% do valor da hora normal. Descanso semanal remunerado - consiste em um dia na semana em que o trabalhador não precisa realizar suas atividades, mas continua sendo remunerado. Salário mínimo - determina que o trabalhador não pode receber uma remuneração que seja menor do que o salário mínimo estabelecido pelo governo federal. Férias - período de férias anual de 30 dias, sem prejuízo de remuneração. FGTS - é um fundo criado pelo governo com o objetivo de proteger o trabalhador demitido sem justa causa ou ajudá-lo caso ele esteja em situação de vulnerabilidade, empregador deve depositar 8% do salário em conta bancária a favor do empregado. 13º salário; aviso prévio - No caso do empregador que dispensa o empregado, a empresa é obrigada a manter o contrato de trabalho por 30 dias mais o período proporcional. Adicional noturno - compreende o período entre 22h e 5h, assegura o pagamento de um acréscimo de, pelo menos, 20% no valor da hora, em relação ao valor da hora normal. Adicional por insalubridade - atividades que representem risco à sua saúde Adicional por periculosidade - exposição a situações que colocam em risco acentuado sua vida; Seguro desemprego - é um dos benefícios da Seguridade Social e tem a finalidade de garantir assistência financeira temporária ao trabalhador dispensado. Indenização em caso de demissão - ao demitir um colaborador sem justa causa, ele terá direito a certas indenizações relativas a férias, 13º proporcional, aviso prévio indenizado ou trabalhado, multa de 40% sobre o FGTS e, obviamente, salário proporcional aos dias trabalhados. Vale-transporte - benefício que o empregador antecipará ao trabalhador para utilização efetiva em despesas de deslocamento; Licença maternidade - as mulheres têm direito a licença de 120 dias, com garantia de emprego até 5 meses depois do parto, e os homens têm direito a licença paternidade de 5 dias corridos. Vínculo empregatício de 12 meses nos casos de acidente; Falta justificada: 3 dias, quando casar; 1 dia (por ano), quando for doar sangue; 2 dias, quando for fazer o alistamento eleitoral ou por morte de parente próximo; 1 dia, quando for prestar testemunho na Justiça do Trabalho ou por conta de doença comprovada por atestado médico. Deveres dos trabalhadores Horário de trabalho - deve ser anotado em registro de empregados e na folha de ponto; Cumprir as obrigações estabelecidas no contrato; Agir com probidade - integridade, honestidade, retidão; Guardar segredo profissional; Não praticar ofensas físicas e moral; Não apresentar-se para trabalhar alcoolizado; Não faltar ao trabalho sem aviso prévio; Realizar as tarefas com competência.ReferênciasBARROS, Leonardo. O Que É CLT? Veja Seu Significado e Conceitos. Tangerino blog, 2021. Disponível em: https://blog.tangerino.com.br/o-que-e-clt/. Acesso em: 13 de maio de 2021.Consolidação das Leis do Trabalho - Decreto-lei 5452/43 | Decreto-lei n.º 5.452, de 1º de maio de 1943. Jusbrasil. Disponível em:https://presrepublica.jusbrasil.com.br/legislacao/111983249/consolidacao-das-leis-do-trabalho-decreto-lei-5452-43#. Acesso em: 13 de maio de 2021.Entenda os direitos e deveres dos seus funcionários. Egestor, 2014. Disponível em: https://blog.egestor.com.br/entenda-os-direitos-e-deveres-dos-seus-funcionarios/. Acesso Acesso em: 13 de maio de 2021.DAUD, Antonio. CLT Esquematizada para Concursos Públicos. YouTube,2018. Disponível em: https://www.youtube.com/watch?v=Ui11FzqsLC0&amp;ab_channel=Estrat%C3%A9giaConcursos. Acesso em: 13 de maio de 2021.DAUD, Antonio. CLT ESQUEMATIZADA: Baixe gratuitamente a CLT comentada e esquematizada para concursos. Estratégia Concursos blog, 2018. Disponível em &lt;www.estrategiaconcursos.com.br/blog/clt-esquematizada/&gt; . Acesso em: 13 de maio de 2021.NAVARRO, Leonardo. Alguns direitos do trabalhador que você deve conhecer. Idebrasil blog. Disponível em:http://www.idebrasil.com.br/blog/direitos-e-deveres-do-trabalhador-que-voce-deve-conhecer/. Acesso em: 13 de maio de 2021.PINHEIRO, Aline. Principais deveres do empregado para com a empresa, 2015. Jusbrasil. Disponível em:https://alinepinheiro.jusbrasil.com.br/noticias/252310024/principais-deveres-do-empregado-para-com-a-empresa. Acesso em: 13 de maio de 2021." }, { "title": "Manipulação de Strings Java", "url": "/aulas/posts/Manipulacao-de-strings-java/", "categories": "DESENVOLVIMENTO, JAVA", "tags": "java, comandos, strings, programação", "date": "2021-05-11 00:00:00 -0300", "snippet": "Para manipular texto (strings) com a linguagem de programação Java, podemos usar os seguintes comandos:Comparar valores equals() - compara conteúdos, ex: s1.equals(s2); equalsIgnoreCase() - não d...", "content": "Para manipular texto (strings) com a linguagem de programação Java, podemos usar os seguintes comandos:Comparar valores equals() - compara conteúdos, ex: s1.equals(s2); equalsIgnoreCase() - não diferencia maiúsculas e minúsculas compareTo() - compara por ordem alfabética na tabela ascII compareToIgnoreCase()Verificações contains() - verifica se uma string contém outra startsWith() - verifica se começa com outra string endsWith() - verifica se termina com outra string indexOf() - retorna o posição de uma substring lastIndexOf() - retorna a última posição de uma substring isEmpty() - verifica se a string está vazia length() - retorna o tamanho da stringMétodos substituindo objetos String concat() - combina strings replace() - substitui strings toLowerCase() - todas as letras minúsculas toUpperCase() - todas as letras maiúsculas trim() - remove espaços split() - divide a string em outras, ex: String[] ps = s1.trim().split(“ “); charAt() - retorna um caractere na posição, ex: s1.charAt(5); substring() - retorna parte da string, ex: s1.substring(1,3); String.valueOf(object) - converte qualquer objeto para stringBuffer de strings StringBuilder - tipo que cria o buffer append() - acrescenta uma string no fim do buffer insert() - insere uma string em uma posição do buffer toString() - transforma o buffer em stringFormatação de strings String s1 = String.format(“texto a ser formatado”, v1, v2, …, vn); System.out.format(“texto a ser formatado”, v1, v2, …, vn); System.out.printf(“texto a ser formatado”, v1, v2, …, vn); Formatter - tipo formatador, ex: Formatter fmt = new Formatter(sb);fmt.format(\"Maior inteiro: %d%n\", Integer.MAX_VALUE);fmt.format(\"Menor inteiro: %d%n\", Integer.MIN_VALUE);fmt.close();System.out.println(sb.toString()); Especificadores para a formatação Especificador Tipo Saída %s qualquer tipo string %d inteiro (byte, short, long) inteiro decimal %f ponto flutuante (float, double) número decimal %n nenhum quebra de linha %b qualquer tipo “true” se não for nulo %c char, byte, short, int carctere unicode %x byte, short, int, long inteiro hexadecimal %o byte, short, int, long inteiro octal %a float, double número hexadecimal %e float, double decimal em notação científica %g float, double número decimal %h qualquer tipo hexadecimal de hashCode() %t long, Calendar, Date datas e horas formatadas Exemplos:int valorInteiro = 65;System.out.printf(\"%d%n\", valorInteiro); // 65System.out.printf(\"%o%n\", valorInteiro); // 101System.out.printf(\"%x%n\", valorInteiro); // 41System.out.printf(\"%#x%n\", valorInteiro); // 0x41System.out.printf(\"%#X%n\", valorInteiro); // 0X41System.out.printf(\"%b%n\", valorInteiro); // trueSystem.out.printf(\"%c%n\", valorInteiro); // ASystem.out.printf(\"%s%n\", valorInteiro); // 65System.out.printf(\"%h%n\", valorInteiro); // 41Referência Curso do Ricardo Maroquio no YouTube Introdução ao Java no Developer IBM Documentação do Java na Oracle em inglês Estudando java no blog da computação" }, { "title": "Comandos do Git", "url": "/aulas/posts/Comandos-do-git/", "categories": "DESENVOLVIMENTO, GIT", "tags": "git, comandos, repositório", "date": "2021-05-10 00:00:00 -0300", "snippet": "Git é um controle de versões e GitHub é o repositório na internetInformações do repositório git status - estado dos arquivos git status -s - status mais curto git log - mostra um histórico dos c...", "content": "Git é um controle de versões e GitHub é o repositório na internetInformações do repositório git status - estado dos arquivos git status -s - status mais curto git log - mostra um histórico dos commits git log –oneline - simplifica em uma linha git log –oneline –decorate - mostra para onde os ponteiros do branch estão apontando git log –graph - desenha um gráfico git log –oneline –graph - simplifica com um gráfico git log –oneline –decorate –graph –all - exibindo com algo mais legível e com cores git log -p meus-arquivos - histórico de arquivos git log –after=”MMM DD YYYY” - histórico a partir de uma data git log –before=”MMM DD YYYY” - histórico antes de uma data git log –autor=nome-autor - histórico do autor git diff - mostrar diferenças git mergetool - usa a ferramenta gráfica para resolver conflitosAdicionando git add arquivo - adicionar o arquivo ou diretório para o commit git rm arquivo - remove o arquivo do stage e do diretório de trabalho git commit -m “Comentário” git commit -v - inclui as diferenças (diff) da sua alteração git commit -am “este comando adiciona e comita comentando”Desfazendo git checkout arquivo - remove as modificações no arquivo que ainda não foi adicionado git checkout . - remove as modificações ainda não foram adicionadas git clean -df - apaga novos arquivos que não foram adicionados git reset - apaga novos arquivos que foram adicionados git revert HEAD - desfaz o commit git commit –amend - renomear a mensagem do último commitRemoto git remote -v - visualizar links dos repositórios remotos git remote show origin - Inspecionar um repositório remoto git remote add origin endereço-no-github - Adicionar repositório remoto git remote add upstream endereço-no-github - adicionar repositório remoto original de um fork git clone endereço-no-github - clonar o projeto do servidor remoto para local git pull origin nome-do-branch - puxar (trazer) o histórico do servidor remoto git fetch upstream nome-do-branch - Baixar objetos e referências de outro repositório remoto git push origin nome-do-branch - empurrar (enviar) o histórico do local para o servidor remoto git remote rm origin - remove o link do repositório remoto git remote rename nome-atual novo-nome - renomeia repositório remoto git remote set-url origin http://meu-novo-endereco/meu-projeto.git - altera o link do remoto git push origin -d minha-branch - apaga um branch remotoRamificações git branch - Identifica a versão em que o projeto se encontra. git branch -a - lista os branches git checkout nome-do-branch - trocar, alternar de branch (muda o projeto para o branch) git checkout master - retornar a ultima versão do projeto git branch nome-do-branch - criar um branch git checkout -b nome-do-branch - criar um branch e selecioná-lo em apenas um passo (atalho git reset –hard nome-do-branch - git branch -d nome-do-branch - deletar um branch git push origin nome-do-branch - Para deletar um branch remoto enviar um push após deletar local git merge nome-do-branch - une o branch ao branch em que o projeto se encontra git branch -m novo-nome-da-branch - renomeia o branchTags git tag - listar as tags git show v1.4 - detalhar tag git tag v1.4-lw - criar a tag tipo leve git tag -a v1.4 -m “my version 1.4” - criar a tag anotada git tag -a v1.2 9fceb02 - criar uma tag para um branch específico git push origin v1.5 - enviar a tag para o servidor git push origin –tags - enviar todas tags para o servidor git checkout -b version2 v2.0.0 - criar um branch a partir de uma tagConfigurações git init - Para inicializar um repositório git config –list - Listando as configurações git config –global user.name “Fulano de Tal” - Configurar o nome git config –global user.email fulanodetal@exemplo.br - Configurar o email git config –global core.editor nome-do-editor - Configurar o editorReferências: Livro do Git Referência do Git Resumo Curso no YouTube Livro Fundamentos de Git Clonando um repositório Comandos que voce precisa conhecer" } ]
